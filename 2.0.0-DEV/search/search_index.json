{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sorry, your browser doesn't support embedded videos.","title":"Home"},{"location":"#what-server-owners-say","text":"<p>By rating, BetonQuest is in the top 10 out of 57.000 Spigot plugins.  Sometimes, user reviews describe a plugin better than the author can:</p>  <p>Spigot Reviews</p> EsronAzfalothMaverick2020Caleb_Britannia   <p>Quick Facts: <ul> <li> Amazing system for Quests, no matter if they are simple or complex.</li> <li> Easy to make Daily/repeatable quests.</li> <li> Great Discord community and staff support.</li> <li> Can be used to replace every GUI plugin we've had before.</li> <li> Can be used for a ton of stuff other than quests if you learn the systems.</li> </ul></p> <p>The story: I've worked with Beton for a year now, and probably (guessing) worked with it for 500 hours. We've used it on both a survival and a MMORPG server.</p> <p>I have 0 complaints. It's well thought through and getting better by the day. The day BetonQuest 2.0 (you can do like me and use the dev version) comes out, will be a beautiful day for all server owners.</p> <p>/Fred, Esron, Znitsarn.</p>   <p>This is a brilliant plugin. It is so much more than just a plugin for quests. It is a set of tools that allow you to do so many things. I feel like this is a must have for any server that wants to add functionality to citizens NPCs even without using it for making quests. The possibilities are endless. You can have very immersive complex conversations that can be used to explain server functions, create shops, teleport players, make portals etc. [...] The possibilities are limited only by what you can think of doing. I started out looking for a quest plugin and after using this, I wished I had used it before just for the sake of the immersion it adds. [...]</p>   <p>This is the most comprehensive quest plugin I have seen. I am still amazed this is free. The devs are extremely active, continue to make new things available, and have a clear roadmap to offering even more features. I am in awe of their skills and dedication.  I am truly blown away by the support team. They are the absolute best. They answer things quickly and thoroughly. I really cannot say enough good things about this quest plugin!</p>   <p>This is actually my second review after 2 years which goes to show the complexity and skill behind this plugin. Many reviews have stated many times how powerful, complex and overall useful this plugin is. Comparing it to other quest plugins is simply not good because its so powerful I would put it on the level on a minor scripting language. The versatility and scale of this plugin has seen it develop to the backend of some powerful RPG servers! [...]  This is all taken however apart from the most important and influential part of the plugin and that is the developers. I have seen an entire range of developers come and go from the OG Co0sh to the current team and all of them have given it 110%. From releasing patches on the same day bugs have been reported to spending hours and hours in calls with users it is impossible not to realise how much the developers care about the plugin and all its users. Their care and hundreds of hours of dedication are shown in this insanely powerful and (mostly) bug free quest plugin. Anyone who aspires to give their players a  proper RPG experience needs to check this plugin out. Quest on!!</p>","title":"What server owners say"},{"location":"#betonquest-alternatives","text":"<p>Feature</p> BetonQuest Quests PikaMug Quests LMBishop NotQuests BeautyQuests MangoQuest QuestCreator ProQuest     Free         (20$)   (19.99$)   OpenSource           API        1  1   Version Support 1.17 - 1.19 1.8 - 1.19 1.8 - 1.19 1.17 - 1.19 1.8 - 1.19 1.13 - 1.17.1 1.7 - 1.19 1.7 - 1.18   Integrated Plugins 32 13 14 20 15 6 29 1   BetonQuest integration   5         Ingame Editor  Chat &amp; GUI(Paid)   GUI  GUI GUI   External Editor           Database Support SQLite &amp; MySQL MySQL MySQL SQLite &amp; MySQL MySQL MySQL MySQL SQLite &amp; MySQL   BungeeCord Support           Organized File Structure           <p>Unique Features</p>           Multi-Path Conversations      3      Quest Journal           Custom Menus    2        Quest Items           Backpack for Quest Items           Per Player Language           Clientside NPCs           Clientside Players           Clientside Holograms           Clientside Particles      4       <p>Use this table with caution, it might be outdated (last update 3rd of September 2021). Please let us know if there is any outdated information.</p>  <p>Major Difference</p> <p>BetonQuest is not only a quest plugin. All features and systems work outside of quests too. This makes it possible to write scripts that go far beyond what other quest plugins can do. This strength is amplified by a large number of integrations for other plugins.</p> <p>For many users, BetonQuest does not only power quests but also works as their servers' backbone that links all kinds of plugins together. Most competitors are \"just\" quest plugins and therefore limited to simple tasks. That's why BetonQuest skills are worth twice as much since you are not limited to writing quests!  </p>","title":"BetonQuest Alternatives"},{"location":"#betonquest-vs-script-plugins","text":"<p>While BetonQuest can be used for scripting, it stays a quest plugin. It's a compromise, the best of both worlds. Plugins with a full focus on scripting - such as Denizen and Skript are suited better in certain scenarios. Many users even use these alongside BetonQuest as there is integration for such scripting plugins.</p>  <p></p>","title":"BetonQuest vs. Script Plugins"},{"location":"#features","text":"","title":"Features"},{"location":"#beautiful-multi-path-conversations","text":"<p>   Sorry, your browser doesn't support embedded videos. </p>  <p>Players can have immersive conversation with NPC's by utilizing BetonQuests Multi-Path-Conversation System. Questers can freely define multi-path stories, narrated with NPC conversations, and with multiple endings that affect a player's gameplay. Questers can also choose between five different styles to display their conversations.</p>","title":"Beautiful multi-path Conversations"},{"location":"#endless-integrations","text":"<p>BetonQuest supports more than 30 other plugins, ranging from standard plugins like WorldGuard/WorldEdit and Citizens to more advanced ones such as EffectLib. It also offers support for other quest plugins, so you can just keep your old quests and create further additions to your quest lines based upon the progress in your old plugin. If just Beton isn't enough you can always just hook into Skript or Denizen too.</p> <p>See the full list of integrations here.</p>","title":"Endless Integrations"},{"location":"#custom-notification-system","text":"<p>   Sorry, your browser doesn't support embedded videos. </p>  <ul> <li> <p>Questers can make use of BetonQuests notifyIO system that provides access to all of Minecraft's GUI elements to display   notifications.</p> </li> <li> <p>Provide NPC conversations in any language. Each player can set his own language which means that - if translated - all   conversations will be in the players native language.</p> </li> <li> <p>You can give players information about where they are in a quest using the \"Journal\". The Journal is a book in which   you can write content based on the players actions.</p> </li> </ul>","title":"Custom Notification System"},{"location":"#player-npc-and-hologram-hider","text":"<p>   Sorry, your browser doesn't support embedded videos. </p>  <p>BetonQuest allows you to hide players from each other based on conditions. This can be used to create story-regions where players are always alone. It's also possible to hide entire Citizens NPC's and HolographicDisplays holograms.</p>","title":"Player, NPC and Hologram Hider"},{"location":"#training-included","text":"<p>This website provides in-depth learning material for your staff which teaches them all BetonQuest basics. It also has guides on related topics such as the setup of a local test server, so your main server's stability will not be threatened by staff learning / developing quests.</p> <p></p>","title":"Training included"},{"location":"#examples","text":"<p>Our community created a lot of cool stuff! Some members even made machines with this quest plugin - that really shows that your imagination is the only limit. Take a look at this handpicked selection:</p>    Wandering Trader by Ley         Sorry, your browser doesn't support embedded videos.          The trader appears for a few minutes and then leaves until the next day.      Bookshop by Esron         Sorry, your browser doesn't support embedded videos.          A daily quest with NPC voice acting using OpenAudioMC.      Menu by Esron         Sorry, your browser doesn't support embedded videos.          A server / quest menu made with the menu feature.      Bards by Esron         Sorry, your browser doesn't support embedded videos.          A bar setup with musicians and other NPCs. The player can use the conversation system to select a song.  The audio is made with OpenAudioMC.      Water Well by Titanium        Sorry, your browser doesn't support embedded videos.          A functional well as part of a quest.      Elevator by Titanium         Sorry, your browser doesn't support embedded videos.          A functional elevator.      Corpse Quest by Titanium         Sorry, your browser doesn't support embedded videos.          The player needs to collect corpses.","title":"Examples"},{"location":"#donate-money","text":"<p>We are part of the non-profit open source collective! Our monthly costs (server, domain, software licences) are paid by our community. Thanks to them for making this project possible! Any additional money has to be re-invested in the project.</p> <p> </p> <p>You donate a small amount of the sales price by purchasing on mcmodels.net using our affiliate links. </p>","title":"Donate Money"},{"location":"#our-community-sponsors","text":"<p></p>   <ol> <li> <p>Private API, this means that other plugins cannot add support.\u00a0\u21a9\u21a9</p> </li> <li> <p>Limited to Quest related context.\u00a0\u21a9</p> </li> <li> <p>There are conversations, but they are not multi-path.\u00a0\u21a9</p> </li> <li> <p>Only particles above NPCs and a limited configuration.\u00a0\u21a9</p> </li> <li> <p>Integration from the BetonQuest side.\u00a0\u21a9</p> </li> </ol>","title":"Our Community Sponsors"},{"location":"API/API/","text":"<p>Warning</p> <p>All existing API will break in BetonQuest 2.0 which is being worked on while you read this. If you plan on doing something with this API please keep in mind that you will need to change it again later.</p>","title":"Legacy API"},{"location":"API/API/#writing-events","text":"<p>Writing events is the easiest. You need to create a class extending <code>QuestEvent</code> for each new event. The constructor must take one argument, an <code>Instruction</code> object. In the constructor you must extract all information from the instruction, for example skill names, locations etc. The description of the <code>Instruction</code> class is down below. Don't worry about checking event conditions, these are handled by the rest of BetonQuest's logic.</p> <p>Events are not bound to any player so firing it is done through <code>fire(String playerID)</code> method. You have to override it with your code responsible for doing stuff your event should do. Here you should use data previously parsed by the constructor. Don't access <code>Instruction</code> object here, it will lower the performance. You can convert <code>playerID</code> to <code>Player</code> object using the <code>PlayerConverter</code> class (it's a relict of times when both UUIDs and names could be used in Bukkit to identify players).</p> <p>If you want your event to be persistent, you need to set <code>super.persistent</code> variable to <code>true</code> in the constructor. This will make BetonQuest run this event even if the <code>playerID</code> points to an offline player, so prepare your code for that.</p> <p>If you want your event to be static, you need to set <code>super.staticness</code> variable to <code>true</code> in the constructor. This will allow BetonQuest to run this event with <code>playerID</code> set to <code>null</code>, so prepare your code for that.</p> <p>When you'll finish your class you need to invoke <code>registerEvents(String name, Class&lt;? extends QuestEvent&gt; class)</code> from BetonQuest instance (which you can get using <code>BetonQuest.getInstance()</code> static method). The name for your event will be used in instruction strings (such as \"journal\" for journal event). The class argument is the <code>Class</code> object of your event. You can get it using <code>YourEvent.class</code>. That's it, you created an event. Don't forget to check it for bugs!</p>  <p>Warning</p> <p>IDE's typically autocomplete the wrong constructor. A correct constructor takes a single <code>Instruction</code> argument.</p>","title":"Writing events"},{"location":"API/API/#writing-conditions","text":"<p>Writing conditions is easy too. They must extend <code>Condition</code> and override <code>execute(String playerID)</code> method, which should return <code>true</code> or <code>false</code>, depending on if the condition was met. You register them using <code>registerConditions(String name, Class&lt;? extends Condition)</code> method from BetonQuest instance as well. The rest is almost the same, you're defining the constructor which will parse the <code>Instruction</code> object and overriding <code>execute(String playerID)</code> method to check if the player meets the condition. Don't worry about inverting it, as it's automatically done by BetonQuest.</p> <p>Conditions are always getting an online player in the <code>execute(String playerID)</code> method, so you don't need to check that manually.</p>  <p>Warning</p> <p>IDE's typically autocomplete the wrong constructor. A correct constructor takes a single <code>Instruction</code> argument.</p>","title":"Writing conditions"},{"location":"API/API/#writing-objectives","text":"<p>Objectives are more complicated because they use event handlers and they must store players' data. They extend <code>Objective</code> class. As always, you need to extract all data from supplied <code>Instruction</code> object in the constructor. Don't register listeners in the constructor!</p> <p>If your objective handles changing data (like amount of mobs left to kill) you should create a class extending <code>ObjectiveData</code>. For example <code>block</code> objective does need to store amount of blocks left to place/break, and it does that using \"BlockData\" class. In the constructor it receives three strings: data string, ID of the player and ID of the objective. The latter two are used by BetonQuest to correctly save and load the former one from the database.</p> <p>The data string should contains all the information you need in your objective. You must write a parser which will extract the information, methods used in the objective to alter the information, and override the <code>toString()</code> method in so it returns data string in the format parsable by your parser. Everytime the data in your object changes (like when killing a mob), you need to call <code>update()</code> method. It will save the data to the database.</p> <p>Now you should override <code>getDefaultDataInstruction()</code> method. It must return the default data instruction understandable by your parser. For example in <code>tame</code> objective it will return the amount of mobs to tame. If you don't use data objects, just return an empty string (not <code>null</code>, just <code>\"\"</code>).</p> <p>In order for your objective to use the data object you have created you need to set the <code>template</code> variable to this object's class. If you're not defining the data object (because you don't need to handle the changing data), you should set the <code>template</code> simply to <code>ObjectiveData.class</code>.</p> <p>Every time your objective accepts the player's action (for example killing the right mob in MobKill objective) it must be also verified with <code>checkConditions()</code> method. You don't want your objective ignoring all conditions, right? When you decide that the objective is completed you should call <code>completeObjective()</code> method. It will fire all events for you, so you don't have to do this manually.</p> <p><code>start()</code> and <code>stop()</code> methods must start objective's listeners and stop them accordingly. It's because the plugin turns the objective's listeners off if there are no players having it active. Here usually you will register/unregister listeners, but some objectives may be different. For example <code>delay</code> objective starts and cancels a runnable, instead of using listeners.</p> <p>If your objective has some properties (used in variables) you should override the <code>String getProperty(String property, String playerID)</code> method. At runtime, if anyone uses <code>%objective.yourObjective.theProperty%</code> variable, BetonQuest will call that method with <code>theProperty</code> keyword as the first argument. Using it you should parse the data of the objective and return it as a String. If the supplied property name is incorrect or there was an error during getting the value, return an empty String and optionally log an error (<code>LogUtils.getLogger().log(...)</code>).</p> <p>Objectives are registered the same way as conditions and events, using <code>registerObjective(String name, Class&lt;? extends Objective&gt;)</code> method.</p>  <p>Warning</p> <p>IDE's typically autocomplete the wrong constructor. A correct constructor takes a single <code>Instruction</code> argument.</p>","title":"Writing objectives"},{"location":"API/API/#reading-instruction-object","text":"<p>The <code>Instruction</code> object parses the instruction string defined by the user and splits it into arguments. You can ask it for required arguments one by one with <code>next()</code> method or a parser method like <code>getQuestItem()</code>. Required arguments are the ones specified at the very beginning of an instruction string, for example <code>add someTag</code> in <code>tag</code> event. It will automatically throw <code>InstructionParseException</code> for you if it encounters an error, for example when there were no more arguments in user's instruction or it can't parse the argument to the type you asked for.</p> <p>You can also ask for optional arguments: if the instruction string contains argument <code>arg:something</code> and you ask for optional <code>arg</code>, it will give you <code>something</code>. If there is no optional argument, it will return <code>null</code>. Don't worry about passing that <code>null</code> to parser methods like <code>getLocation(String)</code>, they won't throw an error, they'll simply return that <code>null</code>.</p> <p>Parser methods are there for your convenience. You could write a location parser for yourself, but there's no need for that, you can just use <code>getLocation()</code> or <code>getLocation(String)</code> method and receive <code>LocationData</code> object. The former method is simply <code>getLocation(next())</code>.</p> <p>If your instruction is more complicated and <code>Instruction</code> class doesn't provide necessary methods, you can still parse the instruction string manually. You can get it with <code>getInstruction()</code> method. Just remember to throw <code>InstructionParseException</code> when the instruction supplied by the user is incorrect. BetonQuest will catch them and display a message in the console.</p>","title":"Reading <code>Instruction</code> object"},{"location":"API/API/#writing-variables","text":"<p>All variables need to extend <code>Variable</code> class. In the constructor you must parse the instruction and extract all information about your variable's behavior. Then you have to override the <code>String getValue(String playerID)</code> method. It should return the value of the variable for the supplied player. If it's impossible, it should return an empty String. Registering variables is done via <code>BetonQuest.registerVariable(String name, Class&lt;? extends Variable&gt; variable)</code> method.</p>","title":"Writing variables"},{"location":"API/API/#firing-events","text":"<p>The plugin has a static method for firing events - <code>event(String playerID, EventID eventID)</code>. First parameter is ID of the player. Second one represents ID of the event. To get it, simply create an instance of the <code>EventID</code> class. You can't fire an event directly using an instruction string.</p>","title":"Firing events"},{"location":"API/API/#checking-conditions","text":"<p>BetonQuest has static boolean method <code>condition(String playerID, String conditionID)</code>. It works similarly as event method described above.</p>","title":"Checking conditions"},{"location":"API/API/#starting-objectives","text":"<p>The <code>newObjective(String playerID, String objectiveID)</code> method will launch the objective from start. You can however use <code>resumeObjective(String playerID, String objectiveID, String instruction)</code> to pass your own <code>ObjectiveData</code> instruction to the objective. It will not be saved to the database, because it is assumed that the objective has just been loaded from it and it exists there without any change. You should save it manually.</p>","title":"Starting objectives"},{"location":"API/API/#creating-additional-conversation-inputoutput-methods","text":"<p>In order to register an object as the conversation input/output it needs to implement <code>ConversationIO</code> interface. The constructor will receive three arguments: Conversation object, playerID String and NPC name String. It needs to parse the required data here and register all needed listeners. The <code>setResponse(String response)</code> method will receive NPC's text from the conversation. The <code>addOption(String option)</code> method will be called by the conversation for each reply option for this NPC text. The object must store all this data and when <code>display()</code> is called, it must use it to display the player the output. When it detects that the player chose an answer, it should pass it to the conversation using <code>Conversation.passPlayerAnswer(int number)</code> method. The integer is the number of the answer, starting at 1. <code>clear()</code> method will be called at the beginning of the new conversation cycle. It should clear all the previous options, so they do not overlap. <code>end()</code> method will be called when the conversation ends, and it should unregister all listeners. You can also call that message when you detect that the player forced conversation ending (for example by moving away from the NPC). Remember to notify the conversation about that using <code>Conversation.end()</code>.</p> <p>Registering the conversation inputs/outputs is done in the same way as objectives, events and conditions, through <code>BetonQuest.registerConversationIO(String name, Class&lt;? extends ConversationIO&gt;)</code> method.</p>","title":"Creating additional conversation input/output methods"},{"location":"API/API/#listening-to-betonquest-bukkit-events","text":"<p>BetonQuest calls Bukkit events occasionally: when a conversation is started, finished and when an option is selected. You can find these events in <code>org.betonquest.betonquest.api</code> package and use them in your plugins. If you need any additional events just open and issue on GitHub or open a pull request.</p>","title":"Listening to BetonQuest (Bukkit) events"},{"location":"API/ConfigurationFile/","text":"<p>BetonQuest provides the <code>ConfigurationFile</code>, a simple API to load, reload, save and delete configuration files. It extends <code>ConfigurationSection</code> and therefore also provides the well-known Bukkit methods to access and modify the configuration. Additionally, it takes care of patching the config whenever syntax or content changes need to be made.</p>","title":"ConfigurationFile"},{"location":"API/ConfigurationFile/#loading-a-config","text":"<p>By creating a ConfigurationFile you either load an existing config or create the default one from your plugin's resources. <pre><code>Plugin plugin = MyBQAddonPlugin.getInstance();\nFile configFile = new File(plugin.getDataFolder(), \"config.yml\"); // (1)!\nConfigurationFile config = new ConfigurationFile(configFile, plugin, \"defaultConfig.yml\");\n</code></pre></p> <ol> <li>This is the location the config will be saved to. In this case it's a file named \"config.yml\" in your plugin's folder.</li> </ol> <p>Additionally, the ConfigurationFile will attempt to patch itself with a patch file. See updating ConfigurationFiles for more information.</p>","title":"Loading a config"},{"location":"API/ConfigurationFile/#working-with-the-configurationfile","text":"<p>The <code>ConfigurationFile</code> extends <code>ConfigurationSection</code> and therefore provides all known Bukkit methods to access and modify the configuration. You can reload, save and delete the ConfigurationFile by calling it's corresponding <code>reload()</code>, <code>save()</code> and <code>delete()</code> methods.</p>  <p>Reloading Behaviour</p> <p>When reloading the <code>ConfigurationFile</code>, it loads a new <code>ConfigurationSection</code> from the related file and replaces the old root. This means that all references to old child <code>ConfigurationSection</code> in your code will be outdated and need to be updated. Therefore, the best way to work with the <code>ConfigurationFile</code> is to pass it to your classes. Don't pass its children. While querying the <code>ConfigurationFile</code> you can use child <code>ConfigurationSection</code> as usual, just don't store them.</p>","title":"Working with the ConfigurationFile"},{"location":"API/ConfigurationFile/#updating-configurationfiles","text":"<p>The config patcher automatically updates all configs loaded using the <code>ConfigurationFile</code> API. This is needed when changes are made to the existing config format. This patcher only works on configuration files! It's not used for files that contain quests as these should not be loaded  with the <code>ConfigurationFile</code> API.  The patching progress is configured in a dedicated patch file per config file.</p>","title":"Updating ConfigurationFiles"},{"location":"API/ConfigurationFile/#the-patch-file","text":"<p>Whenever a resource file is loaded using BetonQuest's <code>ConfigurationFile</code> API, a \"resourceFileName.patch.yml\" file  is searched in the same directory the resource file is located. It contains the configuration for all patches that need to be applied. Each patch contains configurations for \"transformers\" that apply changes to the resource file before it's loaded. Let's take a look at an example:</p> config.patch.yml<pre><code>2.0.0.1: #(1)!\n  - type: SET #(2)!\n    key: defaultConversationColor\n    value: BLUE\n  - type: REMOVE\n    key: hook.mmocore\n1.12.9.1:\n  - type: LIST_ENTRY_ADD #(3)!\n    key: cmdBlacklist\n    entry: teleport\n</code></pre> <ol> <li>These transformers will be applied for a config on any version older than 2.0.0-CONFIG-1</li> <li>This is the <code>SET</code> transformer. It will set <code>defaultConversationColor</code> to <code>BLUE</code>.</li> <li>This is the <code>LIST_ENTRY_ADD</code> transformer. It will append <code>teleport</code> to the list with the key <code>cmdBlacklist</code>.</li> </ol> <p>All patches that are newer than the configs current version are applied, starting with the oldest one.    </p>","title":"The Patch File"},{"location":"API/ConfigurationFile/#config-versions","text":"<p>The versions in the patch file have four digits (<code>1.2.3.4</code>). The first three are the semantic version of the BetonQuest  version that this patch updates the config to. The last digit is used to version multiple patches during the development phase of a semantic versioning release. </p> <p>The config's version is shown inside each config as the value of the <code>configVersion</code> key. It is automatically set by the patcher. It uses a slightly different format: <code>1.2.3.4</code> in the patch file is <code>1.2.3-CONFIG-4</code> in the config.</p>  <p>Example development cycle:</p> <ul> <li><code>2.0.0</code> is in development...<ul> <li>A change to the config is introduced in a dev build  <code>configVersion: \"2.0.0-CONFIG-1\"</code></li> <li>A change to the config is introduced in another dev build  <code>configVersion: \"2.0.0-CONFIG-2\"</code></li> <li><code>2.0.0</code> is released. Therefore <code>2.0.0-CONFIG-2</code> becomes the final config version of <code>2.0.0</code>.</li> </ul> </li> <li><code>2.0.1</code> is in development...<ul> <li>A change to the config is introduced  <code>configVersion: \"2.0.1-CONFIG-1\"</code></li> <li><code>2.0.1</code> is released. Therefore <code>2.0.1-CONFIG-1</code> becomes the final config version of <code>2.0.1</code>.</li> </ul> </li> <li><code>2.0.2</code> is in development...<ul> <li>No changes to the config are introduced.</li> <li><code>2.0.2</code> is released. <code>2.0.1-CONFIG-1</code> is still the config version of the <code>2.0.2</code> release as no changes have been     introduced to the config.</li> </ul> </li> </ul>  <p>The patcher will also automatically set the version to the newest available patch version if the <code>configVersion</code> is an empty  string. Therefore, setting the <code>configVersion</code> to an empty string in your config's resource file is recommended. The patcher will make sure it's always up-to-date. </p>","title":"Config Versions"},{"location":"API/ConfigurationFile/#transformer-types","text":"<p>By default, the transformers down below are available. </p> <p>If you want to use your own transformers, you can pass them to the create method in the form of a <code>PatchTransformerRegisterer</code>. This is just a functional interface, that registers additional transformers. Utilizing this possibility will however override the default transformers. You need to re-add them explicitly. </p> Anonymous PatchTransformerRegisterer Example<pre><code>config = ConfigurationFile.create(configFile, MyPlugin.getInstance(), \"config.yml\",\n    new PatchTransformerRegisterer() {\n        @Override\n        public void registerTransformers(final Patcher patcher) {\n            PatchTransformerRegisterer.super.registerTransformers(patcher); //(1)!\n            // Register your own transformers here:\n            patcher.registerTransformer(\"myTransformer\", new MyTransformer()); \n        }\n    });\n</code></pre> <ol> <li>Call this if you want to use the default transformers alongside your own.</li> </ol>","title":"Transformer Types"},{"location":"API/ConfigurationFile/#set","text":"<p>Sets a key to the given value. Already set keys will be overridden if <code>override</code> is set to <code>true</code>. Syntax<pre><code>- type: SET\n  key: journalLocked\n  value: true\n  override: true\n</code></pre></p>","title":"SET"},{"location":"API/ConfigurationFile/#key_rename","text":"<p>Renames a key while preserving the value. Syntax<pre><code>- type: KEY_RENAME\n  oldKey: journalLocked\n  newKey: journalLockedOnSlot\n</code></pre></p>","title":"KEY_RENAME"},{"location":"API/ConfigurationFile/#list_entry_add","text":"<p>Adds an entry to the given list. The list will be created if it did not exist so far. Syntax<pre><code>- type: LIST_ENTRY_ADD\n  key: section.myList\n  entry: newEntry\n  position: LAST #(1)!\n</code></pre></p> <ol> <li>Can be <code>FIRST</code> or <code>LAST</code>. Default value is <code>LAST</code>.</li> </ol>","title":"LIST_ENTRY_ADD"},{"location":"API/ConfigurationFile/#list_entry_rename","text":"<p>Renames all list entries that match the given regex. Syntax<pre><code>- type: LIST_ENTRY_RENAME\n  key: section.myList\n  oldEntryRegex: currentEntry\n  newEntry: newEntry\n</code></pre></p>","title":"LIST_ENTRY_RENAME"},{"location":"API/ConfigurationFile/#list_entry_remove","text":"<p>Removes all list entries that match the given regex. Syntax<pre><code>- type: LIST_ENTRY_REMOVE\n  key: section.myList\n  entry: removedEntry\n</code></pre></p>","title":"LIST_ENTRY_REMOVE"},{"location":"API/ConfigurationFile/#value_rename","text":"<p>Renames the key's value if it matches the given regex. Syntax<pre><code>- type: VALUE_RENAME\n  key: section.testKey\n  oldValueRegex: test\n  newValue: newTest\n</code></pre></p>","title":"VALUE_RENAME"},{"location":"API/ConfigurationFile/#type_transform","text":"<p>Transforms the data type of an existing key into the given Java data type. This will result in a different formatting in the YAML file. E.g. strings will be surrounded by quotes, numbers and booleans won't. Syntax<pre><code>- type: TYPE_TRANSFORM\n  key: section.myKey\n  newType: string #(1)!\n</code></pre></p> <ol> <li>Either <code>string</code>, <code>integer</code>, <code>double</code>, <code>float</code> or <code>boolean</code>. </li> </ol>","title":"TYPE_TRANSFORM"},{"location":"API/ConfigurationFile/#remove","text":"<p>Removes both sections and keys (including all nested contents). Syntax<pre><code>- type: REMOVE\n  key: section.myList\n</code></pre></p>","title":"REMOVE"},{"location":"API/Logging/","text":"API State: <code>Draft</code> <p>BetonQuest 2.0 is currently in development. This will take some time. Any part of the API may change more than once during development. Sure, any API is supposed to be stable. But we cannot guarantee this - BetonQuest 2.0 includes many redesigns of core concepts. It's possible that these turn out to be flawed. However, API states help you understand how finalized an API part is.</p> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p>   <p>This page shows you everything you need to know about the BetonQuest logger, no matter if you are working on BetonQuest  itself or an integration / addon.</p>","title":"Logging"},{"location":"API/Logging/#why-a-custom-logger","text":"<p>The main advantage is that it is easier to use. It provides an easy interface that enables custom logging features and respects our logging conventions.  This helps to provide a great user experience and keeps the log consistent.</p>","title":"Why a custom Logger?"},{"location":"API/Logging/#advantages","text":"<p>These advantages are mainly for BetonQuest, but it is also very useful for 3rd party integrations. </p>  In-Game Logging <p>Users can see all log messages send, using the BetonQuestLogger in-game. Additionally, these messages can be filtered by quest package and log level.</p>   Debug Logging <p>BetonQuest has its own <code>log</code> folder in which a <code>latest.log</code> file is written if debug logging is enabled. It contains our own log messages and messages from 3rd party integrations. Additional debug messages are logged next to everything that is displayed on the console already. You can send debug log messages directly to that log when you use the BetonQuestLogger in your addon. This will make it a lot easier to see how your plugin integrates with BetonQuest's mechanics if a bug occurs.</p>   Log History <p>It happens very often that a user experiences a bug while debug logging is not enabled. We keep the last <code>x</code> configured minutes of the debug log history saved in memory. Therefore, the history will be written to <code>latest.log</code> once you enable \"Debug Logging\" via command. </p>   Logger Topics <p>The BetonQuestLogger supports topics, which give your log messages a prefix like <code>(Database)</code>. You can use a topic for each class or for each BetonQuestLogger instance. Topics are supposed to give important log messages extra attention by making them stand out. The naming convention is to use PascalCase for topics.</p>","title":"Advantages"},{"location":"API/Logging/#obtaining-a-betonquestlogger-instance","text":"Using LombokUsing plain Java   <p>Using Lombok enables you to use the handy @CustomLog annotation on each class you want a logger for. This requires a Lombok setup in your project and in your IDE.</p>  <p>1. Setup</p> <p>The first step is to install a Lombok plugin in your IDE. IntelliJ contains it by default.</p> <p>All 3rd party plugins need to create a new file named <code>lombok.config</code> in their projects root. Copy the following to the file: <pre><code>lombok.log.custom.declaration = org.betonquest.betonquest.api.BetonQuestLogger org.betonquest.betonquest.api.BetonQuestLogger.create(TYPE)(TYPE,TOPIC)\nlombok.log.fieldName = LOG\n</code></pre> Additionally, Lombok also needs to be setup for the project. The exact configuration depends on your project setup.</p>   <p>2. Usage</p> <p>Simply add the <code>@CustomLog</code> annotation to any class definition. This will not work on any class that extends <code>Plugin</code>, see the warning box below for more information. </p> Without topicWith topic   <pre><code>@CustomLog\npublic final class MyCustomEvent {\n//...\n    LOG.info(\"Hello Log!\");\n//...\n</code></pre>   <pre><code>@CustomLog(topic = \"MyCustomTopic\")\npublic final class MyCustomEvent {\n//...\n    LOG.info(\"Hello Log!\");\n//...\n</code></pre>        <p>This method works without Lombok. Simply create a BetonQuestLogger instance.</p> Without topicWith topic   <pre><code>public final class MyCustomEvent {\n    private final static BetonQuestLogger LOG = BetonQuestLogger.create(MyCustomEvent.class);\n</code></pre>   <pre><code>public final class MyCustomEvent {\n    private final static BetonQuestLogger LOG = BetonQuestLogger.create(MyCustomEvent.class, \"MyCustomTopic\");\n</code></pre>          <p>Get the logger in your JavaPlugin class</p> <p>The methods described above don't work for your plugin's main class (or any other class that extends <code>Plugin</code>).  Create the logger instance in the <code>onEnable()</code> method instead.</p> Without topicWith topic   <pre><code>public final class BetonQuestAddon extends JavaPlugin {\n\n    private static BetonQuestLogger log;\n\n    @Override\n    public void onEnable() {\n        log = BetonQuestLogger.create(this);\n    }\n</code></pre>   <pre><code>public final class BetonQuestAddon extends JavaPlugin {\n\n    private static BetonQuestLogger log;\n\n    @Override\n    public void onEnable() {\n        log = BetonQuestLogger.create(this, \"MyCustomTopic\");\n    }\n</code></pre>","title":"Obtaining a BetonQuestLogger Instance"},{"location":"API/Logging/#using-the-betonquestlogger","text":"<p>A BetonQuestLogger will be available as the variable <code>LOG</code> once you obtained a BetonQuestLogger instance.  It has a bunch of methods for all use cases. Its JavaDocs explain when and how to use these. Make sure to give the JavaDocs a quick read! </p>","title":"Using the BetonQuestLogger"},{"location":"API/Logging/#method-overview","text":"<p>All methods come in multiple variants. Always provide a package if possible, as this makes it possible to filter the log message.</p>    Name Use Case Example      Debug Used to display internal states or events that may be beneficial for bug-fixing. These messages are only be visible in the debug log. An event has been fired.    Info Use this for normal log information in the server's console. A new integration was successfully hooked.    Warning You can provide useful information how to fix the underlying problem. The user wrote an event with syntax errors.    Error The underlying problem affects the servers security or functionality. Usage is also allowed if you don't know how the user can fix the underlying problem. An error occurred while loading an integration.    Report Exception Only use this in cases that should never occur and indicate an error that must be reported to the projects issue tracker. You need to catch an exception that you know should never occur unless something is horribly wrong.","title":"Method Overview"},{"location":"API/Overview/","text":"<p>Work in Progress!   </p> <p>Both the plugin and the API are currently getting redesigned.</p> <p>Therefore, required docs and API's are likely missing and will be added one by one. Newly added API's are subject to change and will have an API state assigned to them.</p> <p>We appreciate any feedback! The old API page is still available.</p>  API States <p>BetonQuest 2.0 is currently in development. This will take some time. Any part of the API may change more than once during development. Sure, any API is supposed to be stable. But we cannot guarantee this - BetonQuest 2.0 includes many redesigns of core concepts. It's possible that these turn out to be flawed. However, API states help you understand how finalized an API part is.</p> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p>","title":"Overview"},{"location":"API/Overview/#adding-betonquest-as-a-dependency","text":"<p>You can add BetonQuest as a dependency using your build system. Here is the config for Maven:</p> Add this to your repositories tag<pre><code>&lt;repository&gt;\n    &lt;id&gt;betonquest-repo&lt;/id&gt;\n    &lt;url&gt;https://betonquest.org/nexus/repository/betonquest/&lt;/url&gt;\n&lt;/repository&gt;\n</code></pre> Add this to your dependencies tag<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.betonquest&lt;/groupId&gt;\n    &lt;artifactId&gt;betonquest&lt;/artifactId&gt;\n    &lt;version&gt;2.0.0-SNAPSHOT&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>","title":"Adding BetonQuest as a dependency"},{"location":"API/Schedules/","text":"API State: <code>Unfinished</code> <p>BetonQuest 2.0 is currently in development. This will take some time. Any part of the API may change more than once during development. Sure, any API is supposed to be stable. But we cannot guarantee this - BetonQuest 2.0 includes many redesigns of core concepts. It's possible that these turn out to be flawed. However, API states help you understand how finalized an API part is.</p> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p>   <p>If the native schedule types are not enough for you, this API enables you to create your own type.</p>","title":"Schedules"},{"location":"API/Schedules/#api-overview","text":"<p> </p>","title":"API Overview"},{"location":"API/Schedules/#creating-a-new-schedule-type","text":"<p>To implement a new schedule type you have to create both the Schedule and the Scheduler class.</p>  About this guide <p>This guide will show you how to create a custom schedule that runs every <code>x</code> ticks, just like a redstone clock. While this does not make that much sense, it is a super simple example to show the principle.</p>","title":"Creating a new schedule type"},{"location":"API/Schedules/#schedule-class","text":"<p>The schedule class must hold all the schedules' data. When reloading BetonQuest will try to parse all packages and construct new instances of this class.</p> <p>Have a look at this example to see how to implement your own schedule.</p> Example Schedule<pre><code>public class MyCustomSchedule extends Schedule/* (1)! */ {\n\n    private final int ticks, rebootSleep;\n\n    // (2)!\n    public MyCustomSchedule(ScheduleID scheduleID, ConfigurationSection instruction) throws InstructionParseException { \n        super(scheduleID, instruction);\n        try {\n            ticks = Integer.parseInt(getTime()/* (3)! */);\n        } catch (NumberFormatException e) {\n            throw new InstructionParseException(\"Time is not a number\");// (4)!\n        }\n\n        if (getCatchup() != CatchupStrategy.NONE) {// (5)!\n            throw new InstructionParseException(\"Catchup \" + getCatchup() + \" is not supported by this schedule type\");\n        }\n\n        rebootSleep = instruction.getInt(\"options.rebootSleep\");// (6)!\n    }\n\n    public int getTicks() { return ticks; }\n    public int getRebootSleep() { return rebootSleep; }\n}\n</code></pre> <ol> <li> <p>You can extend either <code>Schedule</code> or <code>CronSchedule</code>.      The latter has already implemented all cron parsing logic.</p> </li> <li> <p>You need to define a Constructor that matches exactly this one. Otherwise BetonQuest can't parse your schedule!</p> </li> <li> <p><code>getTime()</code>/<code>super.time</code> provides the raw time string.     You'll need to parse it and add your own logic. In this example we just use it as interval of ticks.</p> </li> <li> <p>Make sure to handle all parsing errors &amp; thrown exceptions!    If a schedule can't be loaded due to an invalid instruction,    you should throw a <code>InstructionParseException</code> that describes    the error.</p> </li> <li> <p>You'll have to implement your own handling of catchup strategies     in the <code>Scheduler</code> class. If you don't want that, you can add this check if a CatchupStrategy     was defined and throw an Exception.</p> </li> <li> <p>This is how you add custom options, if needed.</p> </li> </ol>","title":"Schedule Class"},{"location":"API/Schedules/#scheduler-class","text":"<p>The scheduler will receive parsed schedules using <code>addSchedule(S)</code> and hold them in the <code>schedules</code> map. It should contain all the scheduling &amp; schedule execution logic. It is also responsible for catching up missed schedules, if they have a catchup strategy other than <code>NONE</code> defined.</p> <p>Here is a pretty basic example, that does not provide any catchup logic:</p> Example Scheduler<pre><code>public class MyCustomScheduler extends Scheduler&lt;MyCustomSchedule&gt;/* (1)! */ {\n\n    private List&lt;BukkitTask&gt; tasks;\n\n    @Override\n    public void start() {\n        super.start();// (2)!\n\n        tasks = new ArrayList&lt;&gt;();\n        for (MyCustomSchedule schedule : schedules.values()/* (3)! */) {\n            // (4)!\n            BukkitTask task = new BukkitRunnable() {\n                @Override\n                public void run() {\n                    executeEvents(schedule);\n                }\n            }.runTaskTimer(MyPlugin.getInstance()/* (5)! */, schedule.getRebootSleep(), schedule.getTicks());\n\n            tasks.add(task);// (6)!\n        }\n    }\n\n    @Override\n    public void stop() {\n        super.stop();// (7)!\n\n        for (BukkitTask task : tasks) {\n            task.cancel();// (8)! \n        }\n    }\n} \n</code></pre> <ol> <li> <p>Your scheduler must extend <code>Scheduler</code> class.     Between <code>&lt;&gt;</code> you have to put the name of your Schedule class.</p> </li> <li> <p>Always remember to call <code>super.start()</code> in your <code>start()</code> method!</p> </li> <li> <p>An easy way to iterate over all loaded schedules.</p> </li> <li> <p>Schedule your events to run when their time instruction says.</p> </li> <li> <p>Pass your plugin instance for the Bukkit-Scheduler.</p> </li> <li> <p>Keep a list of all your active schedules somewhere, so you can easily cancel them.</p> </li> <li> <p>Always remember to call <code>super.stop()</code> in your <code>stop()</code> method!</p> </li> <li> <p>Make sure to cancel all active schedules in <code>stop()</code> method.</p> </li> </ol>","title":"Scheduler Class"},{"location":"API/Schedules/#register-the-type","text":"<p>To register the new schedule type to BetonQuest, use the following method: <pre><code>BetonQuest.getInstance().registerScheduleType(\"redstoneScheduler\"/* (1)! */,\n  MyCustomSchedule.class/* (2)! */,new MyCustomScheduler()/* (3)! */);\n</code></pre></p> <ol> <li> <p>The name of your new schedule type to use in configs.</p> </li> <li> <p>Your Schedule class.</p> </li> <li> <p>A new instance of your Scheduler.</p> </li> </ol> <p>You'll need to call it after BetonQuest was enabled.</p>","title":"Register the type"},{"location":"Documentation/CHANGELOG/","text":"","title":"Changelog"},{"location":"Documentation/CHANGELOG/#changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>","title":"Changelog"},{"location":"Documentation/CHANGELOG/#200-dev-427-2022-10-27","text":"","title":"[2.0.0-DEV-427] - 2022-10-27"},{"location":"Documentation/CHANGELOG/#added","text":"<ul> <li>Logging<ul> <li>Ingame logging<ul> <li>Logging during <code>/q reload</code></li> </ul> </li> <li>New command <code>/q debug ingame</code></li> <li>Debug logging to separate file</li> <li>Log history length can be freely configured</li> </ul> </li> <li>add AureliumSkills Compatiblity<ul> <li>added AureliumSkillsLevelCondition</li> <li>All existing users must add aureliumskills: 'true' to their config.yml's hook section.</li> <li>added AureliumStatsLevelCondition</li> <li>added AureliumSkillsLevelExperienceEvent</li> </ul> </li> <li>add LuckPerms context integration for tags<ul> <li>All existing users must add luckperms: 'true' to their config.yml's hook section.</li> </ul> </li> <li>added Event Schedules to replace old static-events system</li> <li>NotifyIO \"totemIO\"</li> <li>Support for MythicLib</li> <li>player attribute to QuestCompassTargetChangeEvent</li> <li>added PlayerObjectiveChangeEvent, PlayerJournalAddEvent, PlayerJournalDeleteEvent</li> <li>Allow %player% variable for PLAYER_HEAD quest items</li> <li>allow access to objective variable properties from other packages</li> <li>allow point variables from other packages</li> <li>API method in objective API that starts and stops it per player</li> <li>config option <code>journal.show_in_backpack</code> to remove the journal from the backpack</li> <li>config option <code>journal.lock_default_journal_slot</code> to lock the journal to the <code>default_journal_slot</code></li> <li>config option <code>journal.give_on_respawn</code> to add the journal to the inventory after the player respawns</li> <li>config option <code>journal.custom_model_data</code> to give the journal a ressource pack based skin</li> <li>compass now supports items from other packages</li> <li>new messages.yml entries <code>inventory_full_backpack</code> and <code>inventory_full_drop</code> to have more specific messages,   when the inventory of the player is full</li> <li><code>menu</code> conversationIO option <code>npc_name_newline_separator</code></li> <li>added <code>q download</code> command</li> <li>variable support for menu titles</li> <li>configurable cooldown to menu conversation IO</li> <li>holograms<ul> <li>variable support</li> <li>top lists ordered by point values of players</li> </ul> </li> <li><code>freeze</code> event - ProtocolLib compatibility feature: Blocks the player from moving for the specified amount of ticks</li> <li><code>block</code> objective - properties: <code>absoluteAmount</code>, <code>absoluteLeft</code> and <code>absoluteTotal</code></li> <li><code>command</code> objective</li> <li><code>equip</code> objective</li> <li><code>delay</code> objective - now support variables</li> <li><code>opsudo</code> event - now supports variables</li> <li><code>variable</code> condition - now supports variables</li> <li><code>bossbar</code> notify style now supports variables for the <code>progress</code> argument</li> <li><code>delay</code> objective property: <code>rawSeconds</code></li> <li><code>fish</code> objective now has <code>hookLocation</code> and <code>range</code> settings.</li> <li><code>consume</code> objective now has <code>amount</code> argument.</li> <li><code>mmoprofessionlevelup</code> objective can now check the main character level as well</li> <li><code>burning</code> condition</li> <li><code>inconversation</code> condition</li> <li><code>heroesattribute</code> condition - Heroes compatibility feature: Checks a player's level for a particular attribute against a value</li> <li><code>variable</code> condition - regex can now also be a variable</li> <li><code>mmspawn</code> event now has argument <code>target</code> Makes the spawned mob target the player</li> <li><code>mmspawn</code> event now has argument <code>private</code> Visually hides the spawned mob from other players. Does not stop sound or particles</li> <li><code>mmspawn</code> event now supports the <code>marked</code> argument</li> <li><code>mmobkill</code> objective now supports the <code>marked</code> argument</li> <li><code>marked</code> argument now supports %player% variable </li> <li><code>globaltag</code> and <code>globalpoint</code> variables</li> <li><code>burn</code> event - ignites player for given seconds, supports variables</li> <li><code>velocity</code> event - throws the player by a vector (can be variable) with a direction and modification</li> <li><code>block</code> objective - added argument <code>noSafety</code> which disables removing progress when the player does the opposite of what the objective asks for</li> <li><code>block</code> objective - added property variables <code>absoluteLeft</code>, <code>absoluteTotal</code>, <code>absoluteAmount</code> that always return absolute values</li> <li><code>hunger</code> condition and event</li> <li><code>variable</code> condition - forceSync argument forces the condition to be checked on the main thread</li> <li><code>variable</code> condition - now supports variables as both the input and the regular expression </li> <li>Things that are also added in 1.12.X:<ul> <li>new line support for <code>journal_lore</code> in <code>messages.yml</code></li> <li>FastAsyncWorldEdit compatibility</li> <li>curly braces in math.calc variables for using variables with math symbols</li> <li>Vietnamese translation</li> <li>added invOrder setting to (mmoitem)take event</li> <li>Version checks for ProtocolLib and Shopkeepers support</li> <li><code>mmoitemtake</code> event and <code>mmoitem</code> condition - now also check the backpack<ul> <li>this will not work until the item rework / until the backpack contains NBT data</li> </ul> </li> </ul> </li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#changed","text":"<ul> <li>Java 17 is now required</li> <li>changed package names from <code>pl.betoncraft.betonquest</code> to <code>org.betonquest.betonquest</code></li> <li>Changed quest package structure<ul> <li>Quest packages are now searched and loaded from the folder <code>BetonQuest/QuestPackages/</code></li> <li>Quest packages can now contain more quest packages in sub folders</li> <li>Relative paths can now navigate downwards and not only upwards</li> <li><code>main.yml</code> was renamed to <code>package.yml</code></li> <li>Any file and folder structure with any file and folder names is now allowed, except <code>package.yml</code>, as that file   indicates a quest package</li> <li><code>events</code>, <code>objectives</code>, <code>conditions</code>, <code>journal</code> and <code>items</code> are now defined in a config section matching their   names</li> <li><code>conversations</code> and <code>menus</code> are now defined in a config section matching their names and a unique identifier like   the file name before</li> </ul> </li> <li>all objectives that can be advanced without directly completing now support notify</li> <li>all objectives that can be advanced without directly completing now support <code>left</code>, <code>amount</code> and <code>total</code> variables<ul> <li>the <code>left</code> and <code>amount</code> variables of some objectives were swapped and have been corrected: <code>left</code> is the amount   left, <code>amount</code> is the amount done</li> </ul> </li> <li>AureliumSkills updated to version Beta1.2.5</li> <li>PikaMug Quests updated to version 4.1.3</li> <li>Items now support AIR</li> <li>Menus now support new <code>click</code> options <code>shiftLeft</code>, <code>shiftRight</code> and <code>middleMouse</code> to execute events on item clicks<ul> <li>Therefore <code>left</code> and <code>right</code> in the <code>click</code> section no longer include shift clicks</li> </ul> </li> <li><code>folder</code> event - now executes events immediately if no delay is set</li> <li><code>weather</code> event - now has an optional variable duration (in seconds) and an optional world param</li> <li><code>paste</code> event - can now be static</li> <li><code>chestput</code> objective - can now block other players from accessing a chest while someone is putting items inside</li> <li>The location and region objectives now register movement of players inside a vehicle</li> <li>written book is now readable as a quest item</li> <li>HolographicDisplays updated to 3.0.0</li> <li>Added staticness indicator to variables that can be executed without a direct player connection</li> <li>written book quest items can now be read</li> <li>Things that are also changed in 1.12.X:<ul> <li>math variable now allows rounding output with the ~ operator</li> <li>French translation has been updated</li> <li><code>action</code> objective - cancels now the event, before other plugins check for it (better third-party support)</li> </ul> </li> </ul>","title":"Changed"},{"location":"Documentation/CHANGELOG/#deprecated","text":"","title":"Deprecated"},{"location":"Documentation/CHANGELOG/#removed","text":"<ul> <li>deprecated internals, code and old features</li> <li>Support for MMOLib</li> <li><code>message</code> event</li> <li><code>title</code> event</li> <li><code>playsound</code> event</li> </ul>","title":"Removed"},{"location":"Documentation/CHANGELOG/#fixed","text":"<ul> <li>q version now works again</li> <li>RPGMenu error when teleport events are used as click events</li> <li>RPGMenu bound items not always working</li> <li>npc_holograms do now show errors during reload and not one tick later</li> <li>first slot in backpack stays empty when journal is in player inventory</li> <li>npc_holograms are not shown correctly with multiple defined npcs</li> <li>spectator mode is now disabled for chest conversation io to prevent being stuck in the conversation</li> <li>packet chat interceptor does not catch action bar anymore</li> <li>time event does not work with floating point values</li> <li><code>location</code> objective - is now more robust if the player changes a world</li> <li><code>brew</code> objective - now counts newly brewed potions even if there were already some potions of the desired type in   other slots present</li> <li><code>menu</code>(open) event - showed the previous menu again</li> <li>non .yml files causing errors when loading quest packages</li> <li>Things that are also fixed in 1.12.X:<ul> <li>parsing of math variable</li> <li>Citizens compatibility for not spawned NPCs</li> <li>NotifyIOs are case-sensitive</li> <li>all mmo objectives trigger for everyone</li> <li>tags and points are now thread safe</li> <li>compatibility for packet interceptor on papermc</li> <li>NPC hider for not spawned NPCs</li> <li>Conversation IO Chest load NPC skull async from Citizens instead of sync</li> <li>block selector didn't respect regex boundary</li> <li>block selector regex errors are now properly handled</li> <li><code>default_journal_slot: -1</code> now uses the first free slot instead of the last hotbar slot</li> <li>PacketInterceptor sync wait lag</li> <li>notifications using the chatIO were catched by the conversation interceptor</li> <li>global variables didn't work in quester names</li> <li>quest items couldn't interact with any blocks, which also prevented them from mining blocks</li> <li>backpack passing references instead of clones</li> <li>fixed combat event packet that changed with MC 1.17</li> <li>fixed hooking in ProtocolLib</li> <li>max_npc_distance was set to 5.3 to prevent instant quiting of conversations</li> <li>conversation IO menu sometimes leave an armorstand spawned</li> <li>sometimes messages in a conversation are not send when packet interceptor is used</li> <li>added missing config options to the default config</li> <li>quest item empty name comparison</li> <li>customized built-in messages that use the advancementIO</li> <li>fix books not parsing color codes</li> <li>BlockSelector without a namespace but starting with <code>:</code> did not work and threw an exception</li> <li>exception during reload, when npc_holograms are disabled</li> <li>mmoitems item creation only worked with uppercase id's</li> <li>reload with an invalid PlayerHider causes a NPE</li> <li>QuestItems could be eaten, this was caused by a changed mc behaviour</li> <li>notify IO <code>subtitle</code> and <code>title</code> with only a subtitle was not send</li> <li>npcHider not working for citizens with a ModelEngine trait</li> <li>1.19 ProtocolLib warnings about deprecated packages</li> <li>conversation IO chest did not show the correct NPC heads</li> <li><code>npcrange</code> objective - is triggered at wrong time</li> <li><code>command</code> event - includes 'conditions:...' into the command</li> <li><code>craft</code> objective - multi-craft, drop-craft, hotbar/offhand-craft, shift-Q-craft and any illegal crafting is   correctly detected</li> <li><code>mmobkill</code> objective - notify argument not working correctly</li> <li><code>mmoclass</code> condition - used the class display name instead of the class ID to compare classes</li> <li><code>mmoitemgive</code> event - did not check if the item actually exists</li> <li><code>fish</code> objective - didn't count the amount of fish caught in one go (if modified by e.g. mcMMO)</li> <li><code>smelt</code> objective - only taking out normally did count, shift-extract got canceled</li> <li><code>variable</code> objective - empty values don't break on player join</li> <li><code>password</code> objective - case insensitive did not work if the password contained upper case letters</li> <li><code>shear</code> objective - sheep couldn't have underscores in their names</li> <li><code>compass</code> event - now allows global variables</li> <li><code>entities</code> condition and <code>clear</code> event - now support not living entities</li> <li><code>command</code>, <code>sudo</code> and <code>opsudo</code> events - didn't work with conditions</li> <li><code>interact</code> objective - did not work with armorstands</li> <li><code>action</code> objective - for <code>any</code> block ignored location</li> <li><code>weather</code> event - storm did not work</li> <li><code>run</code> event - NPE when run as static event / schedule</li> <li><code>objective</code> event - static calls did not remove the objective for online players</li> </ul> </li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#security","text":"<ul> <li>it was possible to put a QuestItem into a chest</li> <li>bump log4j dependency 2.15.0 to fix CVE-2021-44228</li> <li><code>take</code> event - is now threadsafe</li> </ul>","title":"Security"},{"location":"Documentation/CHANGELOG/#1121-2021-02-05","text":"","title":"[1.12.1] - 2021-02-05"},{"location":"Documentation/CHANGELOG/#added_1","text":"<ul> <li>Ingame update notification if the updater found an update</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#changed_1","text":"","title":"Changed"},{"location":"Documentation/CHANGELOG/#deprecated_1","text":"","title":"Deprecated"},{"location":"Documentation/CHANGELOG/#removed_1","text":"","title":"Removed"},{"location":"Documentation/CHANGELOG/#fixes","text":"<ul> <li>The Autoupdater got a small fix, and the fail safety for broken downloads was improved</li> <li><code>npcrange</code> objective does not throw errors when the player is in a different world than the NPC</li> <li>The block objectives notify could not be disabled</li> <li>fixed ConcurrentModificationException in EntityHider</li> <li>fixed notify enabled by default for some objectives</li> <li>fixed some grammar mistakes in debug messages</li> <li>fixed npc teleport and walk operations in unloaded chunks</li> <li>fixed inaccurate location variable decimal rounding</li> <li>fixed NullPointerException for NPCs with conversation</li> <li>fixed resuming to path finding when conversation interrupt movement</li> <li>fixes Die objective teleporting player during the tick</li> </ul>","title":"Fixes"},{"location":"Documentation/CHANGELOG/#security_1","text":"","title":"Security"},{"location":"Documentation/CHANGELOG/#1120-2021-01-10","text":"","title":"[1.12.0] - 2021-01-10"},{"location":"Documentation/CHANGELOG/#added_2","text":"<ul> <li>Tags and Objectives can now be removed with a static event for all players, even if they are not online<ul> <li>deletepoint event can now also be called to delete all points for all players</li> <li>journal del event can now also be called as static</li> </ul> </li> <li>Added integration for TeamRequiem plugins (MMOCore, MMOItems, MMOLib)<ul> <li>Conditions:<ul> <li>MMOClass condition (type &amp; class)</li> <li>MMOProfession condition</li> <li>MMOAttribute condition</li> <li>MMOItems item condition (item in inventory)</li> <li>MMOItems hand condition (item in main/offhand)</li> <li>MMOLib stats condition  (a ton of stats from Core and Items combined)</li> </ul> </li> <li>Objectives:<ul> <li>Level X Profession to X Level</li> <li>Craft / Upgrade X Item within Inventory</li> <li>Craft X item</li> <li>Apply Gem Stone to Item</li> <li>Upgrade Item via Consumable</li> <li>Cast Item ability</li> <li>Cast Class ability</li> <li>Mine MMOBlock</li> </ul> </li> <li>Events:<ul> <li>Add mmo class level or exp</li> <li>Add mmo professional level or exp</li> <li>Add Skill points</li> <li>Add attribute points</li> <li>Add attribute reallocation points</li> <li>Add class points</li> <li>Give Item \ufe0f</li> <li>Take Item</li> </ul> </li> </ul> </li> <li>equal argument for condition 'empty'</li> <li>Condition 'wand' can now have an option '</li> <li>Implementing 1.15 support for Events and Conditions</li> <li>New Chat event, that write chat messages for a player</li> <li>Added 'pickup' objective</li> <li>Added stopnpc event, that will stop the movenpc event</li> <li>Added teleportnpc event, that will stop the movenpc event and teleport the npc to a given location</li> <li>Added option check_interval for holograms in custom.yml and added GlobalVariable support</li> <li>Added deletepoint event to delete player points</li> <li>Added mythicmobdistance condition that will check if a specific MythicMobs entity is near the player</li> <li>Added level argument to 'experience' objective and condition</li> <li>Added prefix argument in password objective</li> <li>Added level argument to 'experience' objective and condition</li> <li>Added prefix argument in password objective</li> <li>Added fail argument in password objective</li> <li>Added notify option to point event</li> <li>Added an interceptor that does not intercept: 'none'</li> <li>Added ConditionVariable. It returns true or false based on whether a player meets a condition.</li> <li>Improved bStats</li> <li>Added login objective</li> <li>Added period argument to folder event</li> <li>Added variable support to the Notify system</li> <li>Added variable support to the PickRandomEvent</li> <li>Added \"acceptNPCLeftClick: true / false\" config option</li> <li>Added optional \"minlevel\" and \"maxlevel\" arguments to mmobkill objective</li> <li>Added new options 'inside/outside' for npcrange objective, support for multiple npcs and improved performance</li> <li>Added new Event QuestCompassTargetChangeEvent that is triggered when a new CompassTarget is set. It is also possible   to cancel it</li> <li>added multi language support for Notify system</li> <li>Added 'notifyall' event to broadcast a notification</li> <li>Added new notification IO 'sound'</li> <li>Added 'jump' objective</li> <li>Added left, amount and total properties to player kill objective</li> <li>Added 'neutralMobDeathAllPlayers' argument to the <code>mmobkill</code> objective</li> <li>Added custom model data support for items</li> <li>Added new config option 'npcInteractionLimit' default 500 that limits the click on an NPC to every x milliseconds</li> <li>Added PlayerHider to hide specific players for specified players</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#changed_2","text":"<ul> <li>devbuilds always show notifications for new devbuilds, even when the user is not on a _DEV strategy</li> <li>Items for HolographicDisplays are now defines in items.yml</li> <li>Command 'bq rename' can now be used for globalpoints</li> <li>The old updater was replaced with a new one</li> <li>AchievementCondition is replaced with AdvancementCondition</li> <li>Renamed objective Potion to Brew</li> <li>Renamed 'monsters' condition to 'entities'</li> <li>Renamed 'xp' event to 'experience'</li> <li>new config option mysql.enabled<ul> <li>if you already have an installation, you can add this manually to get rid of the mysql warning during startup</li> </ul> </li> <li>events in conversation options are now executed before npc or player responses are printed</li> <li>message event now ignores chat interceptors during conversation</li> <li>tame objective now works with all tamable mobs, including possible future ones</li> <li>improved chestput waring for locations without a chest</li> <li>reworked location variable: %location.(xyz|x|y|z|yaw|pitch|world|ulfShort|ulfLong)(.NUMBER)%</li> <li>multiple conditions and objectives now use the block selector. The same applies for the setblock event.</li> <li>static events now allow comma separated event list</li> <li>changed the <code>npc_effects</code> behavior to be package wide instead of global if no NPC is defined in the custom.yml</li> <li>EventHandlers in general updated to ignore cancelled events</li> <li>improved performance for condition checks (Bug where it took seconds to check for conditions)</li> <li>improved performance for conversation checks (Bug where it took seconds to check for conversation options)</li> <li>The plugin will no longer be loaded before the worlds are loaded</li> <li>Citizens Holograms are now more robust on reload and reload faster</li> <li>Added player death/respawn behavior to Region Objective and improved performance</li> <li>changed smelting and fish objective from material to BlockSelector</li> </ul>","title":"Changed"},{"location":"Documentation/CHANGELOG/#deprecated_2","text":"<ul> <li>Marked message event for removal in BQ 2.0</li> <li>Marked playsound event for removal in BQ 2.0</li> <li>Marked title event for removal in BQ 2.0</li> </ul>","title":"Deprecated"},{"location":"Documentation/CHANGELOG/#removed_2","text":"<ul> <li>Removed Deprecated Exceptions</li> <li>Removed RacesAndClasses support</li> <li>Removed LegendQuest support</li> <li>Removed BoutifulAPI support</li> <li>Removed the CLAY NPC</li> <li>removed legacy material support</li> <li>removed BetonLangAPI support</li> <li>removed PlayerPoints support(this can still be used via Vault)</li> </ul>","title":"Removed"},{"location":"Documentation/CHANGELOG/#fixes_1","text":"<ul> <li>event priority for block objective</li> <li>linebreaks in strings</li> <li>notify:1 for block objective did not work</li> <li>asynchronous database access for objectives</li> <li>Renaming an NPC will not cause an NPE for a NPC Hologram</li> <li>Objective 'craft' now supports shift-clicking</li> <li>Fixed generation of default package</li> <li>fixed line breaks</li> <li>fixed events notify interval of 1</li> <li>fixed potion/brew objective notify</li> <li>fixed the bug and removed its workaround when chest converationIO has no available start points</li> <li>fixed journal line breaking</li> <li>fixed movement of movenpc event</li> <li>fixed npcmove event</li> <li>fixed a bug, where a player causes an exception when he spams right left clicks in menu conversationIO</li> <li>fixed outdated Brewery dependency</li> <li>fixed message duplication when using the packet interceptor</li> <li>fixed Journal interaction with Lectern</li> <li>fixed QuestItems ignoring durability</li> <li>fixed QuestItem interaction with Lectern, Campfire and Composter</li> <li>update journal after closing magic inventory</li> <li>fixed lever event not toggling the lever</li> <li>fixed ConcurrentModificationException in PlayerData</li> <li>fixed issue where the PacketInterceptor prints the message tag in the chat</li> <li>fixed database backups breaking with some languages</li> <li>fixed when PlaceholderAPI variables contains dots</li> <li>fixed quester name not support &amp; as color code</li> <li>fixed Region Objective listen to player teleport event</li> <li>packet Interceptor stops 1 second AFTER the end of the conversation to allow slow messages to still have its chat   protection</li> <li>fixed notify couldn't use variables that contain <code>:</code></li> <li>improved stability for brew objective when other plugins affect brewing</li> <li>fixed region and npcregion condition</li> <li>fixed debugging does not start on server startup</li> <li>fixed ghost holograms caused by reloading BQ</li> <li>fixed deadlock(Server crash) in Conversations with a large amount of npc and player options with a large amount of   conditions</li> <li>fixed door event not working correctly</li> <li>fixed <code>1 give</code> command exceptions</li> </ul>","title":"Fixes"},{"location":"Documentation/CHANGELOG/#security_2","text":"<ul> <li>fixed issue, where objectives that count things are out of sync with the database. This has also affected BungeeCord   support</li> </ul>","title":"Security"},{"location":"Documentation/CHANGELOG/#1110-2020-01-02","text":"","title":"[1.11.0] - 2020-01-02"},{"location":"Documentation/CHANGELOG/#added_3","text":"<ul> <li>Support Minecraft 1.8 - 1.13.2+</li> <li>New Block Selector to select blocks by material and attributes. Can use wildcards as well.</li> <li>New 'mooncycle' condition - Determine what phase the moon is in</li> <li>Chest ConversationIO can now be configured to show NPC text per option.</li> <li>New 'extends' keyword in conversation to allow inheritance</li> <li>New 'conversation' condition that will return true if there is at least 1 conversation option available to an NPC</li> <li>New 'nujobs_canlevel' condition - True if player can level in Jobs Reborn</li> <li>New 'nujobs_hasjob' condition - True if player has job in Jobs Reborn</li> <li>New 'nujobs_jobfull' condition - True if a job is full in Jobs Reborn</li> <li>New 'nujobs_joblevel' condition - True if player has level in Jobs Reborn</li> <li>New 'nujobs_addexp' event - Add experience to player in Jobs Reborn</li> <li>New 'nujobs_addlevel' event - Add a level to player in Jobs Reborn</li> <li>New 'nujobs_dellevel' event - Remove a level from player in Jobs Reborn</li> <li>New 'nujobs_joinjob' event - Joins a player to a job in Jobs Reborn</li> <li>New 'nujobs_leavejob' event - Leaves a job in Jobs Reborn</li> <li>New 'nujobs_setlevel' event - Set a player's level in Jobs Reborn</li> <li>New 'nujobs_joinjob' objective - Triggers when player joins job in Jobs Reborn</li> <li>New 'nujobs_leavejob' objective - Triggers when a player leaves job in Jobs Reborn</li> <li>New 'nujobs_levelup' objective - Triggers when a player levels up in Jobs Reborn</li> <li>New 'nujobs_payment' objective - Triggers when a player receives money from Jobs Reborn</li> <li>New Notification System</li> <li>New 'notify' event - Create custom notifications on the ActionBar, BossBar, Title, Subtitle and Achievement</li> <li>New 'menu' conversation IO - Requires ProtocolLib. See: https://www.youtube.com/watch?v=Qtn7Dpdf4jw&amp;lc</li> <li>New 'packet' chat interceptor - Requires ProtocolLib.</li> <li>new '/q debug' command - Enable or disable the debug mode</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#changes","text":"<ul> <li>Event 'effect' can have 'ambient', 'hidden' and 'noicon' parameters</li> <li>Event 'effect' has '--ambient' parameter deprecated with a non fatal warning.</li> <li>Priority for 'journal_main_page' entries not unique anymore, it only orders the entries. Same priority sort it   alphabetic</li> <li>Objective 'interact' can have 'loc', 'range' parameters</li> <li>Objective 'region' can optionally have 'entry' and/or 'exit' to only trigger when entering or exiting named region</li> <li>The old 'Debug' class was replaced by a more useful and powerful 'LogUtils' class</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#fixed_1","text":"<ul> <li>Resolve variables in journal pages.</li> <li>WATER and LAVA can be specified in Action Objective</li> <li>Journals without dates now don't leave blank lines</li> <li>Journal separator can be disabled or customized</li> <li>NPCs now spawn correct, if they have a npc_hologram</li> <li>fixed NPE when no journal entry exists</li> <li>The default package is now compatible with all versions</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#110-2019-09-16","text":"<ul> <li>Development versions can be full of bugs. If you find any, please report them on GitHub Issues.</li> <li>This version is only compatible to Shopkeepers v2.2.0 and above</li> </ul>","title":"[1.10] - 2019-09-16"},{"location":"Documentation/CHANGELOG/#added_4","text":"<ul> <li>npc holograms above the head that follow the npc (requires HolographicDisplays)</li> <li>New 'facing' condition - check if player is facing a direction</li> <li>New 'looking' condition - check if player looks at a block</li> <li>New 'deleffect' event - delete potion effects of a player</li> <li>New '%citizen%' variable - display a npcs name or coordinates (requires Citizens)</li> <li>New 'npcrange' objective - player has to go towards a npc (requires Citizens)</li> <li>New 'npcdistance' condition - check if a player is close to a npc (requires Citizens)</li> <li>New 'npclocation' condition - check if a npc is at a location (requires Citizens)</li> <li>New 'npcregion' condition - check if a npc is inside a region (requires Citizens &amp; WorldGuard)</li> <li>New 'killmob' event - remove the mobs that you spawned with 'spawn' event</li> <li>New '/q version' command - get the version used</li> <li>New 'partialdate' condition - check if the date matches a pattern</li> <li>New 'dayofweek' condition - check if its weekend or monday</li> <li>New 'realtime' condition - check if its a specific time</li> <li>New 'xp' event - give a player xp.</li> <li>Global objecties (objectives that are active for all players directly after start)</li> <li>Global tags and points (tags ad points that are not set for one specific player)</li> <li>New 'globaltag' event</li> <li>New 'globaltag' condition</li> <li>New 'globalpoint' event</li> <li>New 'globalpoint' condition</li> <li>New 'opsudo' event - Sudo commands with op permissions</li> <li>Brewery integration ('drunk', 'drunkquality' and 'hasbrew'conditions, 'givebrew' and 'takebrew' events)</li> <li>New 'title' event - display titles without the whole command hassle</li> <li>New 'playsound' event - plays a sound</li> <li>New 'fly' condition - check if the player is flying with Elytra</li> <li>New 'biome' condition - check the player's current biome</li> <li>New 'interact' objective - interact with an entity</li> <li>Conversations can individually override conversation IO type</li> <li>NPCs can be individually hidden from players if ProtocolLib is installed</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#changes_1","text":"<ul> <li>'compass' event can now directly set a players compass</li> <li>holograms from HolographicDisplays now can display items</li> <li>'movenpc' event now allows multiple locations to create a path</li> <li>'enchant' objective now allows multiple enchantments</li> <li>'particle' event can now create client side only particles</li> <li>'chest' converstionIO now dosn't display messages to chat for the old behaviour use 'combined'</li> <li>'money' event can now notify you about how much you recieved</li> <li>'mmobkill' objective now allows multiple mobs</li> <li>Translation system is integrated with BetonLangAPI</li> <li>NPC heads in \"chest\" conversation IO will display correct Citizens skin</li> <li>NPC particles (EffectLib integration) can be displayed to individual players</li> <li>Condition command allows checking static conditions</li> <li>'testforblock' condition can now check for specific data value</li> <li>'delay' objective and 'folder' event accept more time units</li> <li>'password' objective also accepts commands</li> <li>Commands can be tab-completed</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#fixed_2","text":"<ul> <li>Fixed bug where players could take out items from the chest conversationIO</li> <li>Removed possibilities of dropping/transfering quest items and the journal</li> <li>Lots of smaller bugfixes</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#196-2017-11-27","text":"","title":"[1.9.6] - 2017-11-27"},{"location":"Documentation/CHANGELOG/#fixed_3","text":"<ul> <li>Update version to 1.9.6</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#195-2017-11-27","text":"","title":"[1.9.5] - 2017-11-27"},{"location":"Documentation/CHANGELOG/#fixed_4","text":"<ul> <li>Fixed global locations loading before the worlds</li> <li>Fixed loading order of Citizens/EffectLib integration</li> <li>Fixed restarting of persistent objectives not working correctly</li> <li>Fixed \"unbreakable\" tag not being read from items</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#194-2017-11-02","text":"","title":"[1.9.4] - 2017-11-02"},{"location":"Documentation/CHANGELOG/#fixed_5","text":"<ul> <li>Fixed broken integration loading</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#193-2017-11-01","text":"","title":"[1.9.3] - 2017-11-01"},{"location":"Documentation/CHANGELOG/#fixed_6","text":"<ul> <li>NPC and mob kills will be correctly registered when killed by indirect means</li> <li>Replaced error with a nice message when config updating fails to start</li> <li>Unbreakable items are no longer breakable in newer Spigot releases</li> <li>Moved compatibility hooks to the first server tick to hook into lazy plugins</li> <li>Colors of text in \"chest\" conversations are now correctly applied over text breaks</li> <li>Added a nice message when conversation option is missing \"text\"</li> <li>Fixed a rare crash when NPC was stopped and its target was outside of loaded chunks</li> <li>Fixed checking item amounts in the backpack</li> <li>Allowed negative data in items for compatibility with dark magics</li> <li>Removed Denizen script checking, since it didn't work sometimes</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#192-2017-07-09","text":"","title":"[1.9.2] - 2017-07-09"},{"location":"Documentation/CHANGELOG/#fixed_7","text":"<ul> <li>Conversations won't allow taking items from GUI windows</li> <li>When using wrong 'point' or 'item' variable there will be a nice error message</li> <li>NPCs can be safely despawned while in the middle of a conversation</li> <li>Error on '/q reload' when NPC particles are disabled is now gone</li> <li>Items for compass buttons are now correctly loaded</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#changes_2","text":"<ul> <li>These events are now correctly persistent: clear, explosion, lightning, setblock, spawn</li> <li>BetonQuest is using bStats instead of McStats</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#191-2017-04-18","text":"","title":"[1.9.1] - 2017-04-18"},{"location":"Documentation/CHANGELOG/#fixed_8","text":"<ul> <li>Holograms are now correctly loaded</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#19-2017-04-03","text":"<p>Notes: - This version breaks compatibility with plugins hooking into BetonQuest. I'm sorry for that. Ask devs to update these   plugins. - The error reporting feature was improved. If you see a lot of error messages when reloading the plugin (not stack   traces, just regular, human-readable messages), it's probably because there are real problems in your quests. - BetonQuest won't accept \".yml\" extensions at the end of conversation names in \"main.yml\". If your conversations aren't   working (the plugin says they don't exist), check if you have these extensions IN THE \"MAIN.YML\" file and remove them.</p>","title":"[1.9] - 2017-04-03"},{"location":"Documentation/CHANGELOG/#fixed_9","text":"<ul> <li>'action' objective now detects fire interaction</li> <li>'empty' condition now skips armor and off-hand slots</li> <li>Items can be used cross-package</li> <li>New sound names are now used by default</li> <li>Fixed doubled quest items when dropping them is blocked by another plugin</li> <li>Lore and name now appear on heads and written books with custom data</li> <li>Fix error when trying to add air (empty hand) with \"/q item\" command</li> <li>Main page now can exceed a single page in the journal</li> <li>The plugin will reconnect to the database if something goes wrong</li> <li>Fishing objective now only accepts stuff from water</li> <li>Properties in 'mobkill' objective (left and amount) has switched places</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#changes_3","text":"<ul> <li>Complete rewrite of item conditioning - read the docs to discover new features (previous syntax is still working   without any behavior changes)</li> <li>Books in items.yml now automatically wrap pages, like the journal and main page</li> <li>Main page and entries in the journal can manually split pages with '|' character</li> <li>New lines in conversations can be made with \"\\n\"</li> <li>Interval in 'delay' objective is now configurable</li> <li>'craft' and 'potion' objectives now use items defined in items.yml file</li> <li>Potion items are now defined with 'type:' argument instead of data value</li> <li>You can now use spaces between \"first\" options in conversations</li> <li>Static events can now be fired with \"/q event - eventID\" command</li> <li>Locations can have vectors defined directly in instruction strings</li> <li>Locations can be variables which resolve to location format</li> <li>Point condition can now check exact point amount with 'equal' argument</li> <li>In 'chest' conversation IO items can be specified with durability values after a colon</li> <li>Mobs spawned with 'spawn' event can have armor, items in hands and custom drops</li> <li>Unbreakability of quest items can be disabled (if you want to use \"unbreakable\" tag instead)</li> <li>Ranges in locations are now a separate argument (\"10;20;30;world;4\" is now \"10;20;30;world 4\")</li> <li>\"main.yml\" is now the only required file in the package. Empty files can be deleted</li> <li>Custom settings (i.e. EffectLib particle effects) are moved from \"main.yml\" to \"custom.yml\"</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#added_5","text":"<ul> <li>Compatibility with Shopkeepers ('shopkeeper' event, 'shopamount' condition)</li> <li>Compatibility with PlaceholderAPI ('ph' variable and 'betonquest' placeholder)</li> <li>Compatibility with HolographicDisplays (holograms visible based on conditions)</li> <li>Compatibility with RacesAndClasses (race, class, exp, level, mana conditions/events/variables)</li> <li>Compatibility with LegendQuest (race, class, attribute, karma conditions/variables)</li> <li>Compatibility with WorldEdit ('paste' a schematic event)</li> <li>New condition 'riding' - check if the player is riding an entity</li> <li>New condition 'world' - check the world in which the player is</li> <li>New condition 'gamemode' - check player's game mode</li> <li>New condition 'achievement' - check if the player has an achievement</li> <li>New condition 'variable' - check if a variable matches a pattern</li> <li>New event 'lever' - switches a lever</li> <li>New event 'door' - opens/closes doors, trapdoors and gates</li> <li>New event 'if' - run one of two events, depending on condition</li> <li>New event 'movenpc' - move Citizens NPC to a location</li> <li>New event 'variable' - set a variable in \"variable\" objective</li> <li>New objective 'vehicle' - entering a vehicle entity</li> <li>New objective 'variable' - lets players define their own variables for you to use</li> <li>New objective 'kill' - kill players who meet specified conditions</li> <li>New objective 'breed' - breed animals (only 1.10.2+)</li> <li>New variable '%location%' - resolves to player's location</li> <li>Keyword \"unbreakable\" can be used in items to make them unbreakable</li> <li>When a conversation option is selected, a Bukkit event is called (for developers)</li> <li>Chat can be paused while in conversation, it will display when finished</li> <li>Objectives can be completed for players with \"/q objective player complete\"</li> <li>Option 'full_main_page' controls if the main page is a separate page in the journal</li> <li>Mobs spawned with 'spawn' can be \"marked\"; you can require marked mobs in 'mobkill' objective</li> <li>Firework support in items</li> <li>Relative package paths, where '_' means \"one package up\"</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#185-2016-05-14","text":"","title":"[1.8.5] - 2016-05-14"},{"location":"Documentation/CHANGELOG/#fixed_10","text":"<ul> <li>Objectives are now correctly deleted with \"objective delete\" event and do notreappear after \"/q reload\".</li> <li>Objectives are no longer duplicated in the database when using \"/q reload\".</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#184-2016-05-06","text":"","title":"[1.8.4] - 2016-05-06"},{"location":"Documentation/CHANGELOG/#fixed_11","text":"<ul> <li>Conversations are no longer started twice</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#183-2016-05-06","text":"","title":"[1.8.3] - 2016-05-06"},{"location":"Documentation/CHANGELOG/#fixed_12","text":"<ul> <li>Events are no longer run in async thread when completing \"password\" objective</li> <li>Replaced stacktrace with error message when objective is incorrect in \"objective\" event</li> <li>Made color codes work with \"one_entry_per_page\" setting enabled</li> <li>Fixed a bug where taken backpack items were not removed from the database</li> <li>Quest items can now be equipped</li> <li>\"die\" objective now correctly handles damage done to the player</li> <li>Fixed error when conversation is started without any possible options</li> <li>Fixed error when killing NPCs with equipment</li> <li>Fixed problems with relogging while in conversations with \"stop\" option enabled</li> <li>Fixed error when loading corrupted item from the database</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#changes_4","text":"<ul> <li>Updater is now based on GitHub Releases, no longer downloads major updates automatically, it is more configurable and   can also download development versions with \"/q update --dev\"</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#added_6","text":"<ul> <li>Added console message about the cause of \"/q give\" errors (tells you what is wrong with item instruction string)</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#182-2016-02-18","text":"","title":"[1.8.2] - 2016-02-18"},{"location":"Documentation/CHANGELOG/#fixed_13","text":"<ul> <li>Fixed NPE when killing a mob without any \"mobkill\" objectives</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#181-2016-02-18","text":"","title":"[1.8.1] - 2016-02-18"},{"location":"Documentation/CHANGELOG/#fixed_14","text":"<ul> <li>Removing journal entries from the database now works correctly</li> <li>MobKill objective now correctly handles kills</li> <li>Nested package names are now correctly resolved</li> <li>The formatting at the end of every main page line is reset</li> <li>Fixed Apache dependency problem</li> <li>Material name is no longer displayed in \"chest\" GUI conversations</li> <li>Fixed \"notify\" option in give/take events</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#18-2016-02-13","text":"<p>Notes: - As always in big updates, compatibility with plugins hooking into BetonQuest is broken. You need to check if   everything is working.</p>","title":"[1.8] - 2016-02-13"},{"location":"Documentation/CHANGELOG/#fixed_15","text":"<ul> <li>Die objective now reacts to death caused by other plugins</li> <li>Static events now are started correctly</li> <li>Static events now are canceled correctly</li> <li>Action objective now correctly checks locations</li> <li>Combat tag is removed after death</li> <li>Block, Craft and MythicMobs MobKill objectives now correctly save data</li> <li>Take event now correctly takes items from inventory, armor slots and backpack</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#added_7","text":"<ul> <li>New variable system in conversations (check out the documentation)</li> <li>More options for journal, including one entry per page and removing date</li> <li>Compatibility with mcMMO (level condition and experience event)</li> <li>Compatibility with EffectLib ('particle' event, NPC particles)</li> <li>Compatibility with PlayerPoints (points event and condition)</li> <li>Compatibility with Heroes (class and skill condition, experience event, Heroes kills in 'mobkill' objective)</li> <li>Compatibility with Magic ('wand' condition)</li> <li>Compatibility with Denizen (running task scripts with 'script' event)</li> <li>Compatibility with SkillAPI (class and level condition)</li> <li>Compatibility with Quests (checking for done quests, starting them, custom event reward, custom condition requirement)</li> <li>Optional prefix for conversations (contributed by Jack McKalling)</li> <li>Optional material for buttons in \"chest\" conversation IO</li> <li>Configurable main page in the journal</li> <li>New argument in objectives: \"persistent\" - makes them repeat after completing</li> <li>New condition 'check' - allows for specifying multiple instructions in one</li> <li>New condition 'objective' - checks if the player has an active objective</li> <li>New condition 'score' - check scores on scoreboards</li> <li>New condition 'chestitem' - checks if a chest contains items</li> <li>New event 'run' - allows for specifying multiple instructions in one</li> <li>New event 'givejournal' - gives journal to the player</li> <li>New event 'sudo' - forces the player to run a command</li> <li>New event 'compass' - point player's compass to a location</li> <li>New event 'cancel' - cancels a quest (as in main.yml)</li> <li>New event 'score' - modify scores on scoreboards</li> <li>New events 'chestgive', 'chesttake' and 'chestclear' - put and remove items in chests</li> <li>New objective 'logout' - the player needs to leave the server</li> <li>New objective 'password' - the player needs to type the password in the chat</li> <li>New objective 'fish' - catching fish</li> <li>New objective 'enchant' - enchanting an item</li> <li>New objective 'shear' - shearing a sheep</li> <li>New objective 'chestput' - putting items in a chest</li> <li>New objective 'potion' - brewing a potion</li> <li>New commands: /cancelquest and /compass - directly open backpack sub-pages</li> <li>New subcommand '/q delete' - delete all specific tags/points/objectives/entries</li> <li>New subcommand '/q rename' - rename all specific tags/points/objectives/entries</li> <li>New subcommand '/q give' - gives you an item from items.yml</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#changes_5","text":"<ul> <li>Administrative messages are now English-only in new installations</li> <li>Journal event can remove entries from the journal</li> <li>In conversations, %quester% variable changed to %npc%</li> <li>In inventory GUI there is NPC's text in every option, for convenience</li> <li>Conversations can point to NPC options in other conversations within the package</li> <li>You can use spaces between events, conditions and pointers in conversations</li> <li>All tags and points are internally associated with a package now</li> <li>Some conditions are now static and persistent (just like events)</li> <li>Point event can now multiply points</li> <li>Vault Money event can now multiply money</li> <li>Journal event can now use \"update\" argument for updating variables on the main page</li> <li>Packages can now be moved to another directories</li> <li>Quest cancelers are now defined in a more convenient way</li> <li>/q command renamed to /betonquest, /j to /journal; previous forms are now aliases</li> <li>Conditions and events in objective instructions (and conditions in event instructions) can now be defined with \"   condition:\" and \"event:\" argument (without \"s\" at the end)</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#176-2015-10-17","text":"","title":"[1.7.6] - 2015-10-17"},{"location":"Documentation/CHANGELOG/#fixed_16","text":"<ul> <li>Conversation can no longer be started multiple times at once if it happens on the same tick</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#added_8","text":"<ul> <li>Dutch translation by Jack McKalling</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#175-2015-09-12","text":"","title":"[1.7.5] - 2015-09-12"},{"location":"Documentation/CHANGELOG/#fixed_17","text":"<ul> <li>Restored compatibility with MythicMobs 2.1.0</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#174-2015-08-29","text":"","title":"[1.7.4] - 2015-08-29"},{"location":"Documentation/CHANGELOG/#fixed_18","text":"<ul> <li>Fixed error when player was quitting with active \"stop\" conversation while he had not changed his language with /ql   command</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#changes_6","text":"<ul> <li>Inventory GUI will close itself if there's nothing left to display</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#173-2015-08-20","text":"","title":"[1.7.3] - 2015-08-20"},{"location":"Documentation/CHANGELOG/#fixed_19","text":"<ul> <li>Combat tagging does not work if the attack has been canceled</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#changes_7","text":"<ul> <li>Options in conversation can also be defined using \"event:\", \"condition:\" and \"pointers:\" argument names (with and   without 's' at the end). \"text:\" argument is unchanged.</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#172-2015-07-27","text":"","title":"[1.7.2] - 2015-07-27"},{"location":"Documentation/CHANGELOG/#fixed_20","text":"<ul> <li>\"mobkill\" objective now displays correct amount of mobs left to kill</li> <li>\"delay\" objective can be set to 0 delay</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#171-2015-07-19","text":"","title":"[1.7.1] - 2015-07-19"},{"location":"Documentation/CHANGELOG/#fixed_21","text":"<ul> <li>Quests are loaded after other plugins register their types</li> <li>Journal condition correctly resolves package names</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#changes_8","text":"<ul> <li>Updated French translation</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#17-2015-07-17","text":"<p>Notes: - BetonQuest no longer supports servers without UUID handling - There were a lot of changes since previous version, check carefully if everything is working - Compatibility with plugins hooking INTO BetonQuest is broken, they need to update</p>","title":"[1.7] - 2015-07-17"},{"location":"Documentation/CHANGELOG/#fixed_22","text":"<ul> <li>Objectives no longer mysteriously double events</li> <li>Greatly improved performance in almost every aspect</li> <li>Finally fixed issues with special characters on some servers</li> <li>Fixed database saving/loading issues</li> <li>Fixed player options in conversations being white on next lines when using tellraw</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#added_9","text":"<ul> <li>Quest canceling system</li> <li>New inventory GUI for conversations</li> <li>Added the \"random\" parameter in \"folder\" event - choose randomly X events to fire</li> <li>Action objective can be \"canceled\" - the click will not do anything</li> <li>Added \"static events\" mechanism for firing events at specified time of the day</li> <li>Optional message when the player is pulled back by stop option</li> <li>Optional message for take and give events</li> <li>Optional message when advancing in \"block\" and \"mobkill\" objectives</li> <li>Variable system for quick changing quest parameters (for example location of a quest)</li> <li>\"/q vector\" command for easy calculating location vector variables</li> <li>New \"empty\" condition - amount of empty inventory slots</li> <li>New \"party\" condition - manages the conditions in the party</li> <li>New \"monsters\" condition - true if there are monsters in the area</li> <li>New \"clear\" event - kills specified monsters in the area</li> <li>New \"region\" objective - reach WorldGuard region</li> <li>Blacklist of commands which cannot be used while in conversation</li> <li>Option to disable compatibility with other plugins</li> <li>Added remove_items_after_respawn option - for servers using keepInventory gamerule</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#changes_9","text":"<ul> <li>The plugin now uses package system: configuration has been moved into \"default\" package</li> <li>Objectives has returned to \"objectives.yml\" - it's improving performance</li> <li>The database is now updated in real time</li> <li>All quests can (but don't have to) be translated into multiple languages</li> <li>Players can change their language with /questlang command</li> <li>Conversations with stop option are resumed when the player logs out and in again</li> <li>Metrics are now toggled in PluginMetrics/config.yml</li> <li>All conditions, events, objectives, conversations etc. are loaded when the plugin starts/reloads</li> <li>Citizens NPC will stop when talked to</li> <li>Quest blocks cannot be placed, quest items will not break</li> <li>Conversations cannot be started while in combat</li> <li>Cannot fight while in conversation</li> <li>Tellraw conversations no longer spam the console</li> <li>Mobs can be spawned with a name (spawnmob event, \"name:\" argument)</li> <li>/q command is now more beautiful</li> <li>Removed unnecessary argument prefixes from conditions and events</li> <li>Removed \"tag:\" from objective instruction strings</li> <li>Conversations no longer need those empty lines everywhere ('')</li> <li>Dependencies updated: WorldGuard/WorldEdit 6.1, MythicMobs 2.0.4</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#162-2015-04-10","text":"<ul> <li>Fixed errors on data loading when MySQL is being used.</li> <li>Changes messages system to use simple file as default. If you want to use advanced translation just rename \"   advanced-messages.yml\" to \"messages.yml\".</li> </ul>","title":"[1.6.2] - 2015-04-10"},{"location":"Documentation/CHANGELOG/#161-2015-03-26","text":"<ul> <li>Fixed errors on updating journals when using MySQL.</li> </ul>","title":"[1.6.1] - 2015-03-26"},{"location":"Documentation/CHANGELOG/#16-2015-03-16","text":"<p>Notes: - There is a bug/feature in 1.8 which adds '\u00a70' at the end of every line in books generated by plugins. This breaks the   conditions/events based on books with more than one line of text. The detailed instruction on how to work it around is   in \"Other important stuff\" chapter, in the part about items.</p>","title":"[1.6] - 2015-03-16"},{"location":"Documentation/CHANGELOG/#fixed_23","text":"<ul> <li>Items given by event that don't fit in the inventory will now drop instead of being deleted This does not apply to   quest items, they will be added to backpack</li> <li>Events fired from conversations won't throw async errors</li> <li>Conversation can be started after plugin's reload without relogging</li> <li>/q reload no longer lags the server</li> <li>Corrected description in /q command</li> <li>Added input validation for global locations - if event is incorrect it will display an error instead of breaking the   whole functionality</li> <li>The plugin should run fine on machines not supporting some special characters</li> <li>Inverted item condition now behave correctly</li> <li>Time condition now checks time correctly</li> </ul>","title":"Fixed"},{"location":"Documentation/CHANGELOG/#added_10","text":"<ul> <li>Added backpack for storing quest items, which cannot be dropped in any way</li> <li>Added database backups</li> <li>Added prefix for the database. New installations will use \"betonquest_\" prefix for tables, existing configuration will   use empty prefix to maintain compatibility with other programs</li> <li>Players can chat while in conversations by prefixing their messages with '#' character</li> <li>New \"random\" condition - true with specified probability</li> <li>New \"sneak\" condition - true if player is sneaking</li> <li>New \"journal\" condition - true if player has journal entry</li> <li>New \"testforblock\" condition - true if block at given location matches given material</li> <li>New \"arrow\" objective - completed when arrow hits the specified target</li> <li>New \"experience\" objective - completed when player reaches certain level</li> <li>New \"npcinteract\" objective - completed when player right-clicks Citizens NPC</li> <li>New \"damage\" event - damages the player</li> <li>Skript support (event, effect and condition)</li> <li>WorldGuard support (region condition)</li> <li>Errors are logged to the \"error.log\" file in \"logs\" directory</li> <li>Debug option in config.yml for logging plugin's activity to \"debug.log\" file</li> <li>New commands for opening backpack: b, bb, backpack, bbackpack or betonbackpack</li> <li>Items are now aware of leather armor color, head owner and enchantments in books</li> </ul>","title":"Added"},{"location":"Documentation/CHANGELOG/#changes_10","text":"<ul> <li>Added and changed a lot of subcommands in /q command:<ul> <li>event and condition can be run for every online player</li> <li>tag, point, objective and (new) journal can edit every (even offline) player</li> <li>config (new) can set configuration files from command line</li> <li>backup (new) backups the whole configuration and database</li> </ul> </li> <li>Folder event now runs these events even after the player logs out: command, tag, objective, delete, point, setblock</li> <li>Changed /j command to open the backpack instead of just giving the journal</li> <li>Tellraw clicking on options in conversation now ignores old (used) options</li> <li>Using color codes in journal entries is now possible</li> <li>Give/take events and item condition can now check for multiple items with syntax 'give stick:2,stone:4,sword'</li> <li>Give/take events and item/hand conditions can now check for items only without enchantments/effects/name/lore etc.</li> <li>Inverting condition is now done by prefixing their name with \"!\" (in the place where you use them, like conversation,   not in conditions.yml)</li> <li>Configuration updater is no longer based on plugin's version</li> <li>Backup files are now kept in \"backups\" directory, old ones are moved to it</li> <li>Changed internal structure of the code (may matter to developers - QuestEvent, Condition and Objective classes has   been moved from \"core\" package to \"api\", update your imports)</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#154-2015-03-12","text":"<ul> <li>This version is almost the same as 1.5.3. The only difference is that it can load database backups created by 1.6   version. When updating to 1.6, the database format will change, so it won't be possible to go back, unless by loading   the backup using this version of the plugin.</li> </ul>","title":"[1.5.4] - 2015-03-12"},{"location":"Documentation/CHANGELOG/#153-2014-12-26","text":"<ul> <li>Small fix of /q purge command not working on offline players.</li> </ul>","title":"[1.5.3] - 2014-12-26"},{"location":"Documentation/CHANGELOG/#152-2014-12-23","text":"<ul> <li>Fixed errors that were spamming the console when a player with active Location objective was teleporting to other   worlds.</li> </ul>","title":"[1.5.2] - 2014-12-23"},{"location":"Documentation/CHANGELOG/#151-2014-12-22","text":"","title":"[1.5.1] - 2014-12-22"},{"location":"Documentation/CHANGELOG/#changes_11","text":"<ul> <li>Multiple tags in one event are now possible</li> <li>Change /q event command to run from console</li> <li>Add color codes to item's name and lore</li> <li>Fix \"stop\" option in conversations not working</li> <li>Fix NPE on unknown answer in conversations</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#15-2014-12-21","text":"","title":"[1.5] - 2014-12-21"},{"location":"Documentation/CHANGELOG/#changes_12","text":"<ul> <li>Added support for MythicMobs and Vault (see wiki for more info)</li> <li>AutoUpdater is now enabled by default! If you want you can change this and reload the plugin, nothing will be   downloaded in that case</li> <li>Books saving format has changed. All books were automatically converted, but you need to check them if everything   looks like it's supposed to.</li> <li>Command event accepts multiple commands separated by \"|\", eg. \"command say beton|say quest\"</li> <li>Event command now accepts optional  argument at the end; this will fire event for  player. eg. \"/q event   wood_reward Steve\" <li>Journal title and lore can now use colors (&amp;4 etc.) and journal is colorful; options in config.yml</li> <li>Added aliases for /q command: bq, bquest, bquests, betonquest, betonquests, quest, quests</li> <li>Added aliases for /j command: bj, journal, bjournal, betonjournal</li> <li>Objectives are now defined directly in event instruction, not in objectives.yml (which was deleted, if you want to   restore something check the backup)</li> <li>Replies in conversations are now optionally clickable (tellraw option in config.yml)</li> <li>Added permission for starting a conversation: betonquest.conversation</li> <li>Conversation starting/ending, updating journal, plugin's update and full inventory can now make sounds; you can find a   list of possible values here: jd.bukkit.org/rb/apidocs/org/bukkit/Sound.html</li> <li>Conditions for events are now defined as 'event_conditions:' instead of simply 'conditions:'. This is to distinguish   conditions for objectives and for events, as both of them can exist in one instruction</li> <li>Updater is now run when disabling the plugin (it does matter if your server restarts every night)   Notes:</li> <li>All Objective events has been converted to new format. The objectives.yml file has been deleted, so if it contained   any objectives that weren't covered by an event they may seem lost. However there is a backup file and you can easily   extract everything from it. Please refer to the wiki to learn how objectives are now defined or just study converted   ones (it's pretty straightforward).</li> <li>AutoUpdater is now enabled by default. Every future update will be working exactly like before, all changes will be   automatically updated by a converter, there is always a backup and you are informed about all changes in this file. So   it's pretty safe to say that keeping this plugin up to date won't give you any trouble. If you don't want to have   latest fixes and features you can disable updating but this will make the developer sad.</li> <li>Because of changes in how books behave since 1.8 you may experience some strange bugs with saving books to items.yml.   Generally you should open a book before saving it using /q item command. And don't start or end your books with \"   character, as it's part of a workaround of this bug/feature.</li>","title":"Changes"},{"location":"Documentation/CHANGELOG/#143-2014-12-15","text":"<ul> <li>Removed debug messages from ActionObjective. You could have told me, any of you guys...</li> </ul>","title":"[1.4.3] - 2014-12-15"},{"location":"Documentation/CHANGELOG/#142-2014-12-09","text":"<ul> <li>Really fixed an updater.</li> </ul>","title":"[1.4.2] - 2014-12-09"},{"location":"Documentation/CHANGELOG/#141-2014-12-09","text":"<ul> <li>Fixed few bugs in Action objective.</li> <li>Fixed updater, hopefully.</li> </ul>","title":"[1.4.1] - 2014-12-09"},{"location":"Documentation/CHANGELOG/#14-2014-12-07","text":"","title":"[1.4] - 2014-12-07"},{"location":"Documentation/CHANGELOG/#changes_13","text":"<ul> <li>Conversations are now divided into multiple files in \"conversations\" directory</li> <li>Items are now saved to items.yml file and referenced by \"take\", \"give\", \"item\" and \"hand\" events/conditions</li> <li>Added /q item  command which saves currently held item to the config as specified itemID <li>Added location to Action objective, which checks the location of the block (unlike location condition which checks   location of the player)</li> <li>Added /q event  command which fires specified event <li>Fixed multiple bugs with conversation starting and ending</li> <li>Block NPCs can now be used with Citizens enabled</li> <li>Added NPCKill objective for killing NPCs</li> <li>Added SetBlock event for setting a block at specified location</li> <li>Improved Material matching in configs</li> <li>Modified Action objective for greater flexibility:<ul> <li>It is now possible to detect clicking in air</li> <li>It is no longer possible to detect clicking on any block (as this accepts clicking on air)</li> <li>Can be used to detect book reading (with help of updated Hand condition)</li> </ul> </li> <li>Added AutoUpdater; it's disabled by default Notes:</li> <li>Conversion of configuration should have been done automatically, you don't have to worry about anything. If something   went wrong you can revert changes from generated backup file, which contains all your previous configs.</li> <li>You can enable AutoUpdater by setting \"autoupdate\" to true in config.yml. It is completely safe because all next   versions will generate backups and convert all files automatically. You will be notified on joining the server about   new changelog file.</li> <li>Please refer to the wiki for changes in formatting instruction strings for various   things: https://github.com/Co0sh/BetonQuest/wiki</li> <li>You probably should also change names of converted items to something else than \"item12\". But that works too of   course.</li>","title":"Changes"},{"location":"Documentation/CHANGELOG/#13-2014-11-30","text":"","title":"[1.3] - 2014-11-30"},{"location":"Documentation/CHANGELOG/#changes_14","text":"<ul> <li>UUID support (optional)</li> <li>NPCs made from a clay block, head and sign, for servers without Citizens2 plugin</li> <li>Global, long and persistent delay for events (as an objective)</li> <li>Folder event for multiple events, with optional short delay</li> <li>French translation (thanks to fastlockel)</li> <li>If you want to convert names to UUIDs run the plugin once and then change in the config \"uuid: false\" to true. Do not   touch the \"convert: true\" option unless you want your database wiped! Conversion will happen on next plugin reload (   eg. /q reload). This is not revertable!</li> <li>Remember to backup your config files before updating! It shouldn't destroy anything but you never know.</li> </ul>","title":"Changes"},{"location":"Documentation/CHANGELOG/#12-2014-11-23","text":"<ul> <li>Global locations now automatically run only once, no need for blocking it with tags and conditions. They use however   tags that follow the syntax \"global_\", where  is global location objective tag. <li>Added optional respawn location for cancelled death objective, just add \"respawn:100.5;200;300.5;world;90;0\" to   instruction string.</li> <li>Added German translation, thanks to coalaa!</li> <li>Added optional movement blocking while in conversation, just add option \"stop: true\" or \"stop: false\" in every   conversation.</li> <li>Changed priority of conversation chat event to lowest, should work even for muted players.</li> <li>Fixed data values in block objective.</li> <li>Added metrics, you can disable them by setting \"metrics: false\" in config.yml</li> <li>Added support for SQLite, plugin will use it when connecting to MySQL fails.</li> <li>Fixed death objective not working every time and not removing all effects.</li>","title":"[1.2] - 2014-11-23"},{"location":"Documentation/CHANGELOG/#11-2014-11-08","text":"<ul> <li>Fixed many bugs including but not limited to:<ul> <li>negated conjunction condition</li> <li>unnecessary debug messages</li> <li>not working global locations</li> </ul> </li> <li>Replaced config examples with default quest</li> <li>Leaving data values in item's definition will make plugin ignore data value in most cases</li> <li>Improved journal to stop text leaks</li> <li>Item names now replace _ with spaces</li> </ul>","title":"[1.1] - 2014-11-08"},{"location":"Documentation/CHANGELOG/#10-2014-11-06","text":"<ul> <li>Initial release</li> </ul>","title":"[1.0] - 2014-11-06"},{"location":"Documentation/Commands-and-permissions/","text":"","title":"Commands and permissions"},{"location":"Documentation/Commands-and-permissions/#commands","text":"<ul> <li>/j - gives the journal</li> <li>/backpack - opens the backpack</li> <li>/q - lists all available admin commands</li> <li>/q reload - reloads the plugin</li> <li>/q objectives {playerName} [list/add/del/complete] [instruction] - shows player's currently active objectives</li> <li>/q tags {playerName} [list/add/del] [tag] - lists all player's tags</li> <li>/q globaltags {playerName} [list/add/del] [tag] - lists all global tags</li> <li>/q points {playerName} [list/add/del] [category] [amount] - lists all player's points in all categories</li> <li>/q globalpoints {playerName} [list/add/del] [category] [amount]</li> <li>/q journal {playerName} [list/add/del] [package.pointer] [date]</li> <li>/q event {playerName} {package.eventID} - fires an event for the player</li> <li>/q condition {playerName} {package.conditionID} - shows if the player meet specified condition or not</li> <li>/q item {package.itemID} - creates an item based on what you're holding in hand</li> <li>/q give {package.itemID} - gives you an item defined in the configuration</li> <li>/q purge {playerName} - deletes all player's data from the database</li> <li>/q rename {tag/point/globalpoint/objective/entry} {oldName} {newName} - renames all specified things in the database</li> <li>/q delete {tag/point/objective/entry} {name} - deletes all specified things in the database</li> <li>/q backup - creates a backup of configuration files and database</li> <li>/q update - updates the plugin to the newest version.</li> <li>/q version: displays the versions of BetonQuest, the server and all hooked plugins</li> <li>/q debug [true/false/ingame]: enable debug mode and write all down in a log file or disable the debug mode</li> <li>/q download {gitHubNamespace} {ref} {type} {sourcePath} [targetPath] [recursive] [overwrite]: download   quests and templates from a github repository</li> <li>/questlang {lang} - changes the language for the player (and globally if used from console). <code>default</code> language   will use the language defined in config.yml.</li> </ul>","title":"Commands"},{"location":"Documentation/Commands-and-permissions/#aliases","text":"<ul> <li>/j: bj, journal, bjournal, betonjournal, betonquestjournal</li> <li>/backpack: b, bb, bbackpack, betonbackpack, betonquestbackpack</li> <li>/q: bq, bquest, bquests, betonquest, betonquests, quest, quests<ul> <li>objective: o, objectives</li> <li>tag: t, tags</li> <li>point: p, points</li> <li>event: e, events</li> <li>condition: c, conditions</li> <li>journal: j, journals</li> <li>item: i, items</li> <li>give: g</li> <li>rename: r</li> <li>delete: d, del</li> <li>create: package</li> </ul> </li> <li>/questlang: ql</li> </ul>","title":"Aliases"},{"location":"Documentation/Commands-and-permissions/#permissions","text":"<ul> <li>betonquest.admin - allows using admin commands (/q ...) and creating an NPC from blocks</li> <li>betonquest.journal - allows using /j command (default for players)</li> <li>betonquest.backpack - allows using /backpack command (default for players)</li> <li>betonquest.conversation - allows talking with NPCs (default for players)</li> <li>betonquest.language - allows changing the language (default for players)</li> </ul>  <p>Warning</p> <p>Don't give betonquest.admin permission to people you don't fully trust. They can use /q config command to add a <code>command</code> event, and this way execute any command as the console. This might be dangerous.</p>","title":"Permissions"},{"location":"Documentation/Commands-and-permissions/#main-command-details","text":"<p>Reloading loads all data from configuration, but not everything is updated. Player's data isn't touched to avoid lags made by database saving. The database is also the same, you will have to reload/restart the whole server for the database to change.</p> <p>Tags subcommand allows you to easily list and modify tags. '<code>/q tags Beton</code>' would list tags for player Beton. '<code>/q tags Beton add test</code>' would add \"test\" tag for that player, and '<code>/q tags Beton del test</code>' would remove it.</p> <p>Points subcommand is similar - listing points is done the same way. Adding points to a category looks like that: '<code>/q points Beton add reputation 20</code>' (adding 20 points to \"reputation\" category). You can also subtract points with negative amounts. Removing the whole point category can be achieved by '<code>/q points Beton del reputation</code>'.</p> <p>Journal subcommand works in the same way as those two above. Adding and removing looks like <code>/q journal Beton add quest.wood_started</code> (or <code>del</code>), and you can also specify the date of entry when adding it, by appending date written like this: <code>23.04.2014_16:52</code> at the end of the command. Note that there is <code>_</code> character instead of space!</p> <p>Objective subcommand allows you to list all active objectives (shown as their labels) of the player. It can also directly add or cancel objectives using instruction strings. You can also complete the objective for the player using <code>complete</code> argument - it will run all events and remove the objective.</p> <p>Running events for online players can be done with event argument: '<code>/q event Beton quest.give_emeralds</code>' would run <code>give_emeralds</code> for player Beton (if he's online) from the package <code>quest</code>. If you want to run a static event, replace player's name with <code>-</code>.</p> <p>There is also condition argument for checking conditions, for example '<code>/q condition Beton has_food</code>'. Events and conditions need to be defined in their files, this command doesn't accept raw instructions. If you want to check a static condition replace the player's name with <code>-</code>.</p> <p>If you need to create for example \"Nettlebane\" quest item, just hold it in your hand and type '<code>/q item nettlebane</code>'. It will copy the item you're holding into the items.yml file and save it there with the name you specified (in this case \"nettlebane\"). You can skip the package name here as well.</p> <p>The '<code>/q give package.item</code>' command will simply give you specified item.</p> <p>Config subcommand is used to modify or display values in configuration files. <code>set</code> option replaces the value with what you typed, <code>add</code> simply adds your string to the existing value. (Note on spaces: by default the plugin won't insert a space between existing and added value. You can however achieve that by prefixing the string with <code>_</code> character. For example: existing string is <code>objective location</code>, and you want to add <code>100;200;300;world;10</code>. Your command will look like <code>/q config add default.events.loc_obj _100;200;300;world;10</code>). <code>read</code> option allows you to display config value without modifying it.</p> <p>Path in this command is like an address of the value. Next branches are separated by dots. For example language setting in main configuration has path <code>config.language</code>, and a text in \"bye\" player option in the conversation <code>innkeeper</code> in a package named <code>example</code> quest has path <code>example.conversations.innkeeper.player_options.bye.text</code></p> <p>You can purge specific player with '<code>/q purge Beton</code>' command, where Beton is the name of the player. To purge the entire database at once simply change the prefix in config.yml or delete database.db file.</p> <p>Delete command ('<code>/q delete</code>') allows you to delete from the database every tag, point, objective or journal entry with specified name.</p> <p>Rename command ('<code>/q rename</code>') allows you to rename every tag, point, globalpoint, objective or journal entry in the database. In case of an objective it will also rename the objective in objectives section in the configuration file, so it continues to work correctly.</p> <p>If you want to backup your configuration and database make sure that your server is empty (this process requires all data to be saved to database -&gt; all players offline) and run '<code>/q backup</code>' command. You will get a zip file containing all your data, ready to be unzipped for restoring the plugin.</p> <p>Update command ('<code>/q update</code>') will try to download the newest version of the plugin and save it to the update folder. This folder is then handled by Spigot to update the plugin. If you accidentally use this command but do not wish to update the plugin, you should remove <code>BetonQuest.jar</code> file from the <code>plugins/update</code> folder before restarting/reloading the server.</p> <p>The <code>/q vector</code> command allows you to create vector variables from the specified in first argument location variable to your position. The result will be saved to the \"vectors.{second argument}\" variable.</p> <p>The debug command ('<code>/q debug</code>') allows you to enable or disable the debug mode. If the debug mode is enabled after server startup ('<code>/q debug true</code>'), all log entries from the configured log history time frame are written to the <code>/plugins/BetonQuest/logs/latest.log</code> file as history and writing will be continued until the debug mode is disabled using ('<code>/q debug false</code>'). The <code>latest.log</code> is renamed to the current date and time on server startup. It's useful if you search for more information about an issue and can help developers to fix bugs.</p> <p>The command ('<code>/q debug ingame</code>') allows you to manage your ingame debugging. The ingame debugging sends you live information about quests to your chat. Running the command without any argument shows your active filters. If you don't have any filters active you will see all console output from <code>/q reload</code>. If you have filters active you only see information from the selected packages. Appending a package name activates the filter for that package. You can also use <code>*</code> / <code>MyFolder-*</code> instead of a package name to address all packages / all packages of a folder. Appending a level allows you to select which types of messages are displayed. The default level <code>error</code> shows all <code>WARNINGS</code> and <code>ERRORS</code> from the log. If you want to see more information use the levels <code>info</code> or <code>debug</code>. Beware though, the debug level might be spammy.</p> <p>The download command (<code>/q download</code>) can be used to download tutorial quests &amp; quest templates from the Quest-Tutorials repository. For example <code>/q download BetonQuest/Quest-Tutorials main QuestPackages /default</code> will download the <code>default</code> tutorial quest and place it in the same folder. The first argument (<code>gitHubNamespace</code>) is the github repository in the format user/repo or organisation/repo. Before you can download from a repo you need to add the namespace to the <code>repo_whitelist</code> in the BetonQuest config. This is a security measure that prevents users from screwing up all your quests or downloading malicious files if they get the permission to run this command by accident. The second argument (<code>ref</code>) is either a branch name or a git reference to a specific commit that should be downloaded. So for a branch (eg. <code>main</code>) both <code>main</code> and <code>refs/heads/main</code> works. For a tag it is <code>refs/tags/tagname</code>. Pull request references ( eg. <code>refs/pull/1731/head</code>) are also possible but must be enabled in the config. Keep in mind that anyone can open a pullrequest so use this very carefully. Third argument (<code>type</code>) is either <code>QuestPackages</code> or <code>QuestTemplates</code> depending on what type you want to download. As 4th argument (<code>sourcePath</code>) you define what folders to download from the repo. It is appended to the type to get the full Path in the repo. Optionally you may add a 5th parameter: <code>targetPath</code> is where in your BetonQuest folder the files shall be put, relative to either the QuestPackages or QuestTemplates folder defined as <code>type</code>. If you want to place some QuestTemplates inside <code>QuestPackages</code> you can do this by adding <code>../QuestTemplates/</code> to the beginning of the target path. Additionally you can add tags to the end of the command to control behavior of the downloader: If <code>recursive</code> is added nested packages or templates will be downloaded while by default they will be skipped. The tag <code>overwrite</code> defines that already existing files may be overwritten. By default, an error is logged and the download is stopped.</p>","title":"Main command details"},{"location":"Documentation/Compatibility/","text":"<p>In total 32 plugins have dedicated support for BetonQuest.</p> <p>BetonQuest hooks into other plugins by itself to provide more events, conditions and objectives or other features.  25 plugins are supported right now:   AureliumSkills, Brewery, Citizens, Denizen, EffectLib, Heroes, HolographicDisplays, JobsReborn, LuckPerms, Magic, mcMMO, MythicLib, MMOCore, MMOItems, MythicMobs, PlaceholderAPI, ProtocolLib, Quests, Shopkeepers, ProSkillAPI, Skript, Vault, WorldEdit, FastAsyncWorldEdit and WorldGuard.</p> <p>Some plugins also hook into BetonQuest and provide support by themselves: nuNPCDestinations, CalebCompass, NotQuests, HonnyCompass MythicDungeons</p> <p>There are also plugins that hook into BetonQuest that require a clientside mod: BetonQuestGUI, NGVexJournal</p>","title":"Compatibility"},{"location":"Documentation/Compatibility/#aureliumskills","text":"","title":"AureliumSkills"},{"location":"Documentation/Compatibility/#conditions","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#skill-level-aureliumskillslevel","text":"<p>Checks if the player has the specified skill level. The amount can be a variable or a number. The player needs to be on that level or higher to meet the condition. You can disable this behaviour by adding the <code>equal</code> argument, then the player must match the specified level exactly. <pre><code>aureliumskillslevel fighting 5\naureliumskillslevel farming 10 equal\n</code></pre></p>","title":"Skill level: <code>aureliumskillslevel</code>"},{"location":"Documentation/Compatibility/#stat-level-aureliumstatslevel","text":"<p>Checks if the player has the specified stat level. The amount can be a variable or a number. The player needs to be on that level or higher to meet the condition. You can disable this behaviour by adding the <code>equal</code> argument, then the player must match the specified level exactly. <pre><code>aureliumstatslevel luck 5\naureliumstatslevel luck 10 equal\n</code></pre></p>","title":"Stat level: <code>aureliumstatslevel</code>"},{"location":"Documentation/Compatibility/#events","text":"","title":"Events"},{"location":"Documentation/Compatibility/#give-skill-xp-aureliumskillsxp","text":"<p>Adds experience to the players skill. The amount can be a variable or a number. The <code>level</code> argument is optional and would convert the amount to levels instead of XP points. <pre><code>aureliumskillsxp farming 5\naureliumskillsxp farming 10 level\n</code></pre></p>","title":"Give Skill Xp : <code>aureliumskillsxp</code>"},{"location":"Documentation/Compatibility/#brewery","text":"","title":"Brewery"},{"location":"Documentation/Compatibility/#conditions_1","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#drunk-drunk","text":"<p>This condition is true if the player is drunken. Only argument is the minimal drunkness (0-100).</p> <pre><code>drunk 50\n</code></pre>","title":"Drunk: <code>drunk</code>"},{"location":"Documentation/Compatibility/#drunk-quality-drunkquality","text":"<p>This condition is true if the player has the given drunk quality. Only argument is the minimal drunk quality (1-10).</p> <pre><code>drunkquality 3\n</code></pre>","title":"Drunk Quality: <code>drunkquality</code>"},{"location":"Documentation/Compatibility/#has-brew-hasbrew","text":"<p>This condition is true if the player has the given brew with the specified amount in his inventory.</p> <pre><code>hasbrew 2 MY_BREW\n</code></pre>","title":"Has Brew: <code>hasbrew</code>"},{"location":"Documentation/Compatibility/#events_1","text":"","title":"Events"},{"location":"Documentation/Compatibility/#give-brew-givebrew","text":"<p>Gives the player the specified drink. The first number is the amount, and the second number is the quality of the drink.</p> <pre><code>givebrew 1 10 MY_BREW\n</code></pre>","title":"Give Brew: <code>givebrew</code>"},{"location":"Documentation/Compatibility/#take-brew-takebrew","text":"<p>Removes the specified drink from the players inventory. An amount needs to be specified.</p> <pre><code>takebrew 2 MY_OTHER_BREW \n</code></pre>","title":"Take Brew: <code>takebrew</code>"},{"location":"Documentation/Compatibility/#npcs-using-citizens","text":"<p>If you have this plugin you can use it's NPCs for conversations. I highly recommend you installing it, it's NPCs are way more immersive. Having Citizens also allows you to use NPCKill objective and to have moving NPC's.</p> <p>A Citizen NPC will only react to right clicks by default. This can be changed by  setting <code>acceptNPCLeftClick</code> in the config.yml to <code>true</code>.</p>  <p>Notice</p> <p>You need to specify the ID of the NPC instead of it's name in the package.yml when using Citizens!</p>","title":"NPC's using Citizens"},{"location":"Documentation/Compatibility/#conditions_2","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#npc-distance-npcdistance","text":"<p>This condition will return true if the player is closer to the NPC with the given ID than the given distance.  The NPCs ID is the first argument, the distance is the second. If the npc is despawned the condition will return false.</p>  <p>Example</p> <pre><code>npcdistance 16 22\n</code></pre>","title":"NPC distance: <code>npcdistance</code>"},{"location":"Documentation/Compatibility/#npc-location-npclocation","text":"<p>persistent, static</p> <p>This condition will return true if a npc is close to a location. First argument is the id of the NPC, second the location and third the maximum distance to the location that the npc is allowed to have.</p>  <p>Example</p> <pre><code>npclocation 16 4.0;14.0;-20.0;world 22\n</code></pre>","title":"NPC location: <code>npclocation</code>"},{"location":"Documentation/Compatibility/#npc-region-npcregion","text":"<p>persistent, static</p>  <p>Notice</p> <p>This condition also requires WorldGuard to work.</p>  <p>This condition will return true if a npc is inside a region. First argument is the id of the npc second is the name of the region.</p>  <p>Example</p> <pre><code>npcregion 16 spawn\n</code></pre>","title":"NPC region: <code>npcregion</code>"},{"location":"Documentation/Compatibility/#events_2","text":"","title":"Events"},{"location":"Documentation/Compatibility/#move-npc-movenpc","text":"<p>This event will make the NPC move to a specified location. It will not return on its own, so you have to set a single path point with /npc path command - it will then return to that point every time. If you make it move too far away, it will teleport or break, so beware. You can change maximum pathfinding range in Citizens configuration files. The first argument in this event is ID of the NPC to move. Second one is a location in a standard format (like in <code>teleport</code> event). You can also specify multiple locations separated by colons to let the npc follow a path of locations. You can also specify additional arguments: <code>block</code> will block the NPC so you won't be able to start a conversation with him while he is moving, <code>wait:</code> is a number of tick the NPC will wait at its destination before firing events, <code>done:</code> is a list of events fired after reaching the destination, <code>fail:</code> is a list of events fired if this event fails. Move event can fail if the NPC is already moving for another player.</p>  <p>Example</p> <pre><code>movenpc 121 100;200;300;world,105;200;280;world block wait:20 done:msg_were_here,give_reward fail:msg_cant_go,give_reward\n</code></pre>","title":"Move NPC: <code>movenpc</code>"},{"location":"Documentation/Compatibility/#stop-moving-npc-stopnpc","text":"<p>This will stop all current move tasks for the npc with the given ID.</p>  <p>Example</p> <pre><code>stopnpc 16\n</code></pre>","title":"Stop moving NPC: <code>stopnpc</code>"},{"location":"Documentation/Compatibility/#teleport-npc-teleportnpc","text":"<p>This event will teleport the NPC with the given ID to the given location.</p>  <p>Example</p> <pre><code>teleportnpc 53 100;200;300;world\n</code></pre>","title":"Teleport NPC: <code>teleportnpc</code>"},{"location":"Documentation/Compatibility/#objectives","text":"","title":"Objectives"},{"location":"Documentation/Compatibility/#npc-interact-npcinteract","text":"<p>The player has to right-click on the NPC with specified ID. It can also optionally cancel the action, so the conversation won't start. The first argument is number (ID of the NPC), and the second is optional <code>cancel</code>.</p>  <p>Example</p> <pre><code>npcinteract 3 cancel conditions:sneak events:steal\n</code></pre>","title":"NPC Interact: <code>npcinteract</code>"},{"location":"Documentation/Compatibility/#npc-kill-npckill","text":"<p>The NPC kill objective requires the player to kill a NPC with the given ID. You can also define how many times the NPC has to be killed. Right after the objective's name there must be the ID of the NPC. You can also add an amount with the <code>amount</code> keyword. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of NPCs already killed, <code>left</code> is the amount of NPCs still needed to kill and <code>total</code> is the amount of NPCs initially required.</p>  <p>Example</p> <pre><code>npckill 16 amount:3 events:reward notify\n</code></pre>","title":"NPC Kill: <code>npckill</code>"},{"location":"Documentation/Compatibility/#npc-range-npcrange","text":"<p>The player has to enter/leave a circle with the given radius around the NPC to complete this objective. It is also possible to define multiple NPCs separated with <code>,</code>. The objective will be completed as soon as you meet the requirement of just one npc. First argument is the ID of the NPC, second one is the type: Either <code>enter</code>, <code>leave</code>, <code>inside</code> or <code>outside</code> and the third one is the range. The types <code>enter</code>, <code>leave</code> force the player to actually enter the radius after you were outside of it and vice versa. This means that <code>enter</code> is not completed when the player gets the objective and is already in the range, while <code>inside</code> is instantly completed.</p>  <p>Example</p> <pre><code>npcrange 3,5 enter 20 events:master_inRange\n</code></pre>","title":"NPC Range: <code>npcrange</code>"},{"location":"Documentation/Compatibility/#denizen","text":"","title":"Denizen"},{"location":"Documentation/Compatibility/#events_3","text":"","title":"Events"},{"location":"Documentation/Compatibility/#script-script","text":"<p>With this event you can fire Denizen task scripts. Don't confuse it with <code>skript</code> event, these are different. The first and only argument is the name of the script.</p>  <p>Example</p> <pre><code>script beton\n</code></pre>","title":"Script: <code>script</code>"},{"location":"Documentation/Compatibility/#effectlib","text":"<p>If you install this plugin on your server you will be able to set a particle effect on NPCs with conversations and use <code>particle</code> event.</p> <p>EffectLib is not a normal plugin, it's a developer tool - there are no official docs. However, the Magic plugin has a wiki for EffectLib. It does contain a few magic specific settings though so please don't be confused if some stuff does not work. There is also a magic editor with autocompletion for EffectLib.</p> <p>You can control the behaviour of particles around the NPCs in the <code>npc_effects</code> section. Each effect is defined as a separate subsection and consists of EffectLib options (described on the EffectLib page) and several BetonQuest settings. <code>npcs</code> is a list of all NPCs on which this effect can be displayed. If no <code>npcs</code> are specified it will use the package NPCs from package.yml. <code>conditions</code> is a list of conditions the player has to meet in order to see the effect. BetonQuest will find the first effect which can be displayed and show it to the player. <code>interval</code> controls how often the effect is displayed (in ticks). The effect will be fired from the exact location of the NPC, upwards.</p> <pre><code>npc_effects:\n   check_interval: 50\n   disabled: false\n   farmer:\n      class: VortexEffect\n      iterations: 20\n      particle: crit_magic\n      helixes: 3\n      circles: 1\n      grow: 0.1\n      radius: 0.5\n      interval: 30\n      npcs:\n         - 1\n      conditions:\n         - '!con_tag_started'\n         - '!con_tag_finished'\n</code></pre>","title":"EffectLib"},{"location":"Documentation/Compatibility/#events_4","text":"","title":"Events"},{"location":"Documentation/Compatibility/#particle-particle","text":"<p>This event will load an effect defined in <code>effects</code> section and display it on player's location. The only argument is the name of the effect. You can optionally add <code>loc:</code> argument followed by a location written like <code>100;200;300;world;180;-90</code> to put it on that location. If you add <code>private</code> argument the effect will only be displayed to the player for which you ran the event.</p>  <p>Example</p> <p><pre><code>effects:\n  beton:\n    class: HelixEffect\n    iterations: 100\n    particle: smoke\n    helixes: 5\n    circles: 20\n    grow: 3\n    radius: 30\n</code></pre> <pre><code>events:\n  playEffect: particle beton loc:100;200;300;world;180;-90 private\n</code></pre></p>","title":"Particle: <code>particle</code>"},{"location":"Documentation/Compatibility/#heroes","text":"<p>When you install Heroes, all kills done via this plugin's skills will be counted in MobKill objectives.</p>","title":"Heroes"},{"location":"Documentation/Compatibility/#conditions_3","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#heroes-class-heroesclass","text":"<p>This condition checks the classes of the player. The first argument must be <code>primary</code>, <code>secondary</code> or <code>mastered</code>. Second is the name of a class or <code>any</code>. You can optionally specify <code>level:</code> argument followed by the required level of the player.</p>  <p>Example</p> <pre><code>heroesclass mastered warrior\n</code></pre>","title":"Heroes Class: <code>heroesclass</code>"},{"location":"Documentation/Compatibility/#heroes-attribute-heroesattribute","text":"<p>This condition check's the level of a player's attribute. The first argument must be <code>strength</code>, <code>constitution</code>, <code>endurance</code>, <code>dexterity</code>, <code>intellect</code>, <code>wisdom</code>, or <code>charisma</code>. Second argument is the required level of the attribute. Must be greater than or equal the specified number.</p>  <p>Example</p> <pre><code>heroesattribute strength 5\n</code></pre>","title":"Heroes Attribute: <code>heroesattribute</code>"},{"location":"Documentation/Compatibility/#skill-heroesskill","text":"<p>This condition checks if the player can use specified skill. The first argument is the name of the skill.</p>  <p>Example</p> <pre><code>heroesskill charge\n</code></pre>","title":"Skill: <code>heroesskill</code>"},{"location":"Documentation/Compatibility/#events_5","text":"","title":"Events"},{"location":"Documentation/Compatibility/#heroes-experience-heroesexp","text":"<p>This event simply gives the player specified amount of Heroes experience. The first argument is either <code>primary</code> or <code>secondary</code> and it means player's class. Second one is the amount of experience to add.</p>  <p>Example</p> <pre><code>heroesexp primary 1000\n</code></pre>","title":"Heroes experience: <code>heroesexp</code>"},{"location":"Documentation/Compatibility/#holographicdisplays","text":"","title":"HolographicDisplays"},{"location":"Documentation/Compatibility/#hidden-holograms","text":"<p>Installing this plugin will enable you to create hidden holograms, which will be shown to players only if they meet specified conditions. Note that you need to have ProtocolLib installed in order to hide holograms from certain players.</p> <p>In order to create a hologram, you have to add a <code>holograms</code> section. Add a node named as your hologram to this section and define <code>lines</code>, <code>conditions</code> and <code>location</code> subnodes. The first one should be a list of texts - these will be the lines of a hologram. Color codes are supported. Second is a list of conditions separated by commas. Third is a location in a standard format, like in <code>teleport</code> event. An example of such hologram definition:</p> <pre><code>holograms:\n  beton:\n    lines:\n    - 'item:custom_item'\n    - '&amp;2Top questers this month'\n    - 'top:completed_quests;desc;10;&amp;a;\u00a76;2;&amp;6'\n    - '&amp;2Your amount: &amp;6{bq:azerothquests:point.completed_quests.amount}'\n    - '&amp;Total amount: &amp;6{bqg:azerothquests:globalpoint.total_completed_quests.amount}'\n    conditions: has_some_quest, !finished_some_quest    \n    location: 100;200;300;world\n    # How often to check conditions (optional)\n    check_interval: 20\n</code></pre> <p>A line can also represent a floating item. To do so enter the line as 'item:<code>custom_item</code>'. It will be replaced with the <code>custom_item</code> defined in the <code>items</code> section. If the Item is defined for example as map, a floating map will be seen between two lines of text.</p> <p>Holograms created by BetonQuest can rank users by the score of a point. Such scoreboards (not to be confused with the Minecraft vanilla scoreboard) are configured as one line and replaced by multiple lines according to the limit definition. Each scoreboard line comes in the format <code>#. name - score</code> The short syntax is 'top:<code>point</code>;<code>order</code>;<code>limit</code>'. The specified <code>point</code> must be located inside the package the hologram is declared in. To use a point from another package, put <code>package.point</code> instead. The <code>order</code> is either 'desc' for descending or 'asc' for ascending. If something other is specified, descending will be used by default. The limit should be a positive number. In the short declaration, the whole line will be white. To color each of the four elements of a line (place, name, dash and score), the definition syntax can be extended to 'top:<code>point</code>;<code>order</code>;<code>limit</code>;<code>c1</code>;<code>c2</code>;<code>c3</code>;<code>c4</code>'. The color codes can be prefixed with either <code>\u00a7</code> or <code>&amp;</code>, but do not have to be. If for example <code>c2</code> is left blank (two following semicolons), it is treated as an 'f' (color code for white).</p> <p>Each BetonQuest variable can be displayed on a hologram in a text line. However, the syntax differs slightly since this uses a HolographicDisplays utility. The syntax is '{bq:<code>package</code>:<code>variable</code>}'. The package name cannot be left empty. The <code>variable</code> uses the same definition syntax as in conversations. Variables are displayed for each player individually.</p>  <p>Potential lags</p> <p>The HolographicDisplays documentations warns against using too many individual hologram variables since they are rendered for each player individually. To save resources, there is a variable without individual rendering. To use it replace 'bq' with 'bqg'. However, this means that only player-unrelated variables such as <code>globalpoint</code> and <code>globaltag</code> can be used. Using them with player specific variables will not necessarily throw errors but can produce weird results.</p>  <p>The holograms are updated every 10 seconds. If you want to make it faster, add <code>hologram_update_interval</code> option in config.yml file and set it to a number of ticks you want to pass between updates (one second is 20 ticks). Don't set it to 0 or negative numbers, it will result in an error.</p>","title":"Hidden Holograms"},{"location":"Documentation/Compatibility/#npc-holograms","text":"<p>If Citizens is also installed then you can have holograms configured relative to an npc. Add the following:</p> <pre><code>npc_holograms:\n  # How often to check conditions\n  check_interval: 100\n\n  # Holograms follow npcs when they move (higher cpu usage when true)\n  follow: false\n\n  # Disable npc_holograms\n  disabled: false\n\n  # Hologram Settings\n  default:\n    # Lines in hologram\n    lines:\n      - \"Some text!\"\n    # Vector offset to NPC position to place hologram\n    vector: 0;3;0\n\n    # Conditions to display hologram\n    conditions: has_some_quest, !finished_some_quest\n\n    # NPC's to apply these settings to. If blank, applies by default\n    npcs:\n      - 0\n      - 22\n</code></pre> <p>Item lines are also supported here.</p>","title":"NPC Holograms"},{"location":"Documentation/Compatibility/#jobsreborn","text":"<p>Requires adding the following to config.yml: <pre><code>hook:\n  jobs: 'true'\n</code></pre></p>","title":"JobsReborn"},{"location":"Documentation/Compatibility/#conditions_4","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#can-level-up-nujobs_canlevel-jobname","text":"<p>Returns true if the player can level up</p>","title":"Can Level up: <code>nujobs_canlevel {jobname}</code>"},{"location":"Documentation/Compatibility/#has-job-nujobs_hasjob-jobname","text":"<p>Returns true if the player has this job</p>  <p>Example</p> <pre><code>nujobs_hasjob Woodcutter\n</code></pre>","title":"Has Job: <code>nujobs_hasjob {jobname}</code>"},{"location":"Documentation/Compatibility/#job-full-nujobs_jobfull-jobname","text":"<p>Returns true if the job is at the maximum slots</p>","title":"Job Full: <code>nujobs_jobfull {jobname}</code>"},{"location":"Documentation/Compatibility/#job-level-nujobs_joblevel-jobname-min-max","text":"<p>Returns true if the player has this job, and at a level equal to or between the min/max</p>  <p>Example</p> <pre><code>nujobs_joblevel Woodcutter 5 10\n</code></pre>","title":"Job Level: <code>nujobs_joblevel {jobname} {min} {max}</code>"},{"location":"Documentation/Compatibility/#events_6","text":"","title":"Events"},{"location":"Documentation/Compatibility/#add-jobs-experience-nujobs_addexp-jobname-exp","text":"<p>Gives the player experience</p>","title":"Add Jobs Experience: <code>nujobs_addexp {jobname} {exp}</code>"},{"location":"Documentation/Compatibility/#increase-jobs-level-nujobs_addlevel-jobname-amount","text":"<p>Increases the player level by amount.</p>","title":"Increase Jobs Level: <code>nujobs_addlevel {jobname} {amount}</code>"},{"location":"Documentation/Compatibility/#decrease-jobs-level-nujobs_dellevel-jobname-amount","text":"<p>Decreases the players level by amount.</p>","title":"Decrease Jobs Level: <code>nujobs_dellevel {jobname} {amount}</code>"},{"location":"Documentation/Compatibility/#join-jobs-job-event-nujobs_joinjob-jobname","text":"<p>Joins the player to job.</p>","title":"Join Jobs Job Event: <code>nujobs_joinjob {jobname}</code>"},{"location":"Documentation/Compatibility/#leave-jobs-job-event-nujobs_leavejob-jobname","text":"<p>Removes the player from job.</p>","title":"Leave Jobs Job Event: <code>nujobs_leavejob {jobname}</code>"},{"location":"Documentation/Compatibility/#set-jobs-level-nujobs_setlevel-jobname-level","text":"<p>Set the player to level.</p>","title":"Set Jobs Level: <code>nujobs_setlevel {jobname} {level}</code>"},{"location":"Documentation/Compatibility/#objectives_1","text":"","title":"Objectives"},{"location":"Documentation/Compatibility/#join-jobs-job-objective-nujobs_joinjob-jobname","text":"<p>Triggers when player joins job.</p>","title":"Join Jobs Job Objective: <code>nujobs_joinjob {jobname}</code>"},{"location":"Documentation/Compatibility/#leave-jobs-job-objective-nujobs_leavejob-jobname","text":"<p>Triggers when player leaves job.</p>  <p>Notice</p> <p>This is not triggered by '/jobs leaveall'</p>","title":"Leave Jobs Job Objective: <code>nujobs_leavejob {jobname}</code>"},{"location":"Documentation/Compatibility/#jobs-job-levelup-nujobs_levelup-jobname","text":"<p>Triggers when player levels up.</p>","title":"Jobs Job Levelup: <code>nujobs_levelup {jobname}</code>"},{"location":"Documentation/Compatibility/#jobs-job-payment-nujobs_payment-amount","text":"<p>Triggers when player makes {amount} of money from jobs. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of money already received, <code>left</code> is the amount of money still needed to receive and <code>total</code> is the amount of money initially required.</p>","title":"Jobs Job Payment: <code>nujobs_payment {amount}</code>"},{"location":"Documentation/Compatibility/#luckperms","text":"","title":"LuckPerms"},{"location":"Documentation/Compatibility/#context-integration","text":"<p>Any BetonQuest tag (global and per-player) can be used as a LuckPerms context. This means that a player needs the specified tag for a permission to be true - this removes the need for tons of <code>permission add ...</code> events as you can hook your existing quest progress tags right into LuckPerms permission contexts. The syntax is as follows:</p>    key value     betonquest:tag:PACKAGE_NAME.TAG_NAME true   betonquest:globaltag:PACKAGE_NAME.TAG_NAME true   betonquest:tag:myPackage.tagName true   betonquest:globaltag:myQuest.someTag true    <p>Check the Luck Perms documentation for an in-depth explanation on what contexts are and how to add them to permissions.</p>","title":"Context Integration"},{"location":"Documentation/Compatibility/#magic","text":"","title":"Magic"},{"location":"Documentation/Compatibility/#conditions_5","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#wand-wand","text":"<p>This condition can check wands. The first argument is either <code>hand</code>, <code>inventory</code> or <code>lost</code>. If you choose <code>lost</code>, the condition will check if the player has lost a wand. If you choose <code>hand</code>, the condition will check if you're holding a wand in your hand. <code>inventory</code> will check your whole inventory instead of just the hand. In case of <code>hand</code> and <code>inventory</code> arguments you can also add optional <code>name:</code> argument followed by the name of the wand (as defined in wands.yml in Magic plugin) to check if it's the specific type of the wand. In the case of <code>inventory</code> you can specify an amount with <code>amount</code> and this will only return true if a player has that amount. You can also use optional <code>spells:</code> argument, followed by a list of spells separated with a comma. Each spell in this list must have a minimal level defined after a colon.</p>  <p>Example</p> <pre><code>wand hand name:master spells:flare:3,missile:2\n</code></pre>","title":"Wand: <code>wand</code>"},{"location":"Documentation/Compatibility/#mcmmo","text":"","title":"McMMO"},{"location":"Documentation/Compatibility/#conditions_6","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#mcmmo-level-mcmmolevel","text":"<p>This conditions checks if the player has high enough level in the specified skill. The first argument is the name of the skill, second one is the minimum level the player needs to have to pass this condition.</p>  <p>Example</p> <pre><code>mcmmolevel woodcutting 50\n</code></pre>","title":"McMMO Level: <code>mcmmolevel</code>"},{"location":"Documentation/Compatibility/#events_7","text":"","title":"Events"},{"location":"Documentation/Compatibility/#add-mcmmo-experience-mcmmoexp","text":"<p>This event adds experience points in a specified skill. The first argument is the name of the skill, second one is the amount of experience to add.</p>  <p>Example</p> <pre><code>mcmmoexp swords 1500\n</code></pre>","title":"Add MCMMO Experience: <code>mcmmoexp</code>"},{"location":"Documentation/Compatibility/#teamrequiem-mmocore-mmoitem-mythiclib","text":"","title":"TeamRequiem (MMOCore, MMOItem, MythicLib)"},{"location":"Documentation/Compatibility/#conditions_7","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#mmocore-class-mmoclass","text":"<p>Checks if a player has the given MMOCore class. You can check for any class that is not the default class by writing <code>*</code> instead of a class name. If a level has been specified the player needs to be on that level or higher to meet the condition. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmoclass * 5\nmmoclass WARRIOR\nmmoclass MAGE 5\nmmoclass MAGE 5 equal\n</code></pre></p>","title":"MMOCore class: <code>mmoclass</code>"},{"location":"Documentation/Compatibility/#mmocore-attribute-mmoattribute","text":"<p>Checks if a player has the specified attribute on the given level or higher. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmoclass mmoattribute strength 2 \nmmoclass mmoattribute strength 2 equal\n</code></pre></p>","title":"MMOCore attribute: <code>mmoattribute</code>"},{"location":"Documentation/Compatibility/#mmocore-profession-mmoprofession","text":"<p>Checks if a player has the specified profession on the given level or higher. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmoprofession mining 2 \nmmoprofession mining 2 equal\n</code></pre></p>","title":"MMOCore profession: <code>mmoprofession</code>"},{"location":"Documentation/Compatibility/#mmoitems-item-mmoitem","text":"<p>Checks if a player has the specified amount of MMOItems or more in his inventory. If no amount has been defined the default amount is one. <pre><code>mmoitem ARMOR SKELETON_CROWN\nmmoitem GEMS SPEED_GEM 3\n</code></pre></p>","title":"MMOItems item: <code>mmoitem</code>"},{"location":"Documentation/Compatibility/#mmoitems-hand-mmohand","text":"<p>Checks if a player holds the specified MMOItem in his hand. Checks the main hand if not specified otherwise using the <code>offhand</code> argument. If no amount has been defined the default amount is one. <pre><code>mmohand ARMOR SKELETON_CROWN\nmmohand GEMS SPEED_GEM 3 offhand\n</code></pre></p>","title":"MMOItems hand: <code>mmohand</code>"},{"location":"Documentation/Compatibility/#mythiclib-stat-mmostat","text":"<p>Checks these stats that combine all sorts of stats from MMOCore and MMOItems. The player needs to be on the specified level or higher in order to meet this condition. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmostat DAMAGE_REDUCTION 3\n</code></pre></p>","title":"MythicLib stat: <code>mmostat</code>"},{"location":"Documentation/Compatibility/#objectives_2","text":"","title":"Objectives"},{"location":"Documentation/Compatibility/#break-special-blocks-mmocorebreakblock","text":"<p>This objective requires the player to break  special blocks from MMOCore. All three different block types and an amount can be defined. You can also send notifications to the player by appending the <code>notify</code> keyword optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of blocks already broken, <code>left</code> is the amount of blocks still left to break and <code>total</code> is the amount of blocks initially required.</p> <pre><code>mmocorebreakblock 5 block:1      #A custom block's block ID\nmmocorebreakblock 64 block:STONE  #vanilla material\nmmocorebreakblock 1 block:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVy #... this is a heads texture data\n</code></pre>","title":"Break Special Blocks: <code>mmocorebreakblock</code>"},{"location":"Documentation/Compatibility/#mmocore-profession-levelup-mmoprofessionlevelup","text":"<p>This objective requires the player to level the given profession to the specified level. Use <code>main</code> to check for class level ups.</p> <pre><code>mmoprofessionlevelup MINING 10\n</code></pre>","title":"MMOCore Profession levelup: <code>mmoprofessionlevelup</code>"},{"location":"Documentation/Compatibility/#craft-item-mmoitemcraft","text":"<p>This objective requires the player to craft the item with the given type and id. It supports any MMOItem that was crafted using vanilla crafting methods, MMOItems \"recipe-amounts\" crafting and MMOItems station crafting. An amount can also be set if it shall differ from the default (which is one) by adding the <code>amount:</code> argument. The amount is based on how many items have actually been crafted, not how often a specific recipe has been used! Therefore, a recipe that makes four items at once will let the objective progress by four steps. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of items already crafted, <code>left</code> is the amount of items still needed to craft and <code>total</code> is the amount of items initially required.</p> <pre><code>mmoitemcraft SWORD STEEL_SWORD\nmmoitemcraft HEALTH_POTION_RECIPE amount:5\n</code></pre>","title":"Craft item: <code>mmoitemcraft</code>"},{"location":"Documentation/Compatibility/#upgrade-item-mmoitemupgrade","text":"<p>This objective tracks if a player upgrades the given item with an upgrade consumable. <pre><code>mmoitemupgrade SWORD FALCON_BLADE\n</code></pre></p>","title":"Upgrade Item: <code>mmoitemupgrade</code>"},{"location":"Documentation/Compatibility/#apply-gemstone-mmoitemapplygem","text":"<p>This objective is completed when the player applies the gemstone with the given gemstoneID to an item with the given itemType and itemID. <pre><code>mmoitemapplygem SWORD CUTLASS GEM_OF_ACCURACY\n</code></pre></p>","title":"Apply gemstone: <code>mmoitemapplygem</code>"},{"location":"Documentation/Compatibility/#cast-item-ability-mmoitemcastability","text":"<p>This objective requires the player to cast an ability using an item. The only argument is the abilityID. <pre><code>mmoitemcastability LIFE_ENDER\n</code></pre></p>","title":"Cast item ability: <code>mmoitemcastability</code>"},{"location":"Documentation/Compatibility/#cast-class-skill-mmocorecastskill","text":"<p>This objective requires the player to cast a class skill. The only argument is the abilityID. <pre><code>mmocorecastskill BACKSTAB\n</code></pre></p>","title":"Cast class skill: <code>mmocorecastskill</code>"},{"location":"Documentation/Compatibility/#events_8","text":"","title":"Events"},{"location":"Documentation/Compatibility/#give-mmocore-class-experience-mmoclassexperience","text":"<p>Adds experience to the players class. The amount can be a variable or a number. The <code>level</code> argument is optional and would convert the amount to levels instead of XP points. <pre><code>mmoclassexperience 150\nmmoclassexperience 1 level\n</code></pre></p>","title":"Give MMOCore class experience: <code>mmoclassexperience</code>"},{"location":"Documentation/Compatibility/#give-mmocore-profession-experience-mmoprofessionexperience","text":"<p>Adds experience in the specified player profession. The amount can be a variable or a number. The <code>level</code> argument is optional and would convert the amount to levels instead of XP points. <pre><code>mmoprofessionexperience MINING 100\nmmoprofessionexperience CUSTOM_PROFESSION_NAME 1 level\n</code></pre></p>","title":"Give MMOCore profession experience: <code>mmoprofessionexperience</code>"},{"location":"Documentation/Compatibility/#give-class-points-mmocoreclasspoints","text":"<p>Gives the player class points. The amount can be a variable or a number. <pre><code>mmocoreclasspoints 1\n</code></pre></p>","title":"Give class points: <code>mmocoreclasspoints</code>"},{"location":"Documentation/Compatibility/#give-skill-points-mmocoreskillpoints","text":"<p>Gives the player skill points. The amount can be a variable or a number. <pre><code>mmocoreskillpoints 10\n</code></pre></p>","title":"Give skill points: <code>mmocoreskillpoints</code>"},{"location":"Documentation/Compatibility/#give-attribute-points-mmocoreattributepoints","text":"<p>Gives the player attribute points. The amount can be a variable or a number. <pre><code>mmocoreattributepoints 2\n</code></pre></p>","title":"Give attribute points: <code>mmocoreattributepoints</code>"},{"location":"Documentation/Compatibility/#give-attribute-reallocation-points-mmocoreattributereallocationpoints","text":"<p>Gives the player attribute reallocation points. The amount can be a variable or a number. <pre><code>mmocoreattributereallocationpoints 1\n</code></pre></p>","title":"Give attribute reallocation points: <code>mmocoreattributereallocationpoints</code>"},{"location":"Documentation/Compatibility/#give-mmoitem-mmoitemgive","text":"<p>Gives the player predefined item. Default amount is one and can be set manually to a higher amount or a variable. The item can be adjusted to the players level by adding the <code>scale</code> option. If you want all items to be stacked together  the <code>singleStack</code> option can be set. If the player doesn't have required space in the inventory, the items will be dropped on the ground. You can also specify the <code>notify</code> keyword to display a message to the player about what items have been received. <pre><code>mmoitemgive CONSUMABLE MANA_POTION\n</code></pre></p>","title":"Give MMOItem: <code>mmoitemgive</code>"},{"location":"Documentation/Compatibility/#take-mmoitem-mmoitemtake","text":"<p>Removes the specified item from the players inventory. Optional arguments are an amount and <code>notify</code> to send a notification to the player.</p> <p>Which inventory types are checked is defined by the <code>invOrder:</code> option. You can use <code>Backpack</code>, <code>Inventory</code> and <code>Armor</code> there. One after another will be checked if multiple types are defined. The backpack will not work before 2.0's item rework since the current item system does not safe custom NBT data.</p> <p>You can also specify <code>notify</code> keyword to display a simple message to the player about loosing items.</p> <p>Amount can be a variable. <pre><code>mmoitemtake SWORD STEEL_SWORD\nmmoitemtake SWORD STEEL_SWORD notify\nmmoitemtake CONSUMABLE HEALTH_POTION amount:5\nmmoitemtake CONSUMABLE BAKED_APPLES amount:2 invOrder:Backpack,Inventory\nmmoitemtake ARMOR KINGS_CHESTPLATE invOrder:Armor,Backpack\n</code></pre></p>","title":"Take MMOItem: <code>mmoitemtake</code>"},{"location":"Documentation/Compatibility/#mythicmobs","text":"<p>Having MythicMobs allows you to use MythicMobs MobKill objective and MythicMobs SpawnMob event.</p>","title":"MythicMobs"},{"location":"Documentation/Compatibility/#objectives_3","text":"","title":"Objectives"},{"location":"Documentation/Compatibility/#mobkill-mmobkill","text":"<p>You need to kill the specified amount of MythicMobs to complete this objective. The first argument must be the mob's internal name (the one defined in your MythicMobs configuration). Multiple mob names must be comma seperated. You can optionally add the <code>amount:</code> argument to specify how many of these mobs need to be killed. It's also possible to add the optional arguments <code>minLevel</code> and <code>maxLevel</code> to further customize what mobs need to be killed. You can also add an optional <code>neutralDeathRadiusAllPlayers</code> argument to complete the objective for each nearby player within the defined radius when the mob is killed by any non-player source. You can add a <code>notify</code> keyword if you want to send a notification to players whenever the objective progresses. You can also add an optional <code>marked</code> argument to only count kills marked with the <code>mspawn</code> event. The only supported variable for the marked argument is <code>%player%</code>.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of mythic mobs already killed, <code>left</code> is the amount of mythic mobs still needed to kill and <code>total</code> is the amount of mythic mobs initially required.</p>  <p>Example</p> <pre><code>mmobkill SkeletalKnight amount:2 events:reward\nmmobkill SnekBoss,SnailBoss,SunBoss amount:10 events:reward\nmmobkill SnekBoss amount:2 minlevel:4 maxlevel:6 events:reward marked:DungeonBoss3\n</code></pre>","title":"MobKill: <code>mmobkill</code>"},{"location":"Documentation/Compatibility/#conditions_8","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#mythicmob-distance-mythicmobdistance","text":"<p>Check whether the player is near a specific MythicMobs entity. The first argument is the internal name of the mob (the one defined in MythicMobs' configuration). The second argument is the distance to check, measured in block lengths in a circular radius.</p>  <p>Example</p> <pre><code>mythicmobdistance SkeletalKnight 7\n</code></pre>","title":"MythicMob distance: <code>mythicmobdistance</code>"},{"location":"Documentation/Compatibility/#events_9","text":"","title":"Events"},{"location":"Documentation/Compatibility/#spawn-mythicmob-mspawnmob","text":"Parameter Syntax Default Value Explanation     location ULF  The location to spawn the mob at.   name name:level  MythicMobs mob name. A level must be specifed after a colon.   amount Positive Number  Amount of mobs to spawn.   target Keyword False Will make the mob target the player.   private Keyword Disabled Will hide the mob from all other players until restart. This does not hide particles or block sound from the mob. Also see notes below.   marked notify:interval None Marks the mob. You can check for marked mobs in mmobkill objective.    Example<pre><code>events:\n  spawnBoss: mspawnmob 100;200;300;world MegaBoss:1 1 target\n  spawnKnights: mspawnmob 100;200;300;world SkeletalKnight:3 5\n  spawnPrivateDevil: mspawnmob 100;200;300;world Mephisto:1 5 target private marked:DungeonBoss3\n</code></pre>  <p>Private Argument</p> <p>The <code>private</code> argument requires some MythicMob setup for optimal use. It's best to use the <code>private</code> argument in combination with the <code>target</code> argument so the mob does not attack  players that cannot see it. Additionally, the mob should be configured to never change its AI target using MythicMobs.</p>","title":"Spawn MythicMob: <code>mspawnmob</code>"},{"location":"Documentation/Compatibility/#placeholderapi","text":"<p>If you have this plugin, BetonQuest will add a <code>betonquest</code> placeholder to it and you will be able to use <code>ph</code> variable in your conversations.</p>","title":"PlaceholderAPI"},{"location":"Documentation/Compatibility/#placeholder-betonquest","text":"<p>You can use all BetonQuest variables in any other plugin that supports PlaceholderAPI. You can even use BetonQuests conditions using the condition variable!   This works using the <code>%betonquest_package:variable%</code> placeholder. The <code>package:</code> part is the name of a package. The <code>variable</code> part is just a BetonQuest variable without percentage characters, like <code>point.beton.amount</code>.</p> <p>Testing your placeholder is easy using this command:   <code>/papi parse &lt;PlayerName&gt; %betonquest_&lt;PackageName&gt;:&lt;VariableType&gt;.&lt;Property&gt;%</code> <pre><code>%betonquest_someGreatQuest:objective.killZombies.left%\n</code></pre></p>","title":"Placeholder: <code>betonquest</code>"},{"location":"Documentation/Compatibility/#variable-ph","text":"<p>You can also use placeholders from other plugins in BetonQuest. Simply insert a variable starting with <code>ph</code>, the second argument should be the placeholder without percentage characters.</p>  <p>Example</p> <pre><code>%ph.player_item_in_hand%\n</code></pre>","title":"Variable: <code>ph</code>"},{"location":"Documentation/Compatibility/#protocollib","text":"","title":"ProtocolLib"},{"location":"Documentation/Compatibility/#hiding-npcs","text":"<p>Having ProtocolLib installed will let you hide Citizens NPCs if specified conditions are met. You can do that by adding a <code>hide_npcs</code> section in your package.  It allows you to assign conditions to specific NPC IDs like so:</p> <pre><code>hide_npcs:\n  41: killedAlready,questStarted\n  127: '!questStarted'\n</code></pre> <p>The interval the conditions are checked in can be configured in the config.yml.</p>","title":"Hiding NPC's"},{"location":"Documentation/Compatibility/#force-visibility-update","text":"<p>You can run the <code>updatevisibility</code> event to manually update the visibility. This is useful for performance optimizations on large servers if used together with the npc hider interval set to high values.</p>","title":"Force Visibility update"},{"location":"Documentation/Compatibility/#conversation-io-menu","text":"<p>ProtocolLib also enables a conversation IO that makes use of a chat menu system.</p>    Sorry, your browser doesn't support embedded videos.  <p>Customize how it looks by adding the following lines to your quest package:</p> <pre><code>menu_conv_io:\n  line_length: 50 # (1)!\n  refresh_delay: 180 # (2)!\n  selectionCooldown: 10 # (3)!\n\n  npc_wrap: '&amp;l &amp;r' # (4)!\n  npc_text: '&amp;l &amp;r&amp;f{npc_text}' # (5)!\n  npc_text_reset: '&amp;f' # (6)!\n  option_wrap: '&amp;r&amp;l &amp;l &amp;l &amp;l &amp;r' # (7)!\n  option_text: '&amp;l &amp;l &amp;l &amp;l &amp;r&amp;8[ &amp;b{option_text}&amp;8 ]' # (8)!\n  option_text_reset: '&amp;b' # (9)! \n  option_selected: '&amp;l &amp;r &amp;r&amp;7\u00bb&amp;r &amp;8[ &amp;f&amp;n{option_text}&amp;8 ]' # (10)!\n  option_selected_reset: '&amp;f' # (11)!\n  option_selected_wrap: '&amp;r&amp;l &amp;l &amp;l &amp;l &amp;r&amp;f&amp;n' # (12)!\n\n  control_select: jump,left_click # (13)!\n  control_cancel: sneak # (14)! \n  control_move: scroll,move # (15)! \n\n  npc_name_type: chat # (16)!\n  npc_name_align: center # (17)!\n  npc_name_format: '&amp;e{npc_name}&amp;r' # (18)!\n  npc_name_newline_separator: true # (19)!\n</code></pre> <ol> <li>Maximum size of a line till its wrapped.</li> <li>Specify how many ticks to auto update display. Default 180.</li> <li>The cooldown for selecting another option after selecting an option. Measured in ticks. 20 ticks = 1 second.</li> <li>What text to prefix each new line in the NPC text that wraps.</li> <li>How to write the NPC text. Replaces {1} with the npcs text.</li> <li>When a color reset is found, what to replace it with.</li> <li>What text to prefix each new line in an option that wraps.</li> <li>How to write an option. Replaces {1} with the option text.</li> <li>When a color reset is found, what to replace it with.</li> <li>How to write a selected option. Replaces {1} with the option text.</li> <li>When a color reset is found, what to replace it with.</li> <li>What text to prefix each new line in a selected option that wraps.</li> <li>Comma separated actions to select options. Can be any of <code>jump</code>, <code>left_click</code>, <code>sneak</code>.</li> <li>Comma separated actions to cancel the conversation. Can be any of <code>jump</code>, <code>left_click</code>, <code>sneak</code>.</li> <li>Comma separated actions to move the selection. Can be any of <code>move</code>, <code>scroll</code>.</li> <li>Type of NPC name display. Can be one of: <code>none</code>, <code>chat</code>.</li> <li>For npc name type of <code>chat</code>, how to align name. One of: <code>left</code>, <code>right</code>, <code>center</code>.</li> <li>How to format the npc name.</li> <li>Whether an empty line is inserted after the NPC's name if there is space leftover.</li> </ol> <p>Variables:</p> <ul> <li><code>{npc_text}</code> - The text the NPC says</li> <li><code>{option_text}</code> - The option text</li> <li><code>{npc_name}</code> - The name of the NPC</li> </ul>","title":"Conversation IO: <code>menu</code>"},{"location":"Documentation/Compatibility/#chat-interceptor-packet","text":"<p>Intercepts pretty much anything sent to the player by intercepting packets sent to them. This can be enabled by default by setting the <code>default_interceptor</code> to <code>packet</code> in config.yml or per conversation by setting <code>interceptor</code> to <code>packet</code> in the top level of the conversation.</p>","title":"Chat Interceptor: <code>packet</code>"},{"location":"Documentation/Compatibility/#freeze-players-freeze","text":"<p>This event allows you to freeze player for the given amount of ticks: <pre><code>freezeMe: \"freeze 100\" #Freezes the player for 5 seconds\n</code></pre></p>","title":"Freeze players: 'freeze'"},{"location":"Documentation/Compatibility/#quests","text":"<p>Quests is another questing plugin, which offers very simple creation of quests. If you don't want to spend a lot of time to write advanced quests in BetonQuest but you need a specific thing from this plugin you can use Custom Event Reward or Custom Condition Requirement. Alternatively, if you have a lot of quests written in Quests, but want to integrate them with the conversation system, you can use <code>quest</code> event and <code>quest</code> condition.</p>","title":"Quests"},{"location":"Documentation/Compatibility/#condition-requirement-quests","text":"<p>When adding requirements to a quest, choose \"Custom requirement\" and then select \"BetonQuest condition\". Now specify condition's name and it's package (like <code>package.conditionName</code>). Quests will check BetonQuest condition when starting the quest.</p>","title":"Condition Requirement (Quests)"},{"location":"Documentation/Compatibility/#event-reward-quests","text":"<p>When adding rewards to a quest or a stage, choose \"Custom reward\" and then select \"BetonQuest event\". Now specify event's name and it's package (like <code>package.eventName</code>). Quests will fire BetonQuest event when this reward will run.</p>","title":"Event Reward (Quests)"},{"location":"Documentation/Compatibility/#conditions_9","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#quest-condition-quest","text":"<p>This condition is met when the player has completed the specified quest. The first and only argument is the name of the quest. It it contains any spaces replace them with <code>_</code>.</p>  <p>Example</p> <pre><code>quest stone_miner\n</code></pre>","title":"Quest condition: <code>quest</code>"},{"location":"Documentation/Compatibility/#events_10","text":"","title":"Events"},{"location":"Documentation/Compatibility/#quest-quest","text":"<p>This event will start the quest for the player. The first argument must be the name of the quest, as defined in <code>name</code> option in the quest. If the name contains any spaces replace them with <code>_</code>. You can optionally add <code>check-requirements</code> argument if you want the event to respect this quest's requirements (otherwise the quest will be forced to be started).</p>  <p>Example</p> <pre><code>quest stone_miner check-requirements\n</code></pre>","title":"Quest: <code>quest</code>"},{"location":"Documentation/Compatibility/#shopkeepers","text":"","title":"Shopkeepers"},{"location":"Documentation/Compatibility/#conditions_10","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#shop-amount-shopamount","text":"<p>This condition checks if the player owns specified (or greater) amount of shops. It doesn't matter what type these shops are. The only argument is a number - minimum amount of shops.</p>  <p>Example</p> <pre><code>shopamount 2\n</code></pre>","title":"Shop amount: <code>shopamount</code>"},{"location":"Documentation/Compatibility/#events_11","text":"","title":"Events"},{"location":"Documentation/Compatibility/#open-shop-window-shopkeeper","text":"<p>This event opens a trading window of a Villager. The only argument is the uniqueID of the shop. You can find it in Shopkeepers/saves.yml file, under <code>uniqueID</code> option.</p>  <p>Example</p> <pre><code>shopkeeper b687538e-14ce-4b77-ae9f-e83b12f0b929\n</code></pre>","title":"Open shop window: <code>shopkeeper</code>"},{"location":"Documentation/Compatibility/#proskillapi","text":"<p>This adds support for ProMCTeam's SkillAPI fork. They still update SkillAPI.  </p>","title":"ProSkillAPI"},{"location":"Documentation/Compatibility/#conditions_11","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#skillapi-class-skillapiclass","text":"<p>This condition checks if the player has specified class or a child class of the specified one. The first argument is simply the name of a class. You can add <code>exact</code> argument if you want to check for that exact class, without checking child classes.</p>  <p>Example</p> <pre><code>skillapiclass warrior\n</code></pre>","title":"SkillAPI Class: <code>skillapiclass</code>"},{"location":"Documentation/Compatibility/#skillapi-level-skillapilevel","text":"<p>This condition checks if the player has specified or greater level is the specified class. The first argument is class name, the second one is the required level.</p>  <p>Example</p> <pre><code>skillapilevel warrior 3\n</code></pre>","title":"SkillAPI Level: <code>skillapilevel</code>"},{"location":"Documentation/Compatibility/#skript","text":"<p>BetonQuest can also hook into Skript. Firstly, to avoid any confusion, I will refere to everything here by name of the plugin (Skript event is something else than BetonQuest event). Having Skript on your server will enable using BetonQuest events and conditions in scripts, and also trigger them by BetonQuest event.</p> <p>You can use cross-package paths using <code>-</code> between the packages. Example: <code>player meets condition \"default-Forest-Jack.Completed\"</code></p>","title":"Skript"},{"location":"Documentation/Compatibility/#skript-event-triggered-by-betonquest-skript-event","text":"<p>This entry will describe two things: Skript event and BetonQuest event.</p> <ol> <li>Skript event - <code>on [betonquest] event \"id\"</code> - this is the line you use in your scripts to trigger the code. <code>betonquest</code> part is optional, and <code>id</code> is just some string, which must be equal to the one you specified in BetonQuest event.</li> <li>BetonQuest event - <code>skript</code> - this event will trigger the above Skript event in your scripts. The instruction string accepts only one argument, id of the event. It have to be the same as the one defined in Skript event for it to be triggered.</li> </ol>  <p>Example</p> <p>In your script <pre><code>on betonquest event \"concrete\":\n</code></pre> In BetonQuest <pre><code>events:\n  fire_concrete_script: skript concrete\n</code></pre></p>","title":"Skript event triggered by BetonQuest <code>skript</code> event"},{"location":"Documentation/Compatibility/#skript-condition","text":"<p>You can check BetonQuest conditions in your scripts by using the syntax <code>player meets [betonquest] condition \"id\"</code>. <code>betonquest</code> is optional, and <code>id</code> is the name of the condition, as defined in the conditions section.</p>  <p>Example</p> <p>In your script <pre><code>player meets condition \"has_ore\"\n</code></pre> In BetonQuest <pre><code>has_ore: item iron_ore:5\n</code></pre></p>","title":"Skript condition"},{"location":"Documentation/Compatibility/#skript-event","text":"<p>You can also fire BetonQuest events with scripts. The syntax for Skript effect is <code>fire [betonquest] event \"id\" for player</code>. Everything else works just like in condition above.</p>  <p>Example</p> <p>In your script <pre><code>fire event \"give_emeralds\" for player\n</code></pre> In BetonQuest <pre><code>events:\n  give_emeralds: give emerald:5\n</code></pre></p>","title":"Skript event"},{"location":"Documentation/Compatibility/#vault","text":"<p>By installing Vault you enable Permission event and Money condition/event.</p>","title":"Vault"},{"location":"Documentation/Compatibility/#conditions_12","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#vault-money-condition-money","text":"<p>Checks if the player has specified amount of money. You can specify only one argument, amount integer. It cannot be negative!</p>  <p>Example</p> <pre><code>money 500\n</code></pre>","title":"Vault Money Condition: <code>money</code>"},{"location":"Documentation/Compatibility/#events_12","text":"","title":"Events"},{"location":"Documentation/Compatibility/#vault-money-event-money","text":"<p>Deposits, withdraws or multiplies money on player's account. There is only one argument, amount of money to modify. It can be positive, negative or start with an asterisk for multiplication.</p>  <p>Example</p> <pre><code>money -100\n</code></pre>","title":"Vault Money Event: <code>money</code>"},{"location":"Documentation/Compatibility/#permission-permission","text":"<p>Adds or removes a permission or a group. First argument is <code>add</code> or <code>remove</code>. It's self-explanatory. Second is <code>perm</code> or <code>group</code>. It also shouldn't be hard to figure out. Next thing is actual string you want to add/remove. At the end you can also specify world in which you want these permissions. If the world name is omitted then permission/group will be global.</p>  <p>Example</p> <pre><code>permission remove group bandit world_nether\n</code></pre>","title":"Permission: <code>permission</code>"},{"location":"Documentation/Compatibility/#variables","text":"","title":"Variables"},{"location":"Documentation/Compatibility/#vault-money-variable-money","text":"<p>There is only one argument in this variable, <code>amount</code> for showing money amount or <code>left:</code> followed by a number for showing the difference between it and amount of money.</p>  <p>Example</p> <pre><code>%money.left:500%\n</code></pre>","title":"Vault Money Variable: <code>money</code>"},{"location":"Documentation/Compatibility/#worldedit-or-fastasyncworldedit","text":"","title":"WorldEdit or FastAsyncWorldEdit"},{"location":"Documentation/Compatibility/#events_13","text":"","title":"Events"},{"location":"Documentation/Compatibility/#paste-schematic-paste","text":"<p>persistent, static</p> <p>This event will paste a schematic at the given location. The first argument is a location and the second one is the name of schematic file. The file must be located in <code>WorldEdit/schematics</code> or <code>FastAsyncWorldEdit/schematics</code> and have a name like <code>some_building.schematic</code>. An optional <code>noair</code> can be added to paste ignoring air blocks. If you have only a <code>.schem</code> schematic, simply append <code>.schem</code> to the schematic name.</p>  <p>Example</p> <pre><code>paste 100;200;300;world some_building noair\n</code></pre>","title":"Paste schematic: <code>paste</code>"},{"location":"Documentation/Compatibility/#worldguard","text":"","title":"WorldGuard"},{"location":"Documentation/Compatibility/#conditions_13","text":"","title":"Conditions"},{"location":"Documentation/Compatibility/#inside-region-region","text":"<p>This condition is met when the player is inside the specified region. The only argument is the name of the region.</p>  <p>Example</p> <pre><code>region beton\n</code></pre>","title":"Inside Region: <code>region</code>"},{"location":"Documentation/Compatibility/#objectives_4","text":"","title":"Objectives"},{"location":"Documentation/Compatibility/#enter-region-region","text":"<p>To complete this objective you need to enter WorldGuard region with specified name. A required argument is the name of the region and you may also pass an optional <code>entry</code> and/or <code>exit</code> to only trigger when entering or exiting a region instead of anytime inside a region.</p>  <p>Example</p> <pre><code>region beton events:kill\n</code></pre>","title":"Enter Region: <code>region</code>"},{"location":"Documentation/Conditions-List/","text":"","title":"Conditions List"},{"location":"Documentation/Conditions-List/#advancement-advancement","text":"<p>This condition checks if the player has specified advancement. The only argument is the full name of the advancement. This includes the namespace, the tab and the name of the advancement as configured on your server.  List of all vanilla advancements.</p>  <p>Example</p> <pre><code>advancement minecraft:adventure/kill_a_mob\n</code></pre>","title":"Advancement: <code>advancement</code>"},{"location":"Documentation/Conditions-List/#conjunction-and","text":"<p>Conjunction of specified conditions. This means that every condition has to be met in order for conjunction to be true. Used only in complex alternatives, because conditions generally work as conjunction. Instruction string is exactly the same as in <code>alternative</code>.</p>  <p>Example</p> <pre><code>and has_helmet,has_chestplate,has_leggings,has_boots\n</code></pre>","title":"Conjunction: <code>and</code>"},{"location":"Documentation/Conditions-List/#armor-armor","text":"<p>The armor condition requires the player to wear an armor that has been specified in the items section.</p>  <p>Example</p> <pre><code>armor helmet_of_concrete\n</code></pre>","title":"Armor: <code>armor</code>"},{"location":"Documentation/Conditions-List/#biome-biome","text":"<p>This condition will check if the player is in specified biome. The only argument is the biome type.</p>  <p>Example</p> <pre><code>biome savanna_rock\n</code></pre>","title":"Biome: <code>biome</code>"},{"location":"Documentation/Conditions-List/#burning-burning","text":"<p>This condition will check if the player is on fire.</p> Example<pre><code>conditions:\n  isOnFire: \"burning\"\n</code></pre>","title":"Burning: <code>burning</code>"},{"location":"Documentation/Conditions-List/#check-conditions-check","text":"<p>This condition allow for specifying multiple instruction strings in one, longer string. Each instruction must be started with <code>^</code> character and no other dividers should be used. The condition will be met if all inner conditions are met. It's not the same as <code>and</code> condition, because you can specify an instruction string, not a condition name.</p>  <p>Example</p> <pre><code>check ^tag beton ^item emerald:5 ^location 100;200;300;survival_nether;5 ^experience 20\n</code></pre>","title":"Check conditions: <code>check</code>"},{"location":"Documentation/Conditions-List/#chest-item-chestitem","text":"<p>persistent, static</p> <p>This condition works in the same way as <code>item</code> condition, but it checks the specified chest instead of a player. The first argument is a location of the chest and the second one is the list of items defined in the same way as in <code>item</code> condition. If there is no chest at specified location the condition won't be met.</p>  <p>Example</p> <pre><code>chestitem 100;200;300;world emerald:5,sword\n</code></pre>","title":"Chest Item: <code>chestitem</code>"},{"location":"Documentation/Conditions-List/#conversation-conversation","text":"<p>This condition will check if a conversation has an available starting option. If no starting option has a condition that returns true then this will return false.</p>  <p>Example</p> <pre><code>conversation innkeeper\n</code></pre>","title":"Conversation: <code>conversation</code>"},{"location":"Documentation/Conditions-List/#day-of-week-dayofweek","text":"<p>It must be a specific day of the week that this condition returns true. You can specify either the english name of the day or the number of the day (1 being monday, 7 sunday,..).</p>  <p>Example</p> <pre><code>dayofweek sunday\n</code></pre>","title":"Day of week: <code>dayofweek</code>"},{"location":"Documentation/Conditions-List/#potion-effect-effect","text":"<p>To meet this condition the player must have an active potion effect. There is only one argument and it takes values from this page: potion types.</p>  <p>Example</p> <pre><code>effect SPEED\n</code></pre>","title":"Potion Effect: <code>effect</code>"},{"location":"Documentation/Conditions-List/#empty-inventory-slots-empty","text":"<p>To meet this condition the players inventory must have the specified amount of empty slots or more. If you want to check for a specific amount (for example for a full inventory with 0 empty slots) you can append the <code>equal</code> argument.</p>  <p>Example</p> <pre><code>empty 5\n</code></pre>","title":"Empty inventory slots: <code>empty</code>"},{"location":"Documentation/Conditions-List/#entities-in-area-entities","text":"<p>persistent, static</p> <p>This condition will return true only if there is a specified amount (or more) of specified entities in the specified area.  There are three required arguments - entity type, location and range. Entities are defined as a list separated by commas. Each entity type (taken from here) can have an additional amount suffix, for example <code>ZOMBIE:5,SKELETON:2</code> means 5 or more zombies and 2 or more skeletons. The location is defined as usual. The number after the location is the range around the location in which will be checked for these entities. You can also specify additional <code>name:</code> argument, with the name of the required entity. Replace all spaces with <code>_</code> here. You can use <code>marked:</code> argument to check only for entities marked in <code>spawn</code> event.</p>  <p>Example</p> <pre><code>entities ZOMBIE:2 100;200;300;world 10 name:Deamon\n</code></pre>","title":"Entities in area: <code>entities</code>"},{"location":"Documentation/Conditions-List/#experience-experience","text":"<p>This condition is met when the player has the specified amount of experience points. You can check for whole levels by adding the <code>level</code> argument.</p>  <p>Example</p> <pre><code>experience 30 level\n</code></pre>","title":"Experience: <code>experience</code>"},{"location":"Documentation/Conditions-List/#facing-direction-facing","text":"<p>Checks if the player is looking in the given direction. Valid directions are <code>UP</code>, <code>DOWN</code>, <code>NORTH</code>, <code>EAST</code>, <code>WEST</code> and <code>SOUTH</code>. Up and down start at a pitch of 60\u00b0.</p>  <p>Example</p> <pre><code>facing EAST\n</code></pre>","title":"Facing direction: <code>facing</code>"},{"location":"Documentation/Conditions-List/#fly-fly","text":"<p>This will check if the player is currently flying (Elytra type of flight).</p>  <p>Example</p> <pre><code>fly\n</code></pre>","title":"Fly: <code>fly</code>"},{"location":"Documentation/Conditions-List/#game-mode-gamemode","text":"<p>This condition checks if the player is in a specified game mode. The first argument is the game mode, i.e. survival, creative, adventure.</p>  <p>Example</p> <pre><code>gamemode survival\n</code></pre>","title":"Game mode: <code>gamemode</code>"},{"location":"Documentation/Conditions-List/#global-point-globalpoint","text":"<p>persistent, static</p> <p>The same as point condition but it checks the amount for a global point category which has the same value for all players.</p>  <p>Example</p> <pre><code>globalpoint global_knownusers 100\n</code></pre>","title":"Global point: <code>globalpoint</code>"},{"location":"Documentation/Conditions-List/#global-tag-globaltag","text":"<p>persistent, static</p> <p>This requires a specific global tag to be set and works the same as normal tag condition.</p>  <p>Example</p> <pre><code>globaltag global_areNPCsAgressive\n</code></pre>","title":"Global tag: <code>globaltag</code>"},{"location":"Documentation/Conditions-List/#item-in-hand-hand","text":"<p>This condition is met only when the player holds the specified quest item in their hand. The offhand will be checked instead of the main hand if the <code>offhand</code> keyword is added. Amount cannot be set here, though it may be checked with the <code>item</code> condition.</p>  <p>Example</p> <pre><code>hand SpecialSword\nhand QuestShield offhand\n</code></pre>","title":"Item in Hand: <code>hand</code>"},{"location":"Documentation/Conditions-List/#health-health","text":"<p>Requires the player to have equal or more health than specified amount. The only argument is a number (double). Players can have 0 to 20 health by default (there are some plugins and commands which change the maximum) (0 means dead, don't use that since it will only be met when the player sees the red respawn screen).</p>  <p>Example</p> <pre><code>health 5.6\n</code></pre>","title":"Health: <code>health</code>"},{"location":"Documentation/Conditions-List/#height-height","text":"<p>This condition requires the player to be below specific Y height. The required argument is a number or a location (for example 100;200;300;world). In case of location it will take the height from it and use it as regular height.</p>  <p>Example</p> <pre><code>height 16\n</code></pre>","title":"Height: <code>height</code>"},{"location":"Documentation/Conditions-List/#hunger-hunger","text":"<p>Requires the player to have equal or more hunger points, the condition is the same as <code>health</code> just for hunger. If the hunger level is below 7, the player cannot sprint.</p>  <p>Example</p> <pre><code>hunger 15\n</code></pre>","title":"Hunger: <code>hunger</code>"},{"location":"Documentation/Conditions-List/#in-conversation-inconversation","text":"<p>This condition checks, if the player is in a conversation.</p>    Parameter Syntax Default Value Explanation     conversation <code>conversation:name</code>  Optional name of the conversation. If specified, it will only check for the conversation with this name.    Example<pre><code>conditions:\n  isInConversation: \"inconversation\"\n  talksToInnkeeper: \"inconversation conversation:innkeeper\"\n</code></pre>","title":"In Conversation: <code>inconversation</code>"},{"location":"Documentation/Conditions-List/#item-in-inventory-item","text":"<p>This condition requires the player to have all specified items in his inventory or backpack. You specify items in a list separated by commas (without spaces between!) Each item consists of its name and amount, separated by a colon. Amount is optional, so if you specify just item's name the plugin will assume there should be only one item.</p>  <p>Example</p> <pre><code>item emerald:5,gold:10\n</code></pre>","title":"Item in Inventory: <code>item</code>"},{"location":"Documentation/Conditions-List/#journal-entry-journal","text":"<p>This condition will return true if the player has specified entry in his journal (internal name of the entry, like in journal section). The only argument is name of the entry.</p>  <p>Example</p> <pre><code>journal wood_started\n</code></pre>","title":"Journal entry: <code>journal</code>"},{"location":"Documentation/Conditions-List/#location-location","text":"<p>It returns true only when the player is closer to specified location than the specified distance. Just two mandatory attributes - location and radius around it (can be a variable).</p>  <p>Example</p> <pre><code>location 100;200;300;survival_nether 5\n</code></pre>","title":"Location: <code>location</code>"},{"location":"Documentation/Conditions-List/#looking-at-a-block-looking","text":"<p>Checks if the player is looking at a block with the given location or material. You must specify either <code>loc:</code> optional (the location of the block) or <code>type:</code> optional as a <code>block selector</code>. You can also specify both.</p>  <p>Example</p> <pre><code>looking loc:12.0;14.0;-15.0;world type:STONE\n</code></pre>","title":"Looking at a block: <code>looking</code>"},{"location":"Documentation/Conditions-List/#moon-cycle-mooncycle","text":"<p>This condition checks the players moon cycle (1 is full moon, 8 is Waxing Gibbous) and returns if the player is under that moon. A list of phases can be found here.</p>  <p>Example</p> <pre><code>mooncycle 1\n</code></pre>","title":"Moon Cycle: <code>mooncycle</code>"},{"location":"Documentation/Conditions-List/#objective-objective","text":"<p>This conditions is very simple: it's true only when the player has an active objective. The only argument is the name of the objective, as defined in the objectives section.</p>  <p>Example</p> <pre><code>objective wood\n</code></pre>","title":"Objective: <code>objective</code>"},{"location":"Documentation/Conditions-List/#alternative-or","text":"<p>Alternative of specified conditions. This means that only one of conditions has to be met in order for alternative to be true. You just define one mandatory argument, condition names separated by commas. <code>!</code> prefix works as always.</p>  <p>Example</p> <pre><code>or night,rain,!has_armor\n</code></pre>","title":"Alternative: <code>or</code>"},{"location":"Documentation/Conditions-List/#partial-date-partialdate","text":"<p>The current date must match the given pattern. You can specify the day of the month, the month or the year it must be that this condition returns true or combine them. You can also specify multiple days/months/years by just separating them by <code>,</code> or a interval by using <code>-</code>. If you have trouble understanding how this works have a look at the example.</p> <p>The example is true between the 1st and the 5th or on the 20th of each month, but only in the year 2017.</p>  <p>Example</p> <pre><code>partialdate day:1-5,20 year:2017\n</code></pre>","title":"Partial date: <code>partialdate</code>"},{"location":"Documentation/Conditions-List/#party-party","text":"<p>To see details about parties read \"Party\" chapter in Reference section. This condition takes three optional arguments: <code>every:</code>, <code>any:</code> and <code>count:</code>. \"Every\" is a list of conditions that must be met by every player in the party. Any is a list of conditions that must be met by at least one player in a party (it doesn't have to be the same player, one can meet first condition, another one can meet the rest and it will work). Count is just a number, minimal amount of players in the party. You don't have to specify all those arguments, you can use only one if you want.</p>  <p>Example</p> <pre><code>party 10 has_tag1,!has_tag2 every:some_item any:some_location,some_other_item count:5\n</code></pre>","title":"Party: <code>party</code>"},{"location":"Documentation/Conditions-List/#permission-permission","text":"<p>The player must have a specified permission for this condition to be met. The instruction string must contain permission node as the required argument.</p>  <p>Example</p> <pre><code>permission essentials.tpa\n</code></pre>","title":"Permission: <code>permission</code>"},{"location":"Documentation/Conditions-List/#point-point","text":"<p>Requires the player to have amount of points equal to the specified category or more. There are two required arguments, first is the category (string), second is the amount (integer). You can also add optional argument <code>equal</code> to accept only players with exactly equal amount of points.</p>  <p>Example</p> <pre><code>point beton 20\n</code></pre>","title":"Point: <code>point</code>"},{"location":"Documentation/Conditions-List/#ride-an-entity-ride","text":"<p>This condition checks if the player rides the specified entity. <code>any</code> is also a valid input and matches any entity.</p>  <p>Example</p> <pre><code>ride horse\nride any\n</code></pre>","title":"Ride an entity: <code>ride</code>"},{"location":"Documentation/Conditions-List/#random-random","text":"<p>persistent, static</p> <p>This condition is met randomly. There is one argument: two positive numbers like <code>5-12</code>. They mean something like that: \"It will be true 5 times out of 12\".</p>  <p>Example</p> <pre><code>random 12-100\n</code></pre>","title":"Random: <code>random</code>"},{"location":"Documentation/Conditions-List/#armor-rating-rating","text":"<p>This one requires the player to wear armor which gives him specified amount of protection (armor icons). The first and only argument should be an integer. One armor point is equal to half armor icon in-game (10 means half of the bar filled).</p>  <p>Example</p> <pre><code>rating 10\n</code></pre>","title":"Armor Rating: <code>rating</code>"},{"location":"Documentation/Conditions-List/#real-time-realtime","text":"<p>There must a specific (real) time for this condition to return true. You need to specify two times (formatted like <code>hh:mm</code>) separated by dash. If the first is before the second the time must be between these two, if its after the second the time must be later than the first and earlier than the second to return true.</p>  <p>Example</p> <pre><code>realtime 8:00-12:30\n</code></pre>","title":"Real time: <code>realtime</code>"},{"location":"Documentation/Conditions-List/#scoreboard-score","text":"<p>With this condition you can check if the score in a specified objective on a scoreboard is greater or equal to specified amount. The first argument is the name of the objective, second one is amount (an integer).</p>  <p>Example</p> <pre><code>score kills 20\n</code></pre>","title":"Scoreboard: <code>score</code>"},{"location":"Documentation/Conditions-List/#sneaking-sneak","text":"<p>Sneak condition is only true when the player is sneaking. This would probably be useful for creating traps, I'm not sure. There are no arguments for this one.</p>  <p>Example</p> <pre><code>sneak\n</code></pre>","title":"Sneaking: <code>sneak</code>"},{"location":"Documentation/Conditions-List/#tag-tag","text":"<p>This one requires the player to have a specified tag. Together with <code>!</code> negation it is one of the most powerful tools when creating conversations. The instruction string must contain tag name.</p>  <p>Example</p> <pre><code>tag quest_completed\n</code></pre>","title":"Tag: <code>tag</code>"},{"location":"Documentation/Conditions-List/#test-for-block-testforblock","text":"<p>persistent, static</p> <p>This condition is met if the block at specified location matches the given material. First argument is a location, and the second one is a <code>block selector</code>.</p>  <p>Example</p> <pre><code>testforblock 100;200;300;world STONE\n</code></pre>","title":"Test for block: <code>testforblock</code>"},{"location":"Documentation/Conditions-List/#time-time","text":"<p>There must be specific (Minecraft) time on the player's world for this condition to return true. You need to specify two hour numbers separated by dash. These number are normal 24-hour format hours. The first must be smaller than the second. If you want to achieve time period between 23 and 2 you need to negate the condition.</p>  <p>Example</p> <pre><code>time 2-23\n</code></pre>","title":"Time: <code>time</code>"},{"location":"Documentation/Conditions-List/#variable-variable","text":"<p>This condition checks if a variable value matches given regular expression.</p>    Parameter Syntax Default Value Explanation     Variable Any variable  The variable (surrounded by <code>%</code> characters).   Regex A regex pattern  The regex that the variables value must match. The regex can also be stored in a variable.   forceSync Keyword False Forces the variables to be resolved on the main thread. This may be required by some third party variables.    <pre><code>variables:\n  anyNumber: \"variable %objective.var.price% -?\\d+\" #(1)!\n  isPlayer: \"variable %ph.parties_members_1% %player%\" #(2)!\n  denizenVariable: \"variable ph.denizen_&lt;server.match_player[SomeName].has_flag[flag_name]&gt; true forceSync\" #(3)!\n</code></pre> <ol> <li>Returns true if the variable <code>%objective.var.price%</code> contains any number.</li> <li>Returns true if the <code>parties_members_1</code> variable contains the player's name.</li> <li>Returns true if the <code>denizen_&lt;server.match_player[SomeName].has_flag[flag_name]&gt;</code> Denizen variable contains <code>true</code>    . This variable is resolved on the main thread.</li> </ol>","title":"Variable: <code>variable</code>"},{"location":"Documentation/Conditions-List/#weather-weather","text":"<p>There must be a specific weather for this condition to return true. There are three possible options: sun, rain and storm. Note that <code>/toggledownfall</code> does not change the weather, it just does what the name suggests: toggles downfall. The rain toggled off will still be considered as rain! Use <code>/weather clear</code> instead.</p>  <p>Example</p> <pre><code>weather sun\n</code></pre>","title":"Weather: <code>weather</code>"},{"location":"Documentation/Conditions-List/#world-world","text":"<p>This conditions checks if the player is in a specified world. The first argument is the name of a world.</p>  <p>Example</p> <pre><code>world world\n</code></pre>","title":"World: <code>world</code>"},{"location":"Documentation/Configuration/","text":"<p>The configuration of BetonQuest is mainly done in the <code>config.yml</code> file. All of its options are described on this page. There is also additional information about backups, updates and database transfers. If you fail to understand options just keep their default values. You can always change them when you have gained a more complete understanding of this plugin. </p>","title":"Configuration"},{"location":"Documentation/Configuration/#config-options","text":"<p>Warning</p> <p>Do not touch <code>version:</code> option! It may corrupt your files!</p>","title":"Config Options"},{"location":"Documentation/Configuration/#mysql-database","text":"","title":"MySQL Database"},{"location":"Documentation/Configuration/#setup","text":"<p>In order to use a MySQL Database for saving all the data you need to fill out the mysql config section. <pre><code>mysql:\n  enabled: true   #Set this to true.\n  host: ''        #This is the IP of your MySQL server. If it runs on the same machine as your server use localhost or 127.0.0.1 \n  port: ''        #This is the port your MySQL server runs on.\n  user: ''        #The name of the database user that is used to connect to the database server.\n  pass: ''        #The password of that user.\n  base: ''        #The database that BetonQuest will write to. You need to create it in your database server.\n  prefix: betonquest_  #The table prefix of BetonQuest's data in the database.\n</code></pre></p>","title":"Setup"},{"location":"Documentation/Configuration/#migrating-a-database-from-sqlite-to-mysql-and-back","text":"<p>Follow these few simple steps to migrate your database easily:</p> <ol> <li>Create a backup with /q backup command.</li> <li>Extract database backup from it.</li> <li>Turn the server off.</li> <li>Place the database-backup.yml file inside the plugin's directory.</li> <li>Edit which database type you want to use by setting the <code>enabled</code> option in the <code>mysql</code> section to true or false.</li> <li>Start the server.</li> <li>Check for errors.</li> <li>If there are no errors, enjoy your migrated database.</li> <li>If there are any errors, post them to the developer or try to fix them if you know how.</li> </ol>","title":"Migrating a database from SQLite to MySQL and back"},{"location":"Documentation/Configuration/#default-language","text":"<p><code>language:</code> is the default translation of the plugin for every new player. Currently, there are 9 languages available:  English (en), Polish (pl), German (de), French (fr), Spanish (es), Chinese (cn), Dutch (nl), Italian (it) and Hungarian (hu).</p>","title":"Default Language"},{"location":"Documentation/Configuration/#updating","text":"<p>The <code>update</code> section controls the Auto-Updater. It has the following settings:</p> <ul> <li><code>enabled</code> (default <code>true</code>). Enables or disables the Updater. If set to false, it is not possible to update with the   updater and no version checks are executed.</li> <li><code>strategy</code> (default <code>MINOR</code>). The update strategy is the most important feature of the Auto-Updater. An explanation is   available here.</li> <li><code>automatic</code> (default <code>true</code>). If true the updater will download new Versions automatically. Otherwise, the updater   will only download new versions when the update command is executed. Advice is   available here.</li> </ul>","title":"Updating"},{"location":"Documentation/Configuration/#journal-slots","text":"<p><code>default_journal_slot</code> is the inventory slot in which the journal will appear after using the <code>/journal</code> command. BetonQuest will try to move items out of the way if the slot is occupied. If the inventory is full the journal will not be added. You can disable this behaviour by setting the option to <code>-1</code>. BetonQuest will then just use any free slot.</p>","title":"Journal slots"},{"location":"Documentation/Configuration/#citizens-identifier","text":"<p><code>citizens_npcs_by_name</code> sets whether NPCs from Citizens 2 should be identified in package.yml by their name instead of their id. This is a dangerous setting as two different NPC's at the opposite edges of your world that share the same name by accident will trigger the same quest.</p>","title":"Citizens identifier"},{"location":"Documentation/Configuration/#citizens-left-click","text":"<p><code>acceptNPCLeftClick</code> activates that a conversation with an NPC can also be started by left clicking the NPC and not only by right clicking the NPC.</p>","title":"Citizens left click"},{"location":"Documentation/Configuration/#citizens-interact-limit","text":"<p><code>npcInteractionLimit</code> prevents NPC / BetonQuest conversation click spamming. The time's unit is milliseconds. Default value: <code>500</code></p>","title":"Citizens interact limit"},{"location":"Documentation/Configuration/#conversation-end-distance","text":"<p><code>max_npc_distance</code> is the distance you need to walk away from the NPC for the conversation to end (in the case of using chat-based conversation interface).</p>","title":"Conversation End Distance"},{"location":"Documentation/Configuration/#default-conversation-style","text":"<p><code>default_conversation_IO</code> is a comma-separated list of conversation interfaces with the first valid one used. Read this page for more information about conversation interfaces.</p>","title":"Default conversation style"},{"location":"Documentation/Configuration/#default-chat-interceptor","text":"<p><code>default_interceptor</code> is a comma-separated list of chat interceptors with the first valid one used. Read this page for more information about chat interceptors.</p>","title":"Default Chat interceptor"},{"location":"Documentation/Configuration/#conversation-chat-display-options","text":"<p><code>display_chat_after_conversation</code> this will prevent all chat messages from displaying during a conversation and it will show them once it's finished.</p>","title":"Conversation Chat Display options"},{"location":"Documentation/Configuration/#combat-delay","text":"<p><code>combat_delay</code> is a delay (in seconds) the player must wait before starting a conversation after combat.</p>","title":"Combat Delay"},{"location":"Documentation/Configuration/#conversation-pullback-message","text":"<p><code>notify_pullback</code> will display a message every time the player is pulled back by the <code>stop</code> option in conversations (in the case of chat-based conversations). It notifies players that they are in a conversation, and the pullback is not a bug.</p>","title":"Conversation pullback message"},{"location":"Documentation/Configuration/#adjusting-the-backpack-to-the-keepinventory-gamerule","text":"<p><code>remove_items_after_respawn</code> option should be turned on if \"keepInventory\" gamerule is not being used.  It prevents other plugins from duplicating quest items after death.</p> <p>When a player dies, their quest items are removed from drops and stored in the backpack, but some plugins may try to restore all items to the player (for example WorldGuard custom flag keep-inventory). That is why BetonQuest removes the quest items that are in a player's inventory after they respawn again, to be sure they were not re-added.  The \"keepInventory\" gamerule, however, works differently - the items are never dropped, so they cannot be added to backpack.  Removing them from the inventory would destroy them forever. Sadly, Bukkit does not allow for gamerule checking, so it is up to you to decide.</p> <p>Once again, if you have \"keepInventory\" gamerule true, this setting has to be false and vice versa.</p>","title":"Adjusting the backpack to the KeepInventory gamerule"},{"location":"Documentation/Configuration/#quest-items-break-behaviour","text":"<p><code>quest_items_unbreakable</code> controls whether quest items can be broken by using them. This was used in the past when the <code>unbreakable</code> tag couldn't be added to items. Turn it off and make your quest items unbreakable by vanilla means.</p>","title":"Quest Items break behaviour"},{"location":"Documentation/Configuration/#player-hider-interval","text":"<p><code>player_hider_check_interval</code> the interval in which the PlayerHider checks the conditions and updates the player's visibility. Cannot be disabled currently. If you want this to be semi-disabled set a very high value. </p>","title":"Player Hider interval"},{"location":"Documentation/Configuration/#npc-hider-interval","text":"<p><code>npc_hider_check_interval</code> is the interval in which the NPCHider checks the conditions and updates the NPC's visibility. Cannot be disabled currently. If you want this to be semi-disabled set a very high value.</p>","title":"NPC Hider interval"},{"location":"Documentation/Configuration/#sounds","text":"<p>This section defines what sounds will be played on these occasions:</p> <ul> <li><code>start</code> and <code>end</code> refer to start and end points of conversations.</li> <li><code>journal</code> is played upon updating the journal.</li> <li><code>update</code> is played when there is a changelog file, used to draw your attention.</li> <li><code>full</code> is played when the player executes <code>/journal</code> but his inventory is full.</li> </ul> <p>A list of all possible sounds for the latest Minecraft version can be found here.</p>","title":"Sounds"},{"location":"Documentation/Configuration/#conversation-command-banlist","text":"<p><code>cmd_blacklist</code> is a list of commands that cannot be used during a conversation. Remember that you can only type single words (command names) here!</p>","title":"Conversation Command Banlist"},{"location":"Documentation/Configuration/#compatibility-hooks","text":"<p><code>hook</code> controls compatibility with other plugins. You can turn off each hook here.</p>","title":"Compatibility Hooks"},{"location":"Documentation/Configuration/#journal","text":"<p><code>journal</code> controls various settings of the journal:</p> <ul> <li><code>chars_per_page</code> is the number of characters before a page break. If it is set too high, the text on a journal page can overflow and become invisible.    This was replaced by <code>chars_per_line</code> and <code>lines_per_page</code> and is only required if you don't like the new behaviour.</li> <li><code>chars_per_line</code> is the number of characters before a line break.    If it is set too high, the text on a journal page can overflow and become invisible.    If this is not set, BQ will fall back on the old page wrapping behaviour configured through <code>chars_per_page</code>.</li> <li><code>lines_per_page</code> is the number of lines before a new page. If it is set too high, the text on a journal page can overflow and become invisible.     This is only required if <code>chars_per_line</code> is set.</li> <li><code>one_entry_per_page</code> makes each entry take a single page. Note that it will not expand to other pages even if it overflows, so keep your entries short.</li> <li><code>reversed_order</code> controls the chronological order of entries in the journal. By default, the entries are ordered from newest to oldest.    It is reversible, but this will force players to click through many pages to get to the most recent entry.</li> <li><code>hide_date</code> hides the date of each entry. Set it to true if you don't want this functionality.</li> <li><code>full_main_page</code> makes the main page always take a full page. If a lot of information is being displayed, it is advised to make this true.    If you use the main page only for small notifications, set it to false, so the entries can follow immediately.</li> <li><code>show_separator</code> shows a separator between journal entries (default: true). Customize the separator in <code>messages.yml</code> with the key <code>journal_separator</code>.</li> <li><code>show_in_backpack</code> whether to display the journal in the backpack when there is no journal in the player's inventory.</li> <li><code>lock_default_journal_slot</code> locks the journal to the <code>default_journal_slot</code>.</li> <li><code>give_on_respawn</code> adds the journal to the player inventory.</li> <li><code>custom_model_data</code> sets the custom model data of the journal item.</li> </ul>","title":"Journal"},{"location":"Documentation/Configuration/#journal-colors","text":"<p><code>journal_colors</code> controls the colors used in the journal. It takes color codes without the <code>&amp;</code> character.</p> <ul> <li><code>date.day</code> is the day number</li> <li><code>date.hour</code> is the hour number</li> <li><code>line</code> is the delimiter between entries</li> <li><code>text</code> is the text of the entry</li> </ul>","title":"Journal Colors"},{"location":"Documentation/Configuration/#conversation-colors","text":"<p><code>conversation_colors</code> controls the colors of the conversation. It takes color names.  If you want to add a font style (bold, italic etc.) do so after placing a comma.</p> <ul> <li><code>npc</code> is the name of the NPC</li> <li><code>player</code> is the name of the player</li> <li><code>text</code> is the NPC's text</li> <li><code>answer</code> is the text of player's answer (after choosing it)</li> <li><code>number</code> is the option number</li> <li><code>option</code> is the text of an option</li> </ul>","title":"Conversation Colors"},{"location":"Documentation/Configuration/#conversation-settings-chestio","text":"<ul> <li><code>conversation_IO_config</code> manages settings for individual conversation IO's:</li> <li><code>chest</code> manages settings for the chest conversation IO<ul> <li><code>show_number</code> will show the player number option if true (default: true)</li> <li><code>show_npc_text</code> will show the npc text in every player option if true (default: true)</li> </ul> </li> </ul>","title":"Conversation Settings: ChestIO"},{"location":"Documentation/Configuration/#quest-downloader","text":"<p><code>download</code> controls security restrictions for the <code>/q download</code> command:</p> <ul> <li><code>pullrequests</code> defines if pull requests may be downloaded. Only enable this if you really know what you are doing!   Everyone can open pull requests that could contain malicious files and if a permission misconfiguration occurs this   will make your server vulnerable to attacks.</li> <li><code>repo_whitelist</code> is a list of trusted github repositories from which quests and templates can be downloaded.   By default only or official tutorial repo BetonQuest/Quest-Tutorials   is on this list.</li> </ul>","title":"Quest downloader"},{"location":"Documentation/Configuration/#items","text":"<p><code>items</code> gives the possibility to override default items, that are defined and used by BetonQuest. The items need to be defined in a package, and then you need to reference the item here with an absolute path.</p> <ul> <li><code>backpack</code> items that are used by the backpack.</li> <li><code>previous_button</code> the item to go to the previous page of items in the backpack.</li> <li><code>next_button</code> the item to go to the next page of items in the backpack.</li> <li><code>cancel_button</code> the item to show the quest cancelers.  </li> <li><code>compass_button</code> the item to show the quest compass.</li> </ul>","title":"Items"},{"location":"Documentation/Configuration/#misc-settings","text":"<ul> <li><code>date_format</code> is the Java date format   used in journal dates. It needs to have a space between the day and hour.</li> <li><code>debug</code> is responsible for logging the plugin's activity to debug.log file in logs directory. Turning this on can   slow your server down. However, if you experience any errors, turn this on and let the plugin gather the data and send   logs to the developer. Note that the first run of the plugin will be logged anyway, just as a precaution.</li> </ul>","title":"Misc settings"},{"location":"Documentation/Conversations/","tags":["Conversation"],"text":"","title":"Conversations"},{"location":"Documentation/Conversations/#general-information","tags":["Conversation"],"text":"<p>Each conversation must define name of the NPC  (some conversations can be not bound to any NPC, so it\u2019s important to specify it even though an NPC will have a name) and his initial options. <pre><code>conversations:\n  conversationName:\n    quester: Name\n    first: option1, option2\n    stop: 'true'\n    final_events: event1, event2\n    interceptor: simple\n    NPC_options:\n      option1:\n        text: Some text in default language\n        events: event3, event4\n        conditions: condition1, !condition2\n        pointers: reply1, reply2\n      option2:\n        text: '&amp;3This ends the conversation'\n    player_options:\n      reply1:\n        text:\n          en: Text in English\n          pl: Tekst po polsku\n        event: event5\n        condition: '!condition3'\n        pointer: option2\n      reply2:\n        text: 'Text containing '' character'\n</code></pre></p>  <p>Note</p> <p>Configuration files use YAML syntax. Google it if you don't know anything about it. Main rule is that you must use two spaces instead of tabs when going deeper into the hierarchy tree. If you want to write <code>'</code> character, you must double it and surround the whole text with another <code>'</code> characters. When writing <code>true</code> or <code>false</code> it also needs to be surrounded with <code>'</code>. If you want to start the line with <code>&amp;</code> character, the whole line needs to be surrounded with <code>'</code>. You can check if the file is correct using this tool.</p>  <ul> <li><code>conversations</code> defines the section as a conversation section.</li> <li><code>ConversationName</code> is the name of the conversation, which you assign then to an NPC in the <code>npcs</code> section. Alternatively, you can combine <code>conversations</code> and <code>ConversationName</code> and use <code>conversations.ConversationName</code> instead.</li> <li><code>quester</code> is name of NPC. It should be the same as name of NPC this conversation is assigned to for greater immersion, but it's your call.</li> <li><code>first</code> are pointers to options the NPC will use at the beginning of the conversation. He will choose the first one that meets all conditions. You define these options in <code>npc_options</code> branch.</li> <li><code>final_events</code> are events that will fire on conversation end, no matter how it ends (so you can create e.g. guards attacking the player if he tries to run). You can leave this option out if you don't need any final events.</li> <li><code>stop</code> determines if player can move away from an NPC while in this conversation (false) or if he's stopped every time he tries to (true). If enabled, it will also suspend the conversation when the player quits, and resume it after he joins back in. This way he will have to finish his conversation no matter what. It needs to be in <code>''</code>! You can modify the distance at which the conversation is ended / player is moved back with <code>max_npc_distance</code> option in the config.yml.</li> <li><code>interceptor</code> optionally set a chat interceptor for this conversation. Multiple interceptors can be provided in a comma-separated list with the first valid one used.</li> <li><code>NPC_options</code> is a branch with texts said by the NPC.</li> <li><code>player_options</code> is a branch with options the player can choose.</li> <li><code>text</code> defines what will display on screen. If you don't want to set any events/conditions/pointers to the option, just skip them. Only <code>text</code> is always required.</li> <li><code>conditions</code> are names of conditions which must be met for this option to display, separated by commas.</li> <li><code>events</code> is a list of events that will fire when an option is chosen (either by NPC or a player), defined similarly to conditions.</li> <li><code>pointer</code> is list of pointers to the opposite branch (from NPC branch it will point to options player can choose from when answering, and from player branch it will point to different NPC reactions).</li> </ul> <p>When an NPC wants to say something he will check conditions for the first option (in this case <code>option1</code>). If they are met, he will choose it. Otherwise, he will skip to next option (note: conversation ends when there are no options left to choose). After choosing an option NPC will execute any events defined in it, say it, and then the player will see options defined in <code>player_options</code> branch to which <code>pointers</code> setting points, in this case <code>reply1</code> and <code>reply2</code>. If the conditions for the player option are not met, the option is simply not displayed, similar to texts from NPC. Player will choose option he wants, and it will point back to other NPC text, which points to next player options and so on.</p> <p>If there are no possible options for player or NPC (either from not meeting any conditions or being not defined) the conversations ends. If the conversation ends unexpectedly, check the console - it could be an error in the configuration.</p> <p>This can and will be a little confusing, so you should name your options, conditions and events in a way which you will understand in the future. Don't worry though, if you make some mistake in configuration, the plugin will tell you this in console when testing a conversation.</p>","title":"General Information"},{"location":"Documentation/Conversations/#cross-conversation-pointers","tags":["Conversation"],"text":"<p>If you want to create a conversation with multiple NPCs at once or split a huge conversation into smaller, more focused files, you can point to NPC options in other conversations. Just type the pointer as <code>conversation.npc_option</code>.</p> <p>Keep in mind that you can only cross-point to NPC options. It means that you can use those pointers only in <code>first</code> starting options and in all player options. Using them in NPC options will throw errors.</p>  <p>Warning</p> <p>This does not work across packages yet.</p>","title":"Cross-conversation pointers"},{"location":"Documentation/Conversations/#conversation-variables","tags":["Conversation"],"text":"<p>You can use variables in the conversations. They will be resolved and displayed to the player when he starts a conversation. A variable generally looks like that: <code>%type.optional.arguments%</code>. Type is a mandatory argument, it defines what kind of variable it is. Optional arguments depend on the type of the variable, i.e. <code>%npc%</code> does not have any additional arguments, but <code>%player%</code> can also have <code>display</code> (it will look like that: <code>%player.display%</code>). You can find a list of all available variable types in the \"Variables List\" chapter.</p>  <p>Note</p> <p>If you use a variable incorrectly (for example trying to get a property of an objective which isn't active for the player, or using %npc% in <code>message</code> event), the variable will be replaced with empty string (\"\").</p>","title":"Conversation variables"},{"location":"Documentation/Conversations/#translations","tags":["Conversation"],"text":"<p>As you can see in this example conversation, there are additional messages in other languages. That's because you can translate your conversations into multiple languages. The players will be able to choose their preferred one with /questlang command. You can translate every NPC/player option and quester's name. You do this like this:</p> <pre><code>quester:\n  en: Innkeeper\n  pl: Karczmarz\n  de: Gastwirt\n</code></pre> <p>As said before, the same rule applies to all options and quester's name. The player can choose only from languages present in messages.yml, and if there will be no translation to this language in the conversation, the plugin will fall back to the default language, as defined in config.yml. If that one is not defined, there will be an error.</p> <p>You can also translate journal entries, quest cancelers and <code>message</code> events, more about that later.</p>","title":"Translations"},{"location":"Documentation/Conversations/#conversation-displaying","tags":["Conversation"],"text":"<p>BetonQuest provides different conversation styles, so called \"conversationIO's\". They all look different but the biggest difference is the way the user interacts with them.</p>  menusimpletellrawslowtellrawchest   <p>A modern conversation style that works with some of Minecraft's native controls. All options can be found in the compatibility section. This is a video of it in action:     Sorry, your browser doesn't support embedded videos. </p>   <p>A chat output. The user has to write a number into their chat to select an option.</p>   <p>Also a chat output. The user can click on the options instead of typing them.</p>   <p>The same as <code>tellraw</code> but the NPC's text is printed line by line, delayed by 0.5 seconds.</p>   <p>A chest GUI with clickable buttons where the NPC's text and options will be shown as item lore.</p> <p>You can change the option's item to something else than ender pearls by adding a prefix to that option's text. The prefix is a name of the material (like in the items section) inside curly braces, with an optional damage value after a colon. Example of such option text: <code>{diamond_sword}I want to start a quest!</code>.</p>     <p>You can control the colors of conversation elements in the config.yml file, in <code>conversation_colors</code> section. Here you must use names of the colors.</p> <p>BetonQuest uses the <code>menu</code> conversationIO by default. If ProtocolLib is not installed, the <code>chest</code> IO will be used. You can however change the utilized conversationIO by setting the <code>default_conversation_IO</code> option in the config.yml file.</p> <p>In case you want to use a different type of conversation display for just one specific conversation you can add a <code>conversationIO: &lt;type&gt;</code> setting to the conversation file at the top of the YAML hierarchy (which is the same level as <code>quester</code> or <code>first</code> options).</p>","title":"Conversation displaying"},{"location":"Documentation/Conversations/#chat-interceptors","tags":["Conversation"],"text":"<p>While engaged in a conversation, it can be distracting when messages from other players or system messages interfere with the dialogue. A chat interceptor provides a method of intercepting those messages and then sending them after the conversation has ended.</p> <p>You can specify the default chat interceptor by setting <code>default_interceptor</code> inside the <code>config.yml</code>. Additionally, you can overwrite the default for each conversation by setting the <code>interceptor</code> key inside your conversation file.</p> <p>The default configuration of BetonQuest sets the <code>default_interceptor</code> option to <code>packet,simple</code>. This means that it first tries to use the <code>packet</code> interceptor. If that fails it falls back to using the <code>simple</code> interceptor.</p> <p>BetonQuest adds following interceptors: <code>simple</code>, <code>packet</code> and <code>none</code>:</p> <p>The <code>simple</code> interceptor works with every Spigot server but only supports very basic functionality and may not work with plugins like Herochat.</p> <p>The <code>packet</code> interceptor requires the ProtocolLib plugin to be installed. It will work well in any kind of situation.</p> <p>The <code>none</code> interceptor is an interceptor that won't intercept messages. That sounds useless until you have a conversation that you want to be excluded from interception. In this case you can just set <code>interceptor: none</code> inside your conversation file.</p>","title":"Chat Interceptors"},{"location":"Documentation/Conversations/#advanced-extends","tags":["Conversation"],"text":"<p>Conversation also supports the concept of inheritance. Any option can include the key <code>extends</code> with a comma delimited list of other options of the same time. The first option that does not have any false conditions will have it's text, pointers and events merged with the extending option. The extended option may itself extend other options. Infinite loops are detected.</p> <p><pre><code>NPC_options:\n\n  ## Normal Conversation Start\n  start:\n    text: 'What can I do for you'\n    extends: tonight, today\n\n  ## Useless addition as example\n  tonight:\n    # Always false\n    condition: random 0-1\n    text: ' tonight?'\n    extends: main_menu\n\n  today:\n    text: ' today?'\n    extends: main_menu\n\n  ## Main main_menu\n  main_menu:\n    pointers: i_have_questions, bye\n</code></pre> In the above example, the option start is extended by both tonight and today, both of whom are extended by main_menu. As tonight has a false condition the today option will win. The start option will have the pointers in main_menu added to it just as if they were defined directly in it and the text will be joined together from today. If you structure your conversation correctly you can make use of this to minimize duplication.</p>","title":"Advanced: Extends"},{"location":"Documentation/Events-List/","text":"","title":"Events List"},{"location":"Documentation/Events-List/#cancel-quest-cancel","text":"<p>This event works in the same way as a quest canceler in the backpack. Running it is equal to the player clicking on the bone. The only argument is a name of a quest canceler, as defined in the cancel section</p>  <p>Example</p> <pre><code>cancel wood\n</code></pre>","title":"Cancel quest: <code>cancel</code>"},{"location":"Documentation/Events-List/#chat-player-message-chat","text":"<p>This event will send the given message as the player. Therefore, it will look like as if the player did send the message.  The instruction string is the command, without leading slash. You can only use <code>%player%</code> as a variable in this event. Additional messages can be defined by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the message use <code>\\|</code>.</p> <p>If a plugin does not work with the sudo / command event you need to use this event.</p>  <p>Example</p> <pre><code>sendMSG: \"chat Hello!\"\nsendMultipleMSGs: \"chat Hi %player%|ban %player%|pardon %player%\"\nsendPluginCommand: \"chat /someCommand x y z\"\n</code></pre>","title":"Chat player message <code>chat</code>"},{"location":"Documentation/Events-List/#chest-clear-chestclear","text":"<p>persistent, static</p> <p>This event removes all items from a chest at specified location. The only argument is a location.</p>  <p>Example</p> <pre><code>chestclear 100;200;300;world\n</code></pre>","title":"Chest Clear: <code>chestclear</code>"},{"location":"Documentation/Events-List/#chest-give-chestgive","text":"<p>persistent, static</p> <p>This works the same as <code>give</code> event, but it puts the items in a chest at specified location. The first argument is a location, the second argument is a list of items, like in <code>give</code> event. If the chest is full, the items will be dropped on the ground. The chest can be any other block with inventory, i.e. a hopper or a dispenser. BetonQuest will log an error to the console when this event is fired but there is no chest at specified location.</p>  <p>Example</p> <pre><code>chestgive 100;200;300;world emerald:5,sword\n</code></pre>","title":"Chest Give: <code>chestgive</code>"},{"location":"Documentation/Events-List/#chest-take-chesttake","text":"<p>persistent, static</p> <p>This event works the same as <code>take</code> event, but it takes items from a chest at specified location. The instruction string is defined in the same way as in <code>chestgive</code> event.</p>  <p>Example</p> <pre><code>chesttake 100;200;300;world emerald:5,sword\n</code></pre>","title":"Chest Take: <code>chesttake</code>"},{"location":"Documentation/Events-List/#clear-entities-clear","text":"<p>This event removes all specified mobs from the specified area. The first required argument is a list of mobs (taken from here) separated by commas. Next is location. After that there is the radius around the location (a positive number or a variable). You can also optionally specify <code>name:</code> argument, followed by name which removed mobs must have. You can use <code>marked:</code> argument to remove only mobs marked in <code>spawn</code> event.</p>  <p>Example</p> <pre><code>clear ZOMBIE,CREEPER 100;200;300;world 10 name:Monster\n</code></pre>","title":"Clear entities: <code>clear</code>"},{"location":"Documentation/Events-List/#compass-compass","text":"<p>When you run this event, you can add or remove a compass destination for the player. You may also directly set the player's compass destination as well. When a destination is added the player will be able to select a specified location as a target of his compass. To select the target the player must open his backpack and click on the compass icon. The first argument is <code>add</code>,<code>del</code> or <code>set</code>, and second one is the name of the target, as defined in the compass section. Note that if you set a target the player will not automatically have it added to their choices.</p> <p>The destination must be defined in <code>compass</code> section. You can specify a name for the target in each language or just give a general name, and optionally add a custom item (from items section) to be displayed in the backpack. Example of a compass target:</p> <pre><code>compass:\n  beton:\n    name:\n      en: Target\n      pl: Cel\n    location: 100;200;300;world\n    item: scroll\n</code></pre>  <p>Example</p> <pre><code>compass add beton\n</code></pre>","title":"Compass: <code>compass</code>"},{"location":"Documentation/Events-List/#command-command","text":"<p>persistent, static</p> <p>Runs specified command from the console. The instruction string is the command, without leading slash. You can use variables here, but variables other than <code>%player%</code> won't resolve if the event is fired from delayed <code>folder</code> and the player is offline now. You can define additional commands by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the command use <code>\\|</code>.</p> <p>Looking for run command as player?</p>  <p>Example</p> <pre><code>command kill %player%|ban %player%\n</code></pre>","title":"Command: <code>command</code>"},{"location":"Documentation/Events-List/#conversation-conversation","text":"<p>Starts a conversation at location of the player. The only argument is ID of the conversation. This bypasses the conversation permission!</p>  <p>Example</p> <pre><code>conversation village_smith\n</code></pre>","title":"Conversation: <code>conversation</code>"},{"location":"Documentation/Events-List/#damage-player-damage","text":"<p>Damages the player by specified amount of damage. The only argument is a number (can have floating point).</p>  <p>Example</p> <pre><code>damage 20\n</code></pre>","title":"Damage player: <code>damage</code>"},{"location":"Documentation/Events-List/#delete-point-deletepoint","text":"<p>persistent, static</p> <p>Delete the player points in a specified category.</p>  <p>Example</p> <pre><code>deletepoint npc_attitude\n</code></pre>","title":"Delete Point: <code>deletepoint</code>"},{"location":"Documentation/Events-List/#door-door","text":"<p>persistent, static</p> <p>This event can open and close doors, trapdoors and fence gates. The syntax is exactly the same as in <code>lever</code> event above.</p>  <p>Example</p> <pre><code>door 100;200;300;world off\n</code></pre>","title":"Door: <code>door</code>"},{"location":"Documentation/Events-List/#remove-potion-effect-deleffect","text":"<p>Removes the specified potion effects from the player. Use <code>any</code> instead of a list of types to remove all potion effects from the player.</p>  <p>Example</p> <pre><code>deleffect ABSORPTION,BLINDNESS\n</code></pre>","title":"Remove Potion Effect: <code>deleffect</code>"},{"location":"Documentation/Events-List/#potion-effect-effect","text":"<p>Adds a specified potion effect to player. First argument is potion type. You can find all available types here. Second is integer defining how long the effect will last in seconds. Third argument, also integer, defines level of the effect (1 means first level). Add a parameter <code>ambient</code> to make potion particles appear more invisible (just like beacon effects). To hide particles add a parameter <code>hidden</code>. To hide the icon for the effect add <code>noicon</code>.</p>  <p>Example</p> <pre><code>effect BLINDNESS 30 1 ambient icon\n</code></pre>","title":"Potion Effect: <code>effect</code>"},{"location":"Documentation/Events-List/#explosion-explosion","text":"<p>static</p> <p>Creates an explosion. It can make fire and destroy blocks. You can also define power, so be careful not to blow your server away. Default TNT power is 4, while Wither on creation is 7. First argument can be 0 or 1 and states if explosion will generate fire (like Ghast's fireball). Second is also 0 or 1 but this defines if block will be destroyed or not. Third argument is the power (float number). At the end (4th attribute) there is location.</p>  <p>Example</p> <pre><code>explosion 0 1 4 100;64;-100;survival\n</code></pre>","title":"Explosion: <code>explosion</code>"},{"location":"Documentation/Events-List/#run-multiple-events-folder","text":"<p>persistent, static</p> <p>This event wraps multiple events inside itself. Once triggered, it simply executes it's events. This is usefully to easily refer to a bunch of events at once, e.g. in a conversation.</p> <p>Events marked as persistent will be fired even after the player logs out. Beware though, all conditions are false when the player is offline (even inverted ones), so those events should not be blocked by any conditions!</p>    Parameter Syntax Default Value Explanation     events to run eventName1,event2  One or multiple events to run. Contains event names seperated by commas.   delay Keyword 1 tick The delay before the folder starts executing it's events.   period period:number 1 tick The time between each event. Minimum value is one tick (~20ms).   time unit Keyword Seconds The unit of time to use for delay and period. Either <code>ticks</code> or <code>minutes</code>. Omit to use seconds.   random random:number Disabled Enables \"random mode\". Will randomly pick the defined amount of events .    Examples<pre><code>events:\n  simpleFolder: \"folder event1,event2,event3\" # (1)!\n  runEvents: \"folder event1,event2,event3 delay:5 period:1\" # (2)!\n  troll: \"folder killPlayer,banPlayer,kickPlayer delay:5 random:1\" # (3)!\n  wait: \"folder messagePlayer,giveReward delay:1 minutes\" # (4)!\n</code></pre> <ol> <li>Runs all events after one tick with a delay of one tick between each event.</li> <li>Runs <code>event1</code> after an initial delay of 5 seconds, then waits one second before executing each leftover event.</li> <li>Randomly executes one of the three events after 5 seconds.</li> <li>Executes the events after one minute.</li> </ol>","title":"Run multiple events: <code>folder</code>"},{"location":"Documentation/Events-List/#give-items-give","text":"<p>Gives the player predefined items. They are specified exactly as in <code>item</code> condition - list separated by commas, every item can have amount separated by colon. Default amount is 1. If the player doesn't have required space in the inventory, the items are dropped on the ground, unless they are quest items. Then they will be put into the backpack. You can also specify <code>notify</code> keyword to display a simple message to the player about receiving items.</p>  <p>Example</p> <pre><code>give emerald:5,emerald_block:9\n</code></pre>","title":"Give Items: <code>give</code>"},{"location":"Documentation/Events-List/#give-journal-givejournal","text":"<p>This event simply gives the player his journal. It acts the same way as /j command would.</p>  <p>Example</p> <pre><code>givejournal\n</code></pre>","title":"Give journal: <code>givejournal</code>"},{"location":"Documentation/Events-List/#global-point-globalpoint","text":"<p>persistent, static</p> <p>This works the same way as the normal point event but instead to manipulating the points for a category of a specific player it manipulates points in a global category. These global categories are player independent, so you could for example add a point to such a global category every time a player does a quest and give some special rewards for the 100th player who does the quest.</p>  <p>Example</p> <pre><code>globalpoint global_knownusers 1\n</code></pre>","title":"Global point: <code>globalpoint</code>"},{"location":"Documentation/Events-List/#global-tag-globaltag","text":"<p>persistent, static</p> <p>Works the same way as a normal tag event, but instead of setting a tag for one player it sets it globally for all players.</p>  <p>Example</p> <pre><code>globaltag add global_areNPCsAgressive\n</code></pre>","title":"Global tag: <code>globaltag</code>"},{"location":"Documentation/Events-List/#hunger-hunger","text":"<p>This event changes the food level of the player. The second argument is the modification type. There are <code>give</code>, <code>take</code> and <code>set</code>. The second argument is the amount. With <code>set</code> can the food level be anything. If <code>give</code> or <code>take</code> is specified and the final amount won't be more than 20 or less than 0. If the hunger level is below 7, the player cannot sprint.</p>  <p>Example</p> <pre><code>hunger set 20\nhunger give 5\n</code></pre>","title":"Hunger: <code>hunger</code>"},{"location":"Documentation/Events-List/#if-else-if","text":"<p>This event will check a condition, and based on the outcome it will run the first or second event. The instruction string is <code>if condition event1 else event2</code>, where <code>condition</code> is a condition ID and <code>event1</code> and <code>event2</code> are event IDs. <code>else</code> keyword is mandatory between events for no practical reason.</p>  <p>Example</p> <pre><code>if sun rain else sun\n</code></pre>","title":"If else: <code>if</code>"},{"location":"Documentation/Events-List/#journal-journal","text":"<p>static</p> <p>Adds or deletes an entry to/from a player's journal. Journal entries have to be defined in the <code>journal</code> section. The first argument is the action to perform, the second one is the name of the entry if required. Changing journal entries will also reload the journal.</p> <p>Possible actions are: - <code>add</code>: Adds a page to the journal. - <code>delete</code>: Deletes a page from the journal. - <code>update</code>: Refreshes the journal. This is especially useful when you need to update the main page.</p>  <p>Example</p> <pre><code>journal add quest_started\njournal delete quest_available\njournal update\n</code></pre>","title":"Journal: <code>journal</code>"},{"location":"Documentation/Events-List/#kill-kill","text":"<p>Kills the player. Nothing else.</p>","title":"Kill: <code>kill</code>"},{"location":"Documentation/Events-List/#kill-mobs-killmob","text":"<p>persistent, static</p> <p>Kills all mobs of given type at the location. First argument is the type of the mob. Next argument is the location. Third argument is the radius around the location, in which the mobs must be to get killed. You can also specify <code>name:</code> argument, followed by the name of the mob which should get killed. All <code>_</code> characters will be replaced with spaces. If you want to kill only mobs that have been marked using the spawn mob event use <code>marked:</code> argument followed by the keyword.</p> <p>Only mobs that are in loaded chunks can be killed by using this event.</p>  <p>Example</p> <pre><code>killmob ZOMBIE 100;200;300;world 40 name:Bolec\n</code></pre>","title":"Kill Mobs: <code>killmob</code>"},{"location":"Documentation/Events-List/#language-event-language","text":"<p>This event changes player's language to the specified one. There is only one argument, the language name.</p>  <p>Example</p> <pre><code>language en\n</code></pre>","title":"Language Event: <code>language</code>"},{"location":"Documentation/Events-List/#lever-lever","text":"<p>persistent, static</p> <p>This event can switch a lever. The first argument is a location and the second one is state: <code>on</code>, <code>off</code> or <code>toggle</code>.</p>  <p>Example</p> <pre><code>lever 100;200;300;world toggle\n</code></pre>","title":"Lever: <code>lever</code>"},{"location":"Documentation/Events-List/#lightning-lightning","text":"<p>static</p> <p>Strikes a lightning at given location. The only argument is the location.</p>  <p>Example</p> <pre><code>lightning 100;64;-100;survival\n</code></pre>","title":"Lightning: <code>lightning</code>"},{"location":"Documentation/Events-List/#notification-notify","text":"<p>Displays a notification using the NotifyIO system.</p>  <p>Warning</p> <p>All colons (<code>:</code>) in the message part of the notification need to be escaped, including those inside variables. One backslash (<code>\\</code>) is required when using no quoting at all (<code>...</code>) or single quotes (<code>'...'</code>). Two backslashes are required (<code>\\\\</code>) when using double quotes (<code>\"...\"</code>).</p> <p>Examples: <code>eventName: notify Peter:Heya %player%!</code>  <code>eventName: notify Peter\\:Heya %player%!</code> <code>eventName: 'notify Peter:Heya %player%!'</code>  <code>eventName: 'notify Peter\\:Heya %player%!'</code> <code>eventName: \"notify Peter:Heya %player%!\"</code>  <code>eventName: \"notify Peter\\\\:Heya %player%!\"</code> <code>otherEvent: notify You own %math.calc:5% fish!</code>  <code>otherEvent: You own %math.calc\\:5% fish!</code></p>     Option Description     message The message that will be displayed. Supports variables and translations. Required, must be first   category Will load all settings from that Notification Category. Can be a comma-seperated list. The first existent category will be used. Optional   io Any NotifyIO. Overrides the \"category\" settings. Optional   NotifyIO Any setting from the defined notifyIO. Can be used multiple times. Overrides the \"category\" settings. Optional    <p>The fallback NotifyIO is <code>chat</code> if no argument other than <code>message</code> is specified.   <code>message</code> is the only argument of this event that is not <code>key:value</code> based. You can freely add any text with spaces there.</p> <p>It also allows you to provide multiple translations using a special syntax:  <pre><code>example: \"notify {en} ABC {de} DEF\"\n</code></pre> The value in <code>{}</code> is a language key from messages.yml. Any text after the language key until the next language key belongs to the specified language. There must be a space between the language key and the message. In this example, english users would see <code>ABC</code> and german ones would see <code>DEF</code>.</p> Examples: <p>Check out the documentation about Notify Categories and  Notify IO options if you haven't yet. You must understand these two if you want to use the Notify system to it's full extend. <pre><code>#The simplest of all notify events. Just a chat message:\ncustomEvent: \"notify Hello %player%!\"  \n\n#It's the same as this one since 'chat' is the default IO.\ntheSame: \"notify Hello %player%! io:chat\"\n\n#This one displays a title and a subtile:\nmyTitle: \"notify This is a title.\\nThis is a subtitle. io:title\"\n\n#Plays a sound:\nmySound: \"notify io:sound sound:x.y.z\"\n\n#This one explicitly defines an io (bossbar) and adds one bossbarIO option + one soundIO option:\nmyBar: \"notify This is a custom message. io:bossbar barColor:red sound:block.anvil.use\"\n\n#Some events with categories.\nmyEvent1: \"notify This is a custom message! category:info\"\nmyEvent2: \"notify This is a custom message! category:firstChoice,secondChoice\"\n\n#You can also override category settings:\nmyEvent3: \"notify Another message! category:info io:advancement frame:challenge\"\n\n#Use multiple languages:\nmultilanguage: \"notify {en} Hello english person! {de} Hello german person! {es} Hello spanish person!\"\n</code></pre></p>","title":"Notification: <code>notify</code>"},{"location":"Documentation/Events-List/#broadcast-notifyall","text":"<p>This events works just like the notify event but shows the notification for all online players.</p>","title":"Broadcast: <code>notifyall</code>"},{"location":"Documentation/Events-List/#objective-objective","text":"<p>persistent, static</p> <p>Manages the objectives. Syntax is <code>objective &lt;action&gt; name</code>, where <code>&lt;action&gt;</code> can be start/add (one of the two), delete/remove or complete/finish. Name is the name of the objective, as defined in the objectives section.</p> <p>Using this in static contexts only works when removing objectives!</p>  <p>Example</p> <pre><code>objective start wood\n</code></pre>","title":"Objective: <code>objective</code>"},{"location":"Documentation/Events-List/#opsudo-opsudo","text":"<p>This event is similar to the <code>sudo</code> event, the only difference is that it will fire a command as the player with temporary OP permissions.  Additional commands can be defined by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the message use <code>\\|</code>.</p> <p>Looking for run as normal player? Looking for console commands?</p>  <p>Example</p> <pre><code>opsudo spawn\n</code></pre>","title":"OPsudo: <code>opsudo</code>"},{"location":"Documentation/Events-List/#party-event-party","text":"<p>Runs the specified list of events (third argument) for every player in a party. More info about parties in \"Party\" chapter in Reference section.</p>  <p>Example</p> <pre><code>party 10 has_tag1,!has_tag2 give_reward\n</code></pre>","title":"Party event: <code>party</code>"},{"location":"Documentation/Events-List/#pick-random-pickrandom","text":"<p>persistent, static</p> <p>Another container for events. It picks one (or multiple) of the given events and runs it. You must specify how likely it is that each event is picked by adding the percentage before the event's id.  The event won't break if your total percentages are above 100%. </p> <p>It picks one event from the list by default, but you can add an optional <code>amount:</code> if you want more to be picked. Note that only as many events as specified can be picked and <code>amount:0</code> will do nothing.</p> <p>There must be two <code>%%</code> before the event's name if variables are used, one is from the variable and the other one from the event's syntax.</p>  <p>Example</p> <pre><code>pickrandom 20.5%event1,0.5%event2,79%event3 amount:2\npickrandom %point.factionXP.amount%%event1,0.5%event2,79%event3,1%event4 amount:3\n</code></pre>","title":"Pick random: <code>pickrandom</code>"},{"location":"Documentation/Events-List/#point-point","text":"<p>persistent</p> <p>Gives the player a specified amount of points in a specified category. Amount can be negative if you want to subtract points. You can also use an asterisk to do multiplication (or division, if you use a fraction). First argument after the event name must be a category, and the second one - amount of points to give/take/multiply. This event also supports an optional <code>notify</code> argument that will display information about the change using the notification system.</p>  <p>Example</p> <pre><code>point npc_attitude 10\n</code></pre>   <p>Example</p> <pre><code>point village_reputation *0.75\n</code></pre>","title":"Point: <code>point</code>"},{"location":"Documentation/Events-List/#run-events-run","text":"<p>persistent, static</p> <p>This event allows you to specify multiple instructions in one, long instruction. Each instruction must be started with the <code>^</code> character (it divides all the instructions). It's not the same as the <code>folder</code> event, because you have to specify the actual instruction, not an event name. Don't use conditions here, it behaves strangely. We will fix this in 2.0.</p>  <p>Example</p> <pre><code>run ^tag add beton ^give emerald:5 ^entry add beton ^kill\n</code></pre>","title":"Run events: <code>run</code>"},{"location":"Documentation/Events-List/#scoreboard-score","text":"<p>This event works in the same way as <code>point</code> event, the only difference is that is uses scoreboards instead of points. You can add, subtract, multiply and divide scores in objectives on the scoreboard. The first argument is the name of the objective, second one is a number. It can be positive for addition, negative for subtraction or prefixed with an asterisk for multiplication. Multiplying by fractions is the same as dividing.</p>  <p>Example</p> <pre><code>score kills 1\n</code></pre>","title":"Scoreboard: <code>score</code>"},{"location":"Documentation/Events-List/#set-block-setblock","text":"<p>persistent, static</p> <p>Changes the block at the given position. The first argument is a Block Selector, the second a location. Very powerful if used to trigger redstone contraptions.</p>  <p>Example</p> <pre><code>setblock REDSTONE_BLOCK 100;200;300;world\n</code></pre>","title":"Set Block: <code>setblock</code>"},{"location":"Documentation/Events-List/#spawn-mob-spawn","text":"<p>persistent, static</p> <p>Spawns specified amount of mobs of given type at the location. First argument is a location. Next is type of the mob. The last, third argument is integer for amount of mobs to be spawned. You can also specify <code>name:</code> argument, followed by the name of the mob. All <code>_</code> characters will be replaced with spaces. You can also mark the spawned mob with a keyword using <code>marked:</code> argument. It won't show anywhere, and you can check for only marked mobs in <code>mobkill</code> objective.</p> <p>You can specify armor which the mob will wear and items it will hold with <code>h:</code> (helmet), <code>c:</code> (chestplate), <code>l:</code> (leggings), <code>b:</code> (boots), <code>m:</code> (main hand) and <code>o:</code> (off hand) optional arguments. These take a single item without amount, as defined in the items section. You can also add a list of drops with <code>drops:</code> argument, followed by a list of items with amounts after colons, separated by commas.</p>  <p>Example</p> <pre><code>spawn 100;200;300;world SKELETON 5 marked:targets\n</code></pre>   <p>Example</p> <pre><code>spawn 100;200;300;world ZOMBIE name:Bolec 1 h:blue_hat c:red_vest drops:emerald:10,bread:2\n</code></pre>","title":"Spawn Mob: <code>spawn</code>"},{"location":"Documentation/Events-List/#sudo-sudo","text":"<p>This event is similar to <code>command</code> event, the only difference is that it will fire a command as the player (often referred to as player commands). Additional commands can be defined by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the message use <code>\\|</code>.</p> <p>Looking for run as op? Looking for console commands?</p>  <p>Example</p> <pre><code>sudo spawn\n</code></pre>","title":"Sudo: <code>sudo</code>"},{"location":"Documentation/Events-List/#tag-tag","text":"<p>persistent, static</p> <p>This event adds a tag to or deletes a tag from the player. The first argument after event's name must be <code>add</code> or <code>delete</code>. Next goes the tag name. It can't contain spaces (though <code>_</code> is fine). Multiple tags can be added and deleted separated by commas (without spaces).</p>  <p>Example</p> <pre><code>tag add quest_started,new_entry\n</code></pre>","title":"Tag: <code>tag</code>"},{"location":"Documentation/Events-List/#take-items-take","text":"<p>Removes items from the player\u2019s inventory, armor slots or backpack. The items itself must be defined in the <code>items</code> section, optionally with an amount after a colon. Which inventory types are checked is defined by the <code>invOrder:</code> option. You can use <code>Backpack</code>, <code>Inventory</code>, <code>Offhand</code> and <code>Armor</code> there. One after another will be checked if multiple types are defined.</p> <p>Note: If the items aren't quest items don't use <code>take</code>event with player options in conversations! The player can drop items before selecting the option and pickup them after the event fires. Validate it on the NPC\u2019s reaction!</p> <p>You can also specify <code>notify</code> keyword to display a simple message to the player about loosing items.</p>  <p>Example</p> <pre><code>take emerald:120,sword\ntake nugget:6 notify\ntake wand notify invOrder:Backpack\ntake money:50 invOrder:Backpack,Inventory\ntake armor invOrder:Armor,Offhand,Inventory,Backpack\n</code></pre>","title":"Take Items: <code>take</code>"},{"location":"Documentation/Events-List/#time-time","text":"<p>Sets or adds time. The only argument is time to be set (integer) or time to be added (integer prefixed with +), in 24 hours format. Subtracting time is done by adding more time (if you think of this, it actually makes sense). Minutes can be achieved with floating point. Six minutes equals 0.1 hours.</p>  <p>Example</p> <pre><code>time +6\ntime +0.1\n</code></pre>","title":"Time: <code>time</code>"},{"location":"Documentation/Events-List/#teleport-teleport","text":"<p>Teleports the player to the specified location.  Ends any active conversations.</p>    Parameter Syntax Default Value Explanation     location Unified Location Formatting  The location to which the player will be teleported.    Example<pre><code>events:\n  toCity: \"teleport 432;121;532;world\" # (1)!\n  toHell: \"teleport 123;32;-789;world_the_nether;180;45\" # (2)!\n</code></pre> <ol> <li>Teleports the player to X: 432, Y: 121, Z: 532 in the world named 'world'.</li> <li>Teleports the player to X: 123, Y: 32, Z: -789 in the world named 'world_the_nether'. Also sets the head rotation to yaw 180 and pitch 45.</li> </ol>","title":"Teleport: <code>teleport</code>"},{"location":"Documentation/Events-List/#variable-variable","text":"<p>This event has only one purpose: Change values that are stored in <code>variable</code> objective variables. The first argument is the ID of the <code>variable</code> objective. The second argument is the name of the variable to set. The third argument is the value to set. Both the name and value can use <code>%...%</code> variables. To delete a variable you can use <code>\"\"</code>. Refer to the <code>variable</code> objective documentation for more information about storing variables. This event will do nothing if the player does not already have a <code>variable</code> objective assigned to them.</p>  <p>Example</p> <pre><code>variable CustomVariable MyFirstVariable Goodbye!\nvariable variable_objectiveID name %player%\nvariable other_var_obj desc \"\"\n</code></pre>","title":"Variable: <code>variable</code>"},{"location":"Documentation/Events-List/#weather-weather","text":"<p>persistent, static </p>    Parameter Syntax Default Value Explanation     type Keyword  The type of weather to set. Either <code>sun</code>, <code>rain</code> or <code>storm</code>.   duration <code>duration:number</code> Minecraft decides randomly. The duration the weather will last (in seconds). Can be a variable. Is handled from minecraft afterwards.   world <code>world:worldName</code> The player's current world. The world to change the weather in.    Example<pre><code>events:\n  setSun: \"weather sun\"\n  setShortRain: \"weather rain duration:60 world:rpgworld\"\n  setStorm: \"weather storm duration:%point.tribute.left:150%\"\n</code></pre>","title":"Weather: <code>weather</code>"},{"location":"Documentation/Events-List/#give-experience-experience","text":"<p>Gives the specified amount of experience points to the player. You can give whole levels by adding the <code>level</code> argument.</p>  <p>Example</p> <pre><code>experience 4 level\n</code></pre>","title":"Give experience: <code>experience</code>"},{"location":"Documentation/Events-List/#burn-burn","text":"Parameter Syntax Default Value Explanation     duration <code>duration:number</code>  The duration the player will burn (in seconds). Can be a variable.    Example<pre><code>events:\n  burn: \"burn duration:4\"\n  punishing_fire: \"burn duration:%point.punishment.amount%\"\n</code></pre>","title":"Burn: <code>burn</code>"},{"location":"Documentation/Events-List/#move-the-player-velocity","text":"Parameter Syntax Default Value Explanation     vector <code>vector:(x;y;z)</code>  The values of the vector, which are decimal numbers, can be interpreted as absolute numbers like the coordinate or as relative directions. For more understanding the relative direction is similar to <code>^ ^ ^</code> in minecraft or in other words <code>(sideways;upwards;forwards)</code>. Can be a variable.   direction <code>direction:directionType</code> <code>absolute</code> There are 3 types how the vector can get applied to the player: <code>absolute</code> won't change the vector at all. <code>relative</code> will redirect the vector to the view of the player. <code>relative_y</code> is a mix between absolute and relative. It will still direct to the view but only horizontally, so y will be absolute.   modification <code>modification:modificationType</code> <code>set</code> Possible modifications are <code>set</code> and <code>add</code>. The modification type determines how the vector should be merged with the player's velocity. The player's velocity is the external force applied on the player.     Visual Explanation <p>In contrast to their global counterparts, relative x,y,z axes do not change their orientation relative to the player. Example: The positive x-axis will always point left from the perspective of the player.    </p>  Example<pre><code>events:\n  jumppad: \"velocity vector:(2;0.8;4)\"\n  dash: \"velocity vector:(0;0.1;1.3) direction:relative_y\"\n  variable_dash: \"velocity vector:%objective.customVariable.dashLength% direction:relative_y\"\n  fly: \"velocity vector:(0;0.1;2) direction:relative modification:add\"\n</code></pre>","title":"Move the player: <code>velocity</code>"},{"location":"Documentation/Menu-Commands/","text":"<p>On this page you find all commands for the plugin.</p>","title":"Commands"},{"location":"Documentation/Menu-Commands/#main-plugin-command-rpgmenu","text":"<p>Aliases: <code>/rpgmenus</code>, <code>/menu</code>, <code>/menus</code>, <code>/rpgm</code>, <code>/qm</code></p> <p>Permission: <code>betonquest.admin</code></p> <p>Description: Provides various utility commands for menus.</p> <p>Subcommands:</p> <ul> <li> <p><code>/rpgmenu reload [menu]</code>:   Allows reloading all configuration files or just reloading the configuration of one specific menu.</p> </li> <li> <p><code>/rpgmenu list</code>:   Lists all currently loaded menus and allows opening them just by clicking on them.</p> </li> <li> <p><code>/rpgmenu open &lt;menu&gt; [player]</code>:    Opens a menu for you or another player. Opening conditions of the menu will be ignored when using this command.</p> </li> </ul>","title":"Main plugin command: <code>/rpgmenu</code>"},{"location":"Documentation/Menu-Commands/#bound-commands-customizable","text":"<p>The plugin lets you create a new command for each menu which allows all players to open the menu. You can also specify BetonQuest conditions so that the menu can only be opened if the player matches specific conditions (like has tags, permissions or points). Have a look at the menu settings for more information.</p>","title":"Bound commands: (customizable)"},{"location":"Documentation/Menu-Config/","text":"<p>The plugin's config is stored in a file called <code>menuConfig.yml</code> which is located in the plugin folder of BetonQuest, right near the config file of BetonQuest. It contains some default settings as well as all messages which are sent to the player by the plugin. On first start of the plugin the default config file will be created including all default settings which you are then able to change to customize the plugin.</p>","title":"Plugin configuration"},{"location":"Documentation/Menu-Config/#the-config-options","text":"<ul> <li><code>default_close</code>:  (boolean)   Sets if menus should close by default when an item is clicked (<code>true</code>) or if they should stay open (<code>false</code>).   This can also be overridden by each individual menu.   Default value: <code>true</code></li> </ul>","title":"The config options"},{"location":"Documentation/Menu-Config/#the-messages-section","text":"<p>This section contains all messages which are displayed to the player by the plugin. You can change them to fit all your needs. It's also possible to add additional languages, it works the same way as with BetonQuests messages.yml: Just add another section with the short name of your language as key and the translated messages. It's not required to specify all messages, if a message is missing for your language it will just pick the message in BetonQuests default language.</p>","title":"The messages section"},{"location":"Documentation/Menu-Elements/","text":"","title":"Events"},{"location":"Documentation/Menu-Elements/#menu-event-menu","text":"<p>This event can be used to open and close menus. The first argument is the type of action that should be done. It is either <code>open</code> to open a new menu or <code>close</code> to close the currently opened menu of the player. If you want to open a menu you have to add a second argument which should be the id of a menu. If you want to open menus from other packages just use <code>packageName.id</code> format.</p> <p>Example: <code>menu open quest_gui</code></p> <p>Example: <code>menu close</code></p>","title":"Menu event: <code>menu</code>"},{"location":"Documentation/Menu-Elements/#conditions","text":"","title":"Conditions"},{"location":"Documentation/Menu-Elements/#menu-condition-menu","text":"<p>This condition can be used to check if the player has currently opened any menu. You can add <code>id:</code> optional and specify the id of a menu to check if the player has opened the menu with this id. If you want to check for menus from other packages just use <code>packageName.id</code> format.</p> <p>Example: <code>menu id:quest_gui</code></p>","title":"Menu condition: <code>menu</code>"},{"location":"Documentation/Menu-Elements/#objectives","text":"","title":"Objectives"},{"location":"Documentation/Menu-Elements/#menu-objective-menu","text":"<p>This objective is completed when the player opens the menu with the given id. The only required argument is the id of the menu. If you want to use menus from other packages just use <code>packageName.id</code> format.</p> <p>The objective also has the property <code>menu</code> which can be used by the objective variable. It returns the title of the menu which should be opened.</p> <p>Example: <code>menu quest_gui</code></p>","title":"menu objective: <code>menu</code>"},{"location":"Documentation/Menu-Elements/#new-variables","text":"","title":"New Variables"},{"location":"Documentation/Menu-Elements/#menu-variable-menu","text":"<p>This variable displays the title of the menu that is currently opened by the player. If no menu is opened it will be just empty.</p> <p>Example: <code>%menu%</code></p>","title":"menu variable: <code>menu</code>"},{"location":"Documentation/Menu-Example/","text":"<p>This is an example of a basic menu that displays the progress of two quests.</p> <p></p>","title":"Basic Menu Example"},{"location":"Documentation/Menu-Example/#usage","text":"<p>You can copy and paste this example into any file in a package.  Then reload and execute the command <code>/q give YOUR_PACKAGE.openMenuItem</code> to get the item that opens the menu.</p> <p>Read the related docs in the menu section to learn more about these configuration options.</p>","title":"Usage"},{"location":"Documentation/Menu-Example/#menu-definition","text":"<pre><code>menus:\n  questMenu:\n    height: 4\n    title: '&amp;6&amp;lQuests'\n    bind: openMenuItem\n    command: '/quests'\n    slots:\n      0-3: filler,filler,filler,filler\n      4: reputation\n      5-8: filler,filler,filler,filler\n      9: 'skeletonQuestActive,skeletonQuestDone'\n      10: 'goldQuestActive,goldQuestDone'\n      27-35: filler,filler,filler,filler,filler,filler,filler,filler,filler\n\n    items:\n      skeletonQuestActive:\n        item: skeletonQuestActiveItem\n        amount: 1\n        conditions: '!skeletonQuestDone'\n        text:\n            - '&amp;7[Quest] &amp;f&amp;lBone ripper'\n            - '&amp;f&amp;oRipp some skeletons off'\n            - '&amp;f&amp;otheir bones to complete'\n            - '&amp;f&amp;othis quest.'\n            - '&amp;f&amp;o'\n            - '&amp;eLeft click to locate NPC.'\n        click:\n          left: locationNotify\n        close: true\n      skeletonQuestDone:\n        item: questDone\n        amount: 1\n        conditions: skeletonQuestDone\n        text:\n            - '&amp;2[Quest] &amp;f&amp;lBone ripper'\n            - '&amp;f&amp;oRipp some skeletons off'\n            - '&amp;f&amp;otheir bones to complete'\n            - '&amp;f&amp;othis quest.'\n            - '&amp;f&amp;o'\n            - '&amp;2Quest completed!'\n        close: false\n      goldQuestActive:\n        item: goldQuestActiveItem\n        amount: 1\n        conditions: '!goldQuestDone'\n        text:\n            - '&amp;7[Quest] &amp;f&amp;lGold rush'\n            - '&amp;f&amp;oMine some gold'\n            - '&amp;f&amp;oto complete this quest.'\n        click:\n          left: locationNotify\n        close: true\n      goldQuestDone:\n        item: questDone\n        amount: 1\n        conditions: goldQuestDone\n        text:\n            - '&amp;2[Quest] &amp;f&amp;lGold rush'\n            - '&amp;f&amp;oMine some gold'\n            - '&amp;f&amp;oto complete this quest.'\n            - '&amp;2Quest completed!'\n        close: false\n      reputation:\n        item: xpBottle  \n        amount: 1\n        text:\n            - '&amp;2Quest Level: &amp;6&amp;l%point.quest_reputation.amount%'\n        close: true\n      filler: \n        text: \"a \"\n        item: filler\n\nconditions:\n  skeletonQuestDone: \"tag skeletonQuestDone\"\n  goldQuestDone: \"tag goldQuestDone\"\nevents:\n  locationNotify: \"notify &amp;cThe skeletons roam at x\\\\:123 z\\\\:456!\"\nitems:\n  openMenuItem: BOOK title:Quests\n\n  xpBottle: EXPERIENCE_BOTTLE\n  filler: \"GRAY_STAINED_GLASS_PANE\"\n\n  skeletonQuestActiveItem: \"BONE\"\n  goldQuestActiveItem: \"RAW_GOLD\"\n  questDone: \"LIME_CONCRETE\"\n</code></pre>","title":"Menu Definition"},{"location":"Documentation/Menu-Menu/","text":"<p>BetonQuest allows the creation of fully custom GUIs using the events and items system. Nearly everything can be done with these, from simple selection, over warp systems, guis listing open quests to information dialogs that display player stats.</p> <p></p> <p>Many new features will be added to the menu system in 2.0. You can see the ongoing discussion on what features to add on our GitHub discussion page.</p> <p> Try the working example for a quick overview.</p>","title":"Menus"},{"location":"Documentation/Menu-Menu/#creating-a-menu","text":"<p>To create a new menu just create a <code>menus</code> section in any file. The name which can be used to identify each menu will be the name of another section as shown below.</p> Menu Definition Example<pre><code>menus:\n  myMenuName:\n    title: \"My Menu Title\"\n    #...\n</code></pre>","title":"Creating a menu"},{"location":"Documentation/Menu-Menu/#the-menu-settings","text":"<p>This section tells you about each setting which has to be set (or can optionally be set) to configure your menu.</p> <ul> <li> <p><code>title</code>:    Fist of all you have to set the title of your menu.   It will be displayed in the top left corner of your menu.   You can use color codes with <code>&amp;</code> instead of <code>\u00a7</code> to color the   title. Variables are supported.   Example: <code>title: '&amp;6&amp;lQuests'</code></p> </li> <li> <p><code>height</code>:    This sets how many lines of slots your menu will have. Minimum 1, Maximum 6.    Example: <code>height: 3</code></p> </li> <li> <p><code>bind</code>: (Quest Item) -optional    You can use this to bind the menu to an item, so that it opens if the player clicks while holding it.   The item should be defined in the items.yml and you should specify its id here. Use <code>packageName.id</code> to use items from other packages.   This setting is optional so you can leave it out to bind no item. Example: <code>bind: menu_quests_open</code></p> </li> <li> <p><code>command</code>: -optional   You can use this to create a new command which opens the menu if it is executed by a player.   The command should only contain letters, numbers and <code>-</code>. Spaces are not allowed.   The server must be restarted to unregister command tab completions. Example: <code>command: '/quests'</code></p> </li> <li> <p><code>open_conditions</code>: -optional   You can add a list of conditions, each one separated by a <code>,</code> which all have to be true to open the menu with a bound item or a bound command. Use <code>packageName.id</code> to use conditions from other packages and <code>!</code> before the id to invert the condition.  Example: <code>open_conditions: 'menu_quests_open_tag,!sneaking'</code></p> </li> <li> <p><code>open_events</code>: -optional   You can add a list of events, each one separated by a <code>,</code> which all are run when the menu opens. Use <code>packageName.id</code> to use events from other packages.  Example: <code>open_events: 'menu_quests_open_addpoints,menu_quests_open_effect_resistance_short'</code></p> </li> <li> <p><code>close_events</code>: -optional   You can add a list of events, each one separated by a <code>,</code> which all are run when the menu is closed. Use <code>packageName.id</code> to use events from other packages.  Example: <code>close_events: 'menu_quests_reopen'</code></p> </li> <li> <p><code>items</code>: (configuration section)    In this section you define the items which should be displayed in the menu.   Have a look at the items section part of the wiki which is covering this topic.</p> </li> <li> <p><code>slots</code>: (configuration section)    In this section you define which items form the <code>items</code> section should be displayed in which slot.   Have a look at the slots section part of the wiki which is covering this topic.</p> </li> </ul>","title":"The menu settings"},{"location":"Documentation/Menu-Menu/#the-items-section","text":"<p>The items section contains all items which should be displayed in the menu, defined as individual sections of the config. The names of the items should only contain numbers, letters hyphens and underscores. You shouldn't name a item <code>yes</code>, <code>no</code>, <code>true</code> or <code>false</code> as those are yml keywords for booleans. Each item has the following settings:</p> <ul> <li> <p><code>item</code>: (quest item)   The id of a quest item as defined in the <code>items.yml</code>. This item will be displayed in the menu.   Use <code>packageName.id</code> to display the item from another package.  Example: <code>item: menu_quests_dia</code></p> </li> <li> <p><code>amount</code>: (variable number) -optional   The size of the stack that will be displayed in the menu.   You can also use variables here to have the amount based on  a variable. Amount is optional so you can leave it out to have a stack size of <code>1</code>. Example: <code>amount: '%point.reputation.amount%'</code></p> </li> <li> <p><code>condition</code>/<code>conditions</code>: (string) -optional   You can define one or multiple conditions (seperated by <code>,</code>) which all have to be true so that the item is displayed in the menu. Use <code>packageName.id</code> to use conditions from other packages and <code>!</code> before the id to invert the condition. Example: <code>condition: tag_completed</code></p> </li> <li> <p><code>click</code>: (string) -optional    You can define events (each one separated by <code>,</code>) that are run whenever the item is clicked. Use <code>packageName.id</code> to use events from other packages. Example: <code>click: start_quest_wood</code></p> </li> </ul> <p>If you want to have other events when you left click than when you right click create a section with the two settings:</p> <ul> <li><code>left</code>: events that are run on left click</li> <li><code>shiftLeft</code>: events that are run on shift + left click</li> <li><code>right</code>: events that are run on right click</li> <li><code>shiftRight</code>: events that are run on shift + right click</li> <li><code>middleMouse</code>: events that are run on mousewheel click</li> </ul> <p>Example<pre><code>click:\n    left: 'give_xp,msg_give_xp'\n    shiftLeft: 'give_xp,take_xp'\n    right: 'take_xp,msg_take_xp'\n    shiftRight: 'take_xp,msg_take_xp'\n    middleMouse: 'msg_beautifull_text'\n</code></pre> * <code>close</code>: (boolean) -optional    If the menu should close after the item was clicked. If this is not set the <code>default_close</code> value from the plugins config will be used. Example: <code>close: false</code></p> <ul> <li><code>text</code>: (list of strings)    In the text section you can specify the text that is displayed if you hover over the item.    The lore and the display name of the item specified in <code>items.yml</code> will be overwritten by this.    If no text is specified the items default name and lore from <code>items.yml</code> will be kept.    You can use color codes with <code>&amp;</code> and variables</li> </ul> <p>Example<pre><code> text:\n   - '&amp;2Quest reputation: &amp;6&amp;l%point.quest_reputation.amount%'\n</code></pre>    Also like the text in conversations you can provide translations for all languages:    <pre><code>text:\n   en:\n     - '&amp;7[Quest] &amp;6&amp;lThe lost amulet'\n     - '&amp;4&amp;o'\n     - '&amp;eLeft click to locate npc'\n     - '&amp;eRight click to cancel quest'\n   de:\n     - '&amp;7[Quest] &amp;6&amp;lDas verlorene Amulet'\n     - '&amp;4&amp;o'\n     - '&amp;eLinksclick um den NPC zu finden'\n     - '&amp;eRechstclick um die Quest abzubrechen'\n</code></pre></p>","title":"The <code>items</code> section"},{"location":"Documentation/Menu-Menu/#an-example-for-a-items-section","text":"<pre><code>items:\n  quest1_active:\n    item: menu_quests_1\n    amount: 1\n    text:\n      - '&amp;7[Quest] &amp;f&amp;lBone ripper'\n      - '&amp;f&amp;o'\n      - '&amp;eLeft click to locate npc'\n      - '&amp;eRight click to cancel quest'\n    click:\n      right: menu_quests_1_cancel,menu_quests_1_cancel_msg\n      left: menu_quests_1_compass,menu_quests_1_location_msg\n    close: true\n  reputation:\n    item: menu_quests_reputation\n    amount: 1\n    text:\n      - '&amp;2Quest reputation: &amp;6&amp;l%point.quest_reputation.amount%'\n    close: false\n</code></pre>","title":"An example for a <code>items</code> section:"},{"location":"Documentation/Menu-Menu/#the-slots-section","text":"<p>In the slots section you define which items from the items section should be displayed in which slot. On this image you can easily find out the number for each slot. You can also assign multiple items to the same slot and use conditions in the items section specify which one should be used. If you assign multiple items the first one for which all conditions are true will be displayed.</p> <p>Another thing you can do is assigning multiple items to a row of slots. Now the slots are filled up one by one with the items from the list which have all conditions returning true. To make this more clear I want to show you this example: <code>0-2: 'quest1,quest2,quest3'</code> Assuming that the conditions for the items say that quest1 and quest3 should be displayed to the player but quest2 shouldn't then quest1 would be in the slot 0 and quest3 in the slot 1. Slot 2 would stay empty.</p> <p>In addition you can also assign items to a rectangle of slots. Just like with the row the slots in this rectangle are filled up one by one with the items from the list which have all conditions returning true. Here is a example: <code>14*25: 'quest1,quest2,quest3'</code></p> <p></p>","title":"The <code>slots</code> section"},{"location":"Documentation/Menu-Menu/#an-example-for-a-slots-section","text":"<pre><code>slots:\n  8: reputation\n  11-13: 'quest1_active,quest2_active,quest3_active'\n</code></pre>","title":"An example for a <code>slots</code> section:"},{"location":"Documentation/Migration/","text":"<p>This guide explains how to migrate from BetonQuest 1.12.X or any BetonQuest 2.0.0 dev build to the latest BetonQuest 2.0.0 dev build. The migration must be done manually. This will not change while BQ 2.0 is in development!</p>  <p>Warning</p> <p>Before you start migrating, you should backup your server!</p>","title":"Migration"},{"location":"Documentation/Migration/#changes","text":"<p>Skip to the first version that is newer than the version that you're migrating from:</p> <ul> <li>2.0.0-DEV-98 - RPGMenu Merge</li> <li>2.0.0-DEV-238 - Package Structure Rework</li> <li>2.0.0-DEV-337 - Event Scheduling Rework</li> </ul>","title":"Changes"},{"location":"Documentation/Migration/#200-dev-98-rpgmenu-merge","text":"<p>All existing RPGMenu users must update their RPGMenu config file. Simply rename it from <code>rpgmenu.config.yml</code> to <code>menuConfig.yml</code>.</p>","title":"2.0.0-DEV-98 - RPGMenu Merge"},{"location":"Documentation/Migration/#200-dev-238-package-structure-rework","text":"<ul> <li>Ensure your server is running on Java 17</li> <li>Move your current Quests to the folder \"BetonQuest/QuestPackages\"`, as quests are now loaded from there</li> <li>Rename all \"main.yml\" files to \"package.yml\"</li> <li>Quest packages can now contain nested quest packages in sub folders. You can also have any file and folder structure   with any file and folder names you want. Only the \"package.yml\" is reserved as indicator for a quest   package. Learn more in the Reference.</li> <li> <p>Therefore, the \"events.yml`, \"objectives.yml\", \"conditions.yml\", \"journal.yml\" and \"items.yml\" files must     be updated to the following format:     Every type that was previously a separate file with a special name is now identified by a \"parent-section\". It's     the names of the types / the names the file previously had. Let's take a look at an example for events and conditions:</p>  <p>Example</p> Old WayNew Way   <p>events.yml<pre><code>myEvent: \"teleport 1;2;3;world\"\nmyOtherEvent: \"point level 1\"\n</code></pre> conditions.yml<pre><code>myCondition: \"location 300;200;300;world\"\n</code></pre></p>   <p>events.yml<pre><code>events:\n  myEvent: \"teleport 1;2;3;world\"\n  myOtherEvent: \"point level 1\"\n</code></pre> conditions.yml<pre><code>conditions:\n  myCondition: \"location 300;200;300;world\"\n</code></pre> As described in the previous paragraph, the events and conditions must not be in the same file anymore. You could also do this or use any file structure: anyFileName.yml<pre><code>events:\n  myEvent: \"teleport 1;2;3;world\"\n  myOtherEvent: \"point level 1\"\nconditions:\n  myCondition: \"location 300;200;300;world\"\n</code></pre></p>      <p>Warning</p> <p>You must do this change for all types, not just events and conditions! </p>  </li> <li> <p>Alongside the previous change, conversations and menus must also be updated to the following format:   Add an extra prefix matching their type and the file name:</p>  <p>Example</p> Old SyntaxNew Syntax   lisa.yml<pre><code>quester: Lisa\nfirst: option1, option2\nNPC_options:\n  option1:\n  # ...\n</code></pre>   anyFileName.yml<pre><code>conversations:\n  lisa: #(1)!\n    quester: Lisa\n    first: option1, option2\n    NPC_options:\n      option1:\n      # ...\n</code></pre> <ol> <li>This key is now the conversation name that you must refer to when linking NPCs to conversations. </li> </ol> <p>Or alternatively: <pre><code>conversations.lisa:\n  quester: Lisa\n  first: option1, option2\n  NPC_options:\n    option1:\n    # ...\n</code></pre></p>     </li> </ul>","title":"2.0.0-DEV-238 - Package Structure Rework"},{"location":"Documentation/Migration/#200-dev-337-event-scheduling-rework","text":"<ul> <li> <p>All your static events need to be converted to the new scheduling system.   The <code>realtime-daily</code> schedule makes this easy:</p>  <p>Example<p>Old Syntax<pre><code>static:\n  '09:00': beton\n  '11:23': some_command,command_announcement\n</code></pre> New Syntax<pre><code>schedules:\n  betonAt09: #(1)!\n    type: realtime-daily #(2)!\n    time: '09:00' #(3)!\n    events: beton #(4)!\n  cmdAt1123:\n    type: realtime-daily\n    time: '11:23'\n    events: some_command,command_announcement\n</code></pre></p> <ol> <li> <p>A name for the new schedule.   Can be anything you want for organizing your schedules.</p> </li> <li> <p>The type schedule <code>realtime-daily</code> was created for easy updating.    It behaves just like the old static events.</p> </li> <li> <p>The former key is now the time value.   You still have to put it in 'quotes'.</p> </li> <li> <p>The former value is now the events value.</p> </li> </ol> </p>  </li> </ul>","title":"2.0.0-DEV-337 - Event Scheduling Rework"},{"location":"Documentation/Notification-IO%27s-%26-Categories/","text":"","title":"IO's & Categories"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#notify-ios","text":"<p>A NotifyIO is a method of displaying a notification to the player. Here's a demo video showing an example configuration of all NotifyIO's.</p>    Sorry, your browser doesn't support embedded videos.  <p>Most NotifyIO's have unique settings that somehow change how a notification is displayed.   Additionally, they all allow any setting from the SoundIO to be used! This is because every NotifyIO has an internal SoundIO.  Therefore, you can play a sound whenever a notification is shown.</p> <p>The actual message is either defined in the event that triggers the NotifyIO or in the messages.yml for all built-in notifications. </p> <p>Check the notification event documentation on how to use the notify event!</p>","title":"Notify IO's"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#chat","text":"<p>Writes the notification in the player's chat.</p>  Preview <p></p>     Option Description     Sound Any option from the SoundIO.","title":"Chat"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#advancement","text":"<p>Shows the notification using an achievement popup. Unfortunately Minecraft will play the default advancement sound here.  It's not possible to stop this sound from playing - if you want to get rid of it, you would have to override / remove that sound from your server's resource pack. You can still add your own additional sound as usual though. It will then be played together with the default advancement sound.</p>  Preview <p></p>     Option Description     frame What Achievement frame to use. Can be: <code>challenge</code>, <code>goal</code>, <code>task</code>   icon What icon to show. Must be the vanilla name of an item. Example: minecraft:map   Sound Any option from the SoundIO.","title":"Advancement"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#actionbar","text":"<p>Shows the notification using the actionbar.</p>  Preview <p></p>     Option Description     Sound Any option from the SoundIO.","title":"Actionbar"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#bossbar","text":"<p>Shows the notification using a bossbar at the top of the players screen.</p>  Preview <p>  </p>     Option Description     barFlags What flags to add to the bossbar. <code>PLAY_BOSS_MUSIC</code> seems to be broken in either Spigot or the game itself.   barColor What color to draw the bar.   progress What progress to show in the bar. A floating point number between 0.0 (empty) and 1.0 (full). Supports variables.   style What bar style to use.   stay How many ticks to keep the bar on screen. Defaults to 70.   countdown Animates the progress of the bar if set. The value determines how often the bar is updated. Formula: \\(TimeBetweenUpdates = \\frac{stay}{countdown}\\)   Sound Any option from the SoundIO.","title":"Bossbar"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#title","text":"<p>Shows the notification using a title. A subtitle can be played simultaneously by adding <code>\\n</code> to the notification text. Anything after these characters will be shown in the subtitle.</p>  Preview <p></p>     Option Description     fadeIn Ticks to fade the title in. Default 10   stay Ticks to keep title on screen. Default 70   fadeOut Ticks to fade the title out. Default 20   fadeOut Ticks to fade the title out. Default 20   Sound Any option from the SoundIO.","title":"Title"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#subtitle","text":"<p>Shows the notification using a subtitle.</p>  Preview <p></p>     Option Description     fadeIn Ticks to fade the title in. Default 10   stay Ticks to keep title on screen. Default 70   fadeOut Ticks to fade the title out. Default 20   Sound Any option from the SoundIO.","title":"SubTitle"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#totem","text":"<p>Shows a totem with a \"customModelData\" NBT tag. This allows you to replace the totem with a custom texture or model  during the animation.</p>  Preview <p>   Sorry, your browser doesn't support embedded videos. </p>     Option Description     customisation This CustomModelData will be used.   Sound Any option from the SoundIO.","title":"Totem"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#sound","text":"<p>This IO just plays a sound. You can use its options in any other IO. You should read the wiki page of the playsound command as Minecraft's sound system is kinda strange. Just one example: Sound never moves in Minecraft. It's totally static. Keep that in mind when creating sounds close to a player. They can move around the sound and make it louder or quieter by walking towards / away from it.</p>    Option Description     sound Sound to play. If blank, no sound. Either vanilla Minecraft sounds (get them using /playsound autocompletion) or the name of a sound from a resource pack.   soundcategory The category in which the sound will be played.   soundvolume Minecraft's special sound volume. Default: 1   soundpitch Pitch of the sound. Default: 1 Min: 0 Max: 2   soundlocation Default: The player's location. A location using the BetonQuest ULF. Can include variables.   soundplayeroffset This option is special. See below.     <p>This option can be a number or a vector.</p> <p>Number:</p> <p>The location the sound will be played at is moved away from the player towards the <code>soundlocation</code> using the value of <code>soundplayeroffset</code>. The sound will be at the actual location if the player is closer to the soundlocation then the <code>soundplayeroffset</code> would allow.</p>  Visual Explanation <p>  </p> <p>This shows how the sound will be played at the <code>soundlocation</code> if the <code>soundplayeroffset</code> is bigger then the current distance between the player and the <code>soundlocation</code>   </p>  <p>Example usage:</p> <p>You could make a \"sound compass\" that will play a sound in the direction of a point of interest.</p> <p>Vector:    A vector has to be in the format<code>(x;y;z)</code>. This system will use the players relative coordinate system. This means that the vectors x axis is right / left from the players head, the y axis is up or down from where ever the players face is and the z axis is before / behind the players face. It will move along the players  head.</p>  Visual Explanation <p>In contrast to their global counterparts, relative x,y,z axes do not change their orientation relative to the player. Example: The positive x-axis will always point left from the perspective of the player.    </p>  <p>This makes it possible to go crazy with sounds. Just one example: A halloween special where the player hears a  whispering into his left ear - no matter where he is or how he turns his head... \ud83c\udf83</p> <p>Here is a small example:</p>  Video Example <p>blue line = direction the player is looking in   \ud83d\udfe2 = soundlocation argument   \ud83d\udd34  = the actual location the sound is played at   soundplayeroffset = (0,0,5)</p> <p>   Sorry, your browser doesn't support embedded videos.  The sound is always played 5 block away from the soundlocation. The direction is however based on where the player is looking.</p>","title":"Soundsoundplayeroffset:"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#suppress","text":"<p>Does not output any sound or text \ud83d\udd15. Can be used to remove built-in notifications.</p>","title":"Suppress"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#categories","text":"<p>Notify Categories are pre-defined NotifyIO settings. They can be applied to any notify event and are used by BetonQuest's built-in notifications. All categories must be defined in a section called <code>notifications</code>.</p>  <p>Warning</p> <p>A note about the <code>notifications</code> section: BetonQuest searches through all packages and just uses the first one it finds. Therefore, you should probably create just one <code>notifications</code> section. We will improve this in BQ 2.0.</p>","title":"Categories"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#custom-categories","text":"<p>Custom categories are user defined presets for any notify event. They shorten your events and enable you to change how a notification of a certain category looks in one central place. They do not allow you to set a message though as  the message is an argument of the notify event! </p> <p>This is how a custom category looks: <pre><code>notifications:\n  money:            # Category name\n   io: advancement  # Set's the used NotifyIO\n   icon: gold_ingot # A setting of the bossbarIO\n</code></pre></p> <p>The only thing you must be careful with is the name of your custom categories. You could end up using a reserved name - these stem from BetonQuest's build-in notification categories. Changing these is a different feature. A full list of all reserved names can be found below.</p>","title":"Custom Categories"},{"location":"Documentation/Notification-IO%27s-%26-Categories/#built-in-categories","text":"<p>The table below contains all build-in notification categories.</p> <p>You may notice that the \"Categories\" column lists two categories. These work exactly like the one in the <code>notify</code> event. The first existent category (from left to right) will be used. This allows you to change all build-in notifications with just two entries in your notifications section: <pre><code>notifications:\n  info:\n    io: actionbar\n  error:\n    io: actionbar\n</code></pre> You can override the settings from the info/error category for any specific notification by adding it to the  <code>notifications</code> section. Example: <pre><code>notifications:\n  info:\n    io: actionbar\n  error:\n    io: actionbar\n  new_journal_entry:  # The info categories settings are overridden for the new_journal_entry notification\n    io: subtitle\n</code></pre></p>    Notifications Categories  Notifications Categories     Command Blocked command_blocked, error  Animals to Breed animals_to_breed, info   No Permission no_permission, error  Blocks to Break blocks_to_break, info   New Changelog changelog, info  Blocks to Place blocks_to_place, info   Inventory Full Backpack inventory_full_backpack, inventory_full, error  Mobs to click mobs_to_click, info   Inventory Full Drop inventory_full_drop, inventory_full, error  Mobs to Kill mobs_to_kill, info   Language Changed language_changed, info  Fish to catch fish_to_catch, info   Money Given money_given, info  Players to kill players_to_kill, info   Money Taken money_taken, info  Potions to brew potions_to_brew, info   Quest Cancelled quest_cancelled, info  Points given point_given, info   Items Given items_given, info  Points taken point_taken, info   New Journal Entry new_journal_entry, info  Points multiplied point_multiplied, info   Conversation blocked busy, error  Sheep to shear sheep_to_shear, info","title":"Built-in Categories"},{"location":"Documentation/Notification-Settings/","text":"<p>BetonQuest features a powerful notify system that allows you to display any information to your players. You can freely choose between many NotifyIO's like simple chat output, (sub)titles, advancements or sounds. They all come with unique options that allow you to customize them. Just take a look at this example configuration:</p>    Sorry, your browser doesn't support embedded videos.","title":"Settings"},{"location":"Documentation/Notification-Settings/#sending-custom-notifications","text":"<p>A truly custom notification can be sent using the <code>notify</code> event at any time. Check out the events documentation to learn how.</p>","title":"Sending custom notifications"},{"location":"Documentation/Notification-Settings/#changing-betonquests-built-in-notifications","text":"","title":"Changing BetonQuest's built-in notifications"},{"location":"Documentation/Notification-Settings/#general-notifications","text":"<p>These can be anything from BetonQuest notifying a player that their language has been changed to sending a notice about a new changelog to an admin.</p> <p>For example:   When BetonQuest fails to add a quest item to a player's inventory it will send <code>&amp;e*&amp;bYour inventory is full!&amp;e*</code>.   This message is defined in messages.yml along with other default plugin messages. You can redefine them to your liking.</p> <p>The Notify System can do much more than just changing messages though:</p> <p>All notifications will be displayed using the ChatIO and without a sound by default. You need to use notification categories to change this behaviour. These categories are pretty much just pre-defined NotifyIO settings.   Each notification in messages.yml has a special category with a reserved name assigned to it.</p> <p>For example: If you would like to have the \"language_changed\" notification displayed as an actionbar message you define the following:</p> <pre><code>notifications:        #General header for all notification settings\n  language_changed:   #Name of the category, same as in messages.yml\n    io: actionbar     #Setting the Notify IO to \"actionbar\"\n</code></pre>  <p>Warning</p> <p>A note about the <code>notifications</code> section: BetonQuest searches through all packages and just uses the first one it finds. Therefore, you should probably create just one <code>notifications</code> section. We will improve this in BQ 2.0.</p>  <p>You can add any other Notify IO setting to the category like so: <pre><code>notifications:       \n  language_changed:   \n    io: actionbar     \n    sound: entity.blaze.hurt  #Plays a sound while showing the notification\n\n  changelog: #This is another category. They all need to be inside the 'notifications:' section.\n    sound: entity.experience_orb.pickup      \n</code></pre> A full list of all reserved names can be found on the IO's &amp; Categories page.</p> <p>This feature can be used to disable build-in notifications:   Just set <code>io:</code> to <code>supress</code> for any notification that you want to remove.</p>","title":"General notifications"},{"location":"Documentation/Notification-Settings/#objective-notifications","text":"<p>Some objectives have a <code>notify</code> argument that can be added to their instruction. If you do so, the objective will send a notification to the player if they progress in the objective. You can also add an interval (<code>notify:5</code>) - in this case the player will get a notification every 5 steps towards the completion of the objective.</p> <p>The messages.yml values of these notifications look a bit strange: <pre><code>blocks_to_break: '&amp;2{1} blocks left to break'\n</code></pre> <code>{1}</code> is just an internal variable (similar to the color codes) that will be replaced with a number based on the player's progression.</p> <p>You can customize how these notifications are displayed using exactly the same method as for other built-in notifications.</p>","title":"Objective notifications"},{"location":"Documentation/Objectives-List/","text":"","title":"Objectives List"},{"location":"Documentation/Objectives-List/#action-action","text":"<p>This objective completes when the player clicks on the given block type. The first argument is the type of the click, it can be right, left or any. Next is a Block Selector or <code>any</code> if you want to count all clicks, even into the air. You can also specify the <code>loc:</code> argument, followed by the standard location format and the <code>range:</code> followed by a number (or variable). The specified location is the center of a sphere, the range it's radius. Therefore, these arguments define where the clicked block needs to be, as opposed to \"where you must be\" in location condition. If you add the argument <code>cancel</code>, the click will be canceled (chest will not open, button will not be pressed etc.). This objective works great with the location condition and the item in hand condition to further limit the counted clicks. One could make a magic wand using this.</p> <p>The objective contains one property, <code>location</code>. It's a string formatted like <code>X: 100, Y: 200, Z:300</code>. It does not show the radius.</p>  <p>Example</p> <pre><code>action right DOOR conditions:holding_key loc:100;200;300;world range:5\naction any any conditions:holding_magicWand events:fireSpell #Custom click listener for a wand\n</code></pre>","title":"Action: <code>action</code>"},{"location":"Documentation/Objectives-List/#arrow-shooting-arrow","text":"<p>To complete this objective the player needs to shoot the arrow into the target. There are two arguments, location of the target and precision number (radius around location where the arrow must land, should be small). Note that the position of an arrow after hit is on the wall of a full block, which means that shooting not full blocks (like heads) won't give accurate results. Experiment with this objective a bit to make sure you've set the numbers correctly.</p>  <p>Example</p> <pre><code>arrow 100.5;200.5;300.5;world 1.1 events:reward conditions:correct_player_position\n</code></pre>","title":"Arrow Shooting: <code>arrow</code>"},{"location":"Documentation/Objectives-List/#break-or-place-blocks-block","text":"<p>To complete this objective the player must break or place the specified amount of blocks.</p>    Parameter Syntax Default Value Explanation     Block Type Block Selector  The block which must be broken / placed.   Amount Number  The amount of blocks to break / place. Less than 0 for breaking and more than 0 for placing blocks.   Safety Check Keyword (<code>noSafety</code>) Safety Check Enabled The Safety Check prevents faking the objective. The progress will be reduced when the player does to opposite of what they are supposed to do. Example: Player must break 10 blocks. They place 10 of their stored blocks. Now the total amount of blocks to break is 20.   Notifications Keyword (<code>notify</code>) Disabled Displays messages to the player each time they progress the objective. Optionally with the notification interval after colon.    <pre><code>objectives:\n  breakLogs: \"block LOG -16 events:reward notify\"\n  placeBricks: \"block BRICKS 64 events:epicReward notify:5\"\n  breakIron: \"block IRON_ORE -16 noSafety notify events:dailyReward\"\n</code></pre>  Variable Properties  <p>Note that these follow the same rules as the amount argument, meaning that blocks to break are a negative number!</p>    Name Example Output Explanation     amount -6 / 6 Shows the amount of blocks already broken / placed.   left -4 / 4 Shows the amount of blocks that still need to be broken / placed for the objective to be completed.   total -10 / 10 Shows the initial amount of blocks that needed to be broken / placed.    <p>You can use these variables to always get positive values:</p>    Name Example Output Explanation     absoluteAmount 6 Shows the absolute amount of blocks already broken / placed.   absoluteLeft 4 Shows the absolute amount of blocks that still need to be broken / placed for the objective to be completed.   absoluteTotal 10 Shows the initial absolute amount of blocks that needed to be broken / placed.","title":"Break or Place Blocks: <code>block</code>"},{"location":"Documentation/Objectives-List/#breed-animals-breed","text":"<p>This objective is completed by breeding animals of specified type. The first argument is the animal type and the second argument is the amount (positive integer). You can add the <code>notify</code> argument to display a message with the remaining amount each time the animal is bred, optionally with the notification interval after a colon. While you can specify any entity, the objective will be completable only for breedable ones.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of animals already breed, <code>left</code> is the amount of animals still needed to breed and <code>total</code> is the amount of animals initially required.</p>  <p>Example</p> <pre><code>breed cow 10 notify:2 events:reward\n</code></pre>","title":"Breed animals: <code>breed</code>"},{"location":"Documentation/Objectives-List/#put-items-in-a-chest-chestput","text":"<p>This objective requires the player to put specified items in a specified chest. First argument is a location of the chest, second argument is a list of items (from items section), separated with a comma. You can also add amount of items after a colon. The items will be removed upon completing the objective unless you add <code>items-stay</code> optional argument. By default, only one player can look into the chest at the same time. You can change it by adding the key  <code>multipleaccess</code>.</p>  <p>Example</p> <pre><code>chestput 100;200;300;world emerald:5,sword events:tag,message\nchestput 0;50;100;world apple:42 events:message multipleaccess:true\n</code></pre>","title":"Put items in a chest: <code>chestput</code>"},{"location":"Documentation/Objectives-List/#eatdrink-consume","text":"<p>This objective is completed by eating the specified food or drinking the specified potion. </p>    Parameter Syntax Default Value Explanation     Item Item  The item or potion that must be consumed.   Amount amount:number 1 The amount of items to consume.    <pre><code>objectives:\n  eatApple: \"consume apple events:faster_endurance_regen\"\n  eatSteak: \"consume steak amount:4 events:health_boost\"\n</code></pre>  Variable Properties     Name Example Output Explanation     amount 6 Shows the amount of items already consumed.   left 4 Shows the amount of items that still need to be consumed for the objective to be completed.   total 10 Shows the initial amount of items that needed to be consumed.","title":"Eat/drink: <code>consume</code>"},{"location":"Documentation/Objectives-List/#crafting-craft","text":"<p>To complete this objective the player must craft specified item. First argument is ID of the item, as in the items section. Next is amount (integer). You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of items already crafted, <code>left</code> is the amount of items still needed to craft and <code>total</code> is the amount of items initially required.</p>  <p>Example</p> <pre><code>craft saddle 5 events:reward\n</code></pre>","title":"Crafting: <code>craft</code>"},{"location":"Documentation/Objectives-List/#enchant-item-enchant","text":"<p>This objective is completed when the player enchants specified item with specified enchantment. The first argument is an item name, as defined it the items section. Second one is the enchantment and a level, separated with a colon. If you need to check for multiple enchantments you can add a list of them, separated by colons.</p>  <p>Example</p> <pre><code>enchant sword damage_all:1,knockback:1 events:reward\n</code></pre>","title":"Enchant item: <code>enchant</code>"},{"location":"Documentation/Objectives-List/#experience-experience","text":"<p>This objective can by completed by reaching specified amount of experience points. You can check for whole levels by adding the <code>level</code> argument. The conditions are checked when the player levels up, so if they are not met the first time, the player will have to meet them and levelup again. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the current amount of experience, <code>left</code> is the amount of experience still needed and <code>total</code> is the amount of experience required.</p>  <p>Example</p> <pre><code>experience 25 level events:reward\n</code></pre>","title":"Experience: <code>experience</code>"},{"location":"Documentation/Objectives-List/#wait-delay","text":"<p>This objective completes itself after certain amount of time. The player must be online and meet all conditions. If the player is not online the objective is completed on the player's next login.</p>    Parameter Syntax Default Value Explanation     time Any Number  The time after which the objective is completed.   unit Keyword minutes The unit of time. Either <code>minutes</code>, <code>seconds</code> or <code>ticks</code>.   precision interval:number interval:200 The interval in which the objective checks if the time is up. Measured in ticks. Low values cost more performance but make the objective preciser.    Example<pre><code>objectives:\n  waitDay: \"delay 1440 events:resetDaily\" #(1)!\n  wait50sec: \"delay 1000 ticks interval:5 events:failQuest\" #(2)! \n</code></pre> <ol> <li>Runs the <code>resetDaily</code> event after 1440 minutes (24 hours).</li> <li>Runs the <code>failQuest</code> event after 1000 ticks (50 seconds) have passed. The objective checks every 5 ticks (250ms) if the time is up.</li> </ol>  Variable Properties     Name Example Output Explanation     left 23 days 5 hours 45 minutes 17 seconds Shows the time left until the objective is completed.   date 17.04.2022 16:14 Shows the date the objective is completed at using the config's <code>date_format</code> setting.   rawSeconds 5482 Shows the amount of seconds until objective completion.","title":"Wait: <code>delay</code>"},{"location":"Documentation/Objectives-List/#death-die","text":"<p>Death objective completes when the player dies meeting all conditions. You can optionally cancel death with <code>cancel</code> argument. It will heal player and optionally teleport him to respawn location. There can be two arguments: <code>cancel</code>, which is optional, and <code>respawn:</code>, which is also optional and only used if there is the <code>cancel</code> argument set. You can add them right after type of objective.</p>  <p>Example</p> <pre><code>die cancel respawn:100;200;300;world;90;0 events:teleport\n</code></pre>","title":"Death: <code>die</code>"},{"location":"Documentation/Objectives-List/#fishing-fish","text":"<p>Requires the player to catch something with the fishing rod. It doesn't have to be a fish, it can also be any other item.</p>    Parameter Syntax Default Value Explanation     item Block Selector  The item that must be caught.   amount Any Number  The amount that must be caught.   notifications notify:number notify:0 Add <code>notify</code> to display a notification when a fish is caught. Optionally with the notification interval after a colon.   hookLocation hookLocation:Location Everywhere The location at which the item must be caught. Range must also be defined.   range range:number Everywhere The range around the <code>hookLocation</code>.    Example<pre><code>objectives:\n  fisherman: \"fish SALMON 5 notify events:tag_fish_caught\" #(1)!\n  fishAtPond: \"fish COD 5 hookLocation:123;456;789;fishWorld range:10 events:giveSpecialFish\" #(2)!\n</code></pre> <ol> <li>Requires the player to catch 5 salmon. The player will get a notification for every caught fish.</li> <li>Requires the player to catch 5 cod. The rod's hook must be used in a 10 block radius around <code>x:123 y:456 z:789</code> in a world named <code>fishWorld</code>.</li> </ol>  Variable Properties     Name Example Output Explanation     left 4 The amount of fish still left to be caught.   amount 6 The amount of already caught fish.   total 10 The initially required amount of fish needed to be caught.","title":"Fishing: <code>fish</code>"},{"location":"Documentation/Objectives-List/#interact-with-entity-interact","text":"<p>The player must click on an entity to complete this objective. The first argument is the type of a click. Available values are <code>right</code>, <code>left</code> and <code>any</code>. Second required argument is the mob type. Next is an amount of mobs required to click on. These must be unique, so the player can't simply click twenty times on the same zombie to complete it. There is also an optional <code>name:</code> parameter which specifies what custom name the entity must have (you need to write <code>_</code> instead of the space character). To check for the real name (e.g. if you renamed players to include their rank) you can also use <code>realname:</code> instead. Add <code>marked:</code> if the clicked entity needs to be marked by the <code>spawn</code> event (see its description for marking explanation).  You can also add <code>notify</code> argument to make the objective notify players whenever they click a correct entity, optionally with the notification interval after colon and <code>cancel</code> if the click shouldn't do what it usually does (i.e. left click won't hurt the entity). This can be limited with an optional <code>loc</code> and <code>range</code> attribute to limit within a range of a location.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of entities already interacted with, <code>left</code> is the amount of entities still needed to be interacted with and <code>total</code> is the amount of entities initially required.</p>  <p>Example</p> <pre><code>interact right creeper 1 marked:sick condition:syringeInHand cancel\n</code></pre>","title":"Interact with entity: <code>interact</code>"},{"location":"Documentation/Objectives-List/#kill-player-kill","text":"<p>To complete this objective the player needs to kill another player. The first argument is amount of players to kill. You can also specify additional arguments: <code>name:</code> followed by the name will only accept killing players with this name, <code>required:</code> followed by a list of conditions separated with commas will only accept killing players meeting these conditions and <code>notify</code> will display notifications when a player is killed, optionally with the notification interval after a colon.</p> <p>The kill objective has three properties: <code>left</code> is the amount of players still left to kill, <code>amount</code> is the amount of already killed players and <code>total</code> is the initially required amount to kill.</p>  <p>Example</p> <pre><code>kill 5 required:team_B\n</code></pre>","title":"Kill player: <code>kill</code>"},{"location":"Documentation/Objectives-List/#location-location","text":"<p>This objective completes when player moves in specified range of specified location and meets all conditions. The first argument after objective's name must be location, the second - radius around the location. It can be a variable.</p> <p>Location objective contains one property, <code>location</code>. It's a string formatted like <code>X: 100, Y: 200, Z:300</code>.</p>  <p>Example</p> <pre><code>location 100;200;300;world 5 condition:test1,!test2 events:test1,test2\n</code></pre>","title":"Location: <code>location</code>"},{"location":"Documentation/Objectives-List/#login-login","text":"<p>To complete this objective the player simply needs to login to the server. If you use <code>global</code> this objective will be also completed directly when the player joins the first time. If you use <code>persistent</code> it will be permanent. Don't forget that if you use global and persistent you can still remove the objective explicitly.</p>  <p>Example</p> <pre><code>login events:welcome_message\n</code></pre>","title":"Login: <code>login</code>"},{"location":"Documentation/Objectives-List/#logout-logout","text":"<p>To complete this objective the player simply needs to leave the server. Keep in mind that running a <code>folder</code> event here will make it run in \"persistent\" mode, since the player is offline on the next tick.</p>  <p>Example</p> <pre><code>logout events:delete_objective\n</code></pre>","title":"Logout: <code>logout</code>"},{"location":"Documentation/Objectives-List/#password-password","text":"<p>This objective requires the player to write a certain password in chat. All attempts of a player will be hidden from public chat. The password consists of a prefix followed by the actual secret word: <pre><code>Solution: The Cake is a lie!     \n^prefix   ^secret word(s)\n</code></pre></p> <p>The objective's instruction string is defined as follows:</p> <ol> <li> <p>The first argument is the password, use underscore characters (<code>_</code>) instead of spaces.    The password is a regular expression. </p> </li> <li> <p>The prefix can be changed: The default (when no prefix is set) is the translated prefix from the messages.yml config in the user's language.               Note that every custom prefix is suffixed with <code>:\u2800</code>, so <code>prefix:Library_password</code> will require the user to enter <code>Library password: myfancypassword</code>.       To disable the prefix use an empty <code>prefix:</code> declaration, e.g. <code>password myfancypassword prefix: events:success</code>.    Be aware of these side effects that come with disabling the prefix:</p> <ul> <li>Nothing will be hidden on failure, so tries will be visible in chat and commands will get executed!</li> <li>If a command was used to enter the password, the command will not be canceled on success and thus still be executed!    </li> <li>This ensures that even if your password is <code>quest</code> you can still execute the <code>/quest</code> command. </li> </ul> </li> <li> <p>You can also add the <code>ignoreCase</code> argument if you want a password's capitalization to be ignored. This is especially important for regex matching.</p> </li> <li> <p>If you want to trigger one or more events when the player failed to guess the password you can use the argument <code>fail</code> with a list of events (comma separated).    With disabled prefix every command or chat message will trigger these events!</p> </li> </ol> <pre><code>objectives:\n  theBetonPassword: \"password beton ignoreCase prefix:secret fail:failEvent1,failEvent2 events:message,reward\"\n</code></pre>","title":"Password: <code>password</code>"},{"location":"Documentation/Objectives-List/#pickup-item-pickup","text":"<p>To complete this objective you need to pickup the specified amount of items.  The first argument must be the internal name of an item defined in the <code>items</code> section. This can also be a comma-separated list of multiple items. You can optionally add the <code>amount:</code> argument to specify how many of these items the player needs to pickup.  This amount is a total amount though, it does not count per each individual item. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>You can also add the <code>notify</code> keyword to display how many items are left to pickup.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of items already picked up, <code>left</code> is the amount of items still needed to pick up and <code>total</code> is the amount of items initially required.</p>  <p>Example</p> <pre><code>pickup emerald amount:3 events:reward notify\npickup emerald,diamond amount:6 events:reward notify\n</code></pre>","title":"Pickup item: <code>pickup</code>"},{"location":"Documentation/Objectives-List/#entity-kill-mobkill","text":"<p>The player must kill the specified amount of entities (living creatures). All entities work, make sure to use their correct types.</p>    Parameter Syntax Default Value Explanation     type ENTITY_TYPE,ENTITY_TYPE  A list of entities, e.g. <code>ZOMBIE,SKELETON</code>.   amount Positive Number  Amount of mobs to kill in total.   name name:text Disabled Only count named mobs. Spaces must be replaced with <code>_</code>.   marked marked:keyword Disabled Only count marked mobs. See the spawn event for more information. Supports <code>%player%</code>.   notify notify:interval Disabled Display a message to the player each time they kill a mob. Optionally with the notification interval after colon.    Example<pre><code>objectives:\n  monsterHunter: \"mobkill ZOMBIE,SKELETON,SPIDER 10 notify\" #(1)!\n  specialMob: \"mobkill PIG 1 marked:special\" #(2)!\n  bossZombie: \"mobkill ZOMBIE 1 name:Uber_Zombie\" #(3)!\n</code></pre> <ol> <li>The player must kill a zombie,skeleton or a spider to progress this objective. In total, they must kill 10 entities. Additionally, there will be a notification after each kill.</li> <li>The player must kill a pig that was spawned with the spawn event and has a marker. </li> <li>The player must kill a zombie named \"Uber Zombie\".</li> </ol>  Variable Properties     Name Example Output Explanation     amount 2 Shows the amount of mobs already killed.   left 8 Shows the amount of mobs that still need to be killed.   total 10 Shows the amount of mobs initially required to kill.","title":"Entity Kill: <code>mobkill</code>"},{"location":"Documentation/Objectives-List/#potion-brewing-brew","text":"<p>To complete this objective the player needs to brew specified amount of specified potions. The first argument is a potion ID from the items section. Second argument is amount of potions. You can optionally add <code>notify</code> argument to make the objective display progress to players, optionally with the notification interval after a colon.</p> <p>Progress will be counted for the player who last added or changed an item before the brew process completed. Only newly created potions are counted.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of potions already brewed, <code>left</code> is the amount of potions still needed to brew and <code>total</code> is the amount of potions initially required.</p>  <p>Example</p> <pre><code>brew weird_concoction 4 event:add_tag\n</code></pre>","title":"Potion brewing: <code>brew</code>"},{"location":"Documentation/Objectives-List/#sheep-shearing-shear","text":"<p>To complete this objective the player has to shear specified amount of sheep, optionally with specified color and/or name. The first, required argument is amount (integer). Optionally, you can add a <code>name:</code> argument to only count specific sheep. All underscores will be replaced by spaces - if you want to use underscores, put a <code>\\</code> before them. You can also check for the sheep's <code>color:</code> using these color names. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of sheep already sheared, <code>left</code> is the amount of sheep still needed to shear and <code>total</code> is the amount of sheep initially required.</p>  <p>Example</p> <pre><code>shear 1 name:Bob color:black\nshear 1 name:jeb\\_\n\"shear 1 name:jeb\\\\_\" #Use two backslashes if quoted\n</code></pre>","title":"Sheep shearing: <code>shear</code>"},{"location":"Documentation/Objectives-List/#smelting-smelt","text":"<p>To complete this objective the player must smelt a specified item. Note that you must define the output item, not the ingredient. The first argument is a Block Selector for the output item. The second is the amount (integer). You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of items already smelted, <code>left</code> is the amount of items still needed to smelt and <code>total</code> is the amount of items initially required.</p>  <p>Example</p> <pre><code>smelt IRON_INGOT 5 events:reward\n</code></pre>","title":"Smelting: <code>smelt</code>"},{"location":"Documentation/Objectives-List/#step-on-pressure-plate-step","text":"<p>To complete this objective the player has to step on a pressure plate at a given location. The type of plate does not matter. The first and only required argument is a location. If the pressure plate is not present at that location, the objective will not be completable and will log errors in the console.</p> <p>Step objective contains one property, <code>location</code>. It shows the exact location of the pressure plate in a string formatted like <code>X: 100, Y: 200, Z:300</code>.</p>  <p>Example</p> <pre><code>step 100;200;300;world events:done\n</code></pre>","title":"Step on pressure plate: <code>step</code>"},{"location":"Documentation/Objectives-List/#taming-tame","text":"<p>To complete this objective player must tame some amount of mobs. First argument is type, second is amount. The mob must be tamable for the objective to be valid, e.g.: <code>CAT</code>, <code>DONKEY</code>, <code>HORSE</code>, <code>LLAMA</code>, <code>PARROT</code> or <code>WOLF</code>. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of animals already tamed, <code>left</code> is the amount of animals still needed to tame and <code>total</code> is the amount of animals initially required.</p>  <p>Example</p> <pre><code>tame WOLF 2 events:wolfs_tamed\n</code></pre>","title":"Taming: <code>tame</code>"},{"location":"Documentation/Objectives-List/#player-must-jump-jump","text":"<p> Objective  \u00b7   Requires Paper</p> <p>To complete this objective the player must jump. The only argument is amount. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of jumps already done, <code>left</code> is the amount of jumps still needed and <code>total</code> is the amount of jumps initially required.</p>  <p>Example</p> <pre><code>jump 15 events:legExerciseDone\n</code></pre>","title":"Player must Jump: <code>jump</code>"},{"location":"Documentation/Objectives-List/#ride-an-entity-ride","text":"<p>This objective can be completed by riding the specified entity. <code>any</code> is also a valid input and matches any entity.</p>  <p>Example</p> <pre><code>ride horse\nride any\n</code></pre>","title":"Ride an entity: <code>ride</code>"},{"location":"Documentation/Objectives-List/#run-a-command-command","text":"<p>To complete this objective the player must execute a specified command. It can be both an existing or a new, custom command. The first argument is the command text. Use <code>_</code> in place of spaces for the command. If you need an actual <code>_</code> in your command, you must escape it using a backslash (<code>\\</code>, see example below). The command argument is case-sensitive and also supports using placeholders. The second required argument is a list of events to execute when the objective is met.</p>  <p>Example</p> <pre><code>command /warp_%player%_farms events:event1,event2\ncommand //replace_oak\\_wood events:event1,event2\n</code></pre>  <p>With this configuration, the command objective requires the player to execute <code>/warp MyName farms</code> to be completed. The command objective matches from the start of the command that was executed, therefore if the player executed <code>/warp MyName farms other arguments</code> it would still be completed.</p> <p>Optional arguments:</p> <ul> <li><code>ignoreCase</code>: If provided, instructs the objective to ignore case for the command to match.</li> <li><code>exact</code>: If provided, requires an exact command match, not just the command start.</li> <li><code>cancel</code>: If provided, the objective will cancel the execution of the command on a match. This needs to be enabled to suppress the <code>Unknown Command</code> message when using custom commands.</li> <li><code>failEvents</code>: If provided, specifies a list of events to execute if a non-matching command is run and conditions are met.</li> </ul>  <p>Complex</p> <pre><code>command /warp_%player%_farms ignoreCase exact cancel failEvents:failEvent1,failEvent2 events:event1,event2\n</code></pre>   <p>Warning</p> <p>Sometimes you want to use actual underscores in your command. These will however be replaced with spaces by default. You can \"escape\" them using backslashes: One backslash (<code>\\</code>) is required when using no quoting at all (<code>...</code>) or single quotes (<code>'...'</code>). Two backslashes are required (<code>\\\\</code>) when using double quotes (<code>\"...\"</code>).</p> <p>Examples: <code>eventName: command /enchant_@s_minecraft:aqua_affinity</code>  <code>eventName:command /enchant_@s_minecraft:aqua\\_affinity</code> <code>eventName: 'command /enchant_@s_minecraft:aqua_affinity'</code>  <code>eventName: 'command /enchant_@s_minecraft:aqua\\_affinity'</code> <code>eventName: \"command /enchant_@s_minecraft:aqua_affinity\"</code>  <code>eventName: \"command /enchant_@s_minecraft:aqua\\\\_affinity\"</code></p>","title":"Run a Command: <code>command</code>"},{"location":"Documentation/Objectives-List/#equip-armor-item-equip","text":"<p> Objective  \u00b7   Requires Paper</p> <p>The player must equip the specified quest item in the specified slot. The item must be any quest item as defined in the items section. Available slot types: <code>HEAD</code>, <code>CHEST</code>, <code>LEGS</code>, <code>FEET</code>.</p> <pre><code>equip HEAD amazing_helmet events:event1,event2\nequip CHEST amazing_armor events:event1,event2\n</code></pre>","title":"Equip Armor Item: <code>equip</code>"},{"location":"Documentation/Objectives-List/#variable-variable","text":"<p>This objective is different. You cannot complete it, it will also ignore defined events and conditions. You can start it and that's it. While this objective is active though, everything the player types in chat (and matches a special pattern) will become a variable. The pattern is <code>key: value</code>. So if the player types <code>MyFirstVariable: Hello!</code>, it will create a variable called <code>MyFirstVariable</code>, which will resolve as a <code>Hello!</code> string. These are not global variables, you can access them as objective properties. Let's say you defined this objective as <code>CustomVariable</code> in your objectives.yml file. You can access the variable in any conversation, event or condition with <code>%objective.CustomVariable.MyFirstVariable%</code> - and in the case of this example, it will resolve to <code>Hello!</code>. The player can type something else and the variable will change its value. Variables are per-player, so the value of one player's <code>MyFirstVariable</code> will be different from other players' <code>MyFirstVariable</code> values, depending on what they typed in chat. There is no limit to the amount of variables that can be created and assigned to players. To remove this objective, use <code>objective delete</code> event - there is no other way.</p> <p>You can also use <code>variable</code> event to change variables stored in this objective. There is one optional argument, <code>no-chat</code>. If you use it, the objective won't be modified  by what players type in chat which is only useful when you're also using the <code>variable</code> event.</p>  <p>Example</p> <pre><code>variable\n</code></pre>","title":"Variable: <code>variable</code>"},{"location":"Documentation/Reference/","text":"<p>This chapter describes all aspects of BetonQuest in one place. You should read it at least once to know what you're dealing with and where to search for information if you ever have any problems.</p>","title":"Reference"},{"location":"Documentation/Reference/#conditions-events-and-objectives","text":"<p>Conditions, events and objectives are defined with an \"instruction string\". It's a piece of text, formatted in a specific way, containing the instruction for the condition/event/objective. Thanks to this string they know what should they do. To define the instruction string you will need a reference, few pages below. It describes how something behaves and how it should be created. All instruction strings are defined in appropriate sections, for example all conditions are in the conditions section. The syntax used to define them looks like this: <code>name: 'the instruction string containing the data'</code>. Apostrophes are optional in most cases, you can find out when to use them by looking up \"YAML syntax\" in Google.</p>","title":"Conditions, Events and Objectives"},{"location":"Documentation/Reference/#conditions","text":"<p>Conditions are the most versatile and useful tools in creating advanced quests. They allow you to control what options are available to player in conversations, how the NPC responds or if the objective will be completed. The reference of all possible conditions is down below.</p> <p>You can negate the condition (revert its output) by adding an exclamation mark (<code>!</code>) at the beginning of it's name (in the place you use it, i.e. in conversations, not in the conditions section).</p> <p>You can use conversation variables instead of numeric arguments in conditions. If the variable fails to resolve (i.e. it will return an empty string) BetonQuest will use 0 instead.</p>","title":"Conditions"},{"location":"Documentation/Reference/#events","text":"<p>In certain moments you will want something to happen. Updating the journal, setting tags, giving rewards, all these are done using events. You define them just like conditions, by specifying a name and instruction string. You can find instruction strings to all events in the event reference. At the end of the instruction string you can add <code>conditions:</code> or <code>condition:</code> (with or without <code>s</code> at the end) attribute followed by a list of condition names separated by commas, like <code>conditions:angry,!quest_started</code>. This will make an event fire only when these conditions are met.</p> <p>You can use conversation variables instead of numeric arguments in events. If the variable fails to resolve (i.e. it will return an empty string) BetonQuest will use 0 instead.</p>","title":"Events"},{"location":"Documentation/Reference/#objectives","text":"<p>Objectives are the main things you will use when creating complex quests. You start them with a special event, <code>objective</code>. You define them in the objectives.yml file, just as you would conditions or events. At the end of the instruction string you can add conditions and events for the objective. Conditions will limit when the objective can be completed (e.g. killing zombies only at given location in quest for defending city gates), and events will fire when the objective is completed (e.g. giving a reward, or setting a tag which will enable collecting a reward from an NPC). You define these like that: <code>conditions:con1,con2 events:event1,event2</code> at the end of instruction string . Separate them by commas and never use spaces! You can also use singular forms of these arguments: <code>condition:</code> and <code>event:</code>.</p> <p>If you want to start an objective right after it was completed (for example <code>die</code> objective: when you die, teleport you to a special spawnpoint and start <code>die</code> objective again), you can add <code>persistent</code> argument at the end of an instruction string. It will prevent the objective from being completed, although it will run all its events. To cancel such objective you will need to use <code>objective delete</code> event.</p> <p>Objectives are loaded at start-up, but they do not consume resources without player actually having them active. This means that if you have 100 objectives defined, and 20 players doing one objective, 20 another players doing second objective, and the rest objectives are inactive (no one does them), then only 2 objectives will be consuming your server resources, not 100, not 40.</p>","title":"Objectives"},{"location":"Documentation/Reference/#packages","text":"<p>All quests you create are organized into packages. A single package can contain one or multiple quests - it's up to your liking. It is very important to have a good understand of packages. Read this section carefully.</p>","title":"Packages"},{"location":"Documentation/Reference/#structure","text":"<p>A package is a folder with a package.yml file. It must be placed inside the <code>BetonQuest/QuestPackages</code> directory.  Additionally, you can create extra files or sub-folders inside a package to organize your quest the way you want. Sub-folders of packages that contain a package.yml are separate packages, they do not belong to the surrounding package in any way. </p> <p>It is allowed to create folders that are not packages anywhere in your <code>QuestPackages</code> directory. </p> <p>Let's take a look at a few examples:</p>  <p>Structure Examples</p> <p>Every quest package is surrounded with a blue box.</p> Simple PackageComplex PackageNested Packages   <p>A very simple package. It's defined by the package.yml and has two additional files.      </p>   <p>The package <code>storyLine</code> is defined by the package.yml. It contains two sub-folders, both of them (including their files) are part of the package. </p>   <p>The package <code>weeklyQuests</code> is defined by the package.yml. It contains two sub-folders, they are not part of the package. This is the case because they have their own package.yml files. Because of that they are  separate packages. </p>","title":"Structure"},{"location":"Documentation/Reference/#defining-features","text":"<p>You can freely define features (events, conversations, items etc.) in all files  of a quest package. However, they need to be defined in a section that defines their type.</p> <p>The names of these features must be unique in that package, no matter which file they are in.</p>  Example <pre><code>events:\n  teleportPlayer: \"...\"\n\nconditions:\n  hasDiamondArmor: \"...\"\n\nobjectives:\n  killCrepper: \"...\"\n\nitems:\n  legendarySword: \"...\"\n\nconversations:\n  bobsConversation:\n    quester: Bob\n    #...\n\nmenus:\n  homeMenu:\n    height: 3\n    #...\n</code></pre>","title":"Defining features"},{"location":"Documentation/Reference/#working-across-packages","text":"<p>Accessing features from other packages can be very helpful to link quests together. All events, conditions, objectives, items and conversations can be accessed. Just journal entries only work in their own package. </p> <p>You never need to access a specific file since feature names are unique within a package.</p>","title":"Working across Packages"},{"location":"Documentation/Reference/#top-level-packages","text":"<p>You can access top-level packages (placed directly in <code>QuestPackages</code>) by prefixing the feature's name with a dot and the package name. </p>  Example <p>Let's assume you have a <code>rewards</code> package that contains player reward events. Let's run the <code>easyMobObjective</code> event of the <code>rewards</code> package from another package:</p> <ol> <li>Add a dot (<code>.</code>) before the event name  <code>.easyMobObjective</code></li> <li>Add the package name in front of the dot  <code>rewards.easyMobObjective</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 5 events:rewards.easyMobObjective\"\n</code></pre> Note that this only works for top-level packages (the <code>rewards</code> package is placed directly in the <code>QuestPackages</code> folder). Check the next paragraph to see how it's done for other packages.</p>","title":"Top-Level Packages"},{"location":"Documentation/Reference/#packages-in-sub-folders","text":"<p>You can access packages in sub-folders by prefixing the feature's name with the package name and the path from the <code>QuestPackages</code> folder to the package.</p>  Example One Nested PackageMultiple Nested Packages   <p>Let's assume you have a <code>dailyQuests</code> package that contains a <code>dailyQuestOne</code> package. The <code>dailyQuests</code> package is located in the <code>QuestPackages</code> folder. Let's run the <code>startDailyQuest</code> event of the <code>dailyQuestOne</code> package from a third package:</p> <ol> <li>Combine the event name with the package name  <code>dailyQuestOne.startDailyQuest</code></li> <li>Add the path from the <code>QuestPackages</code> folder to the <code>dailyQuestOne</code> package seperated by dashes (<code>-</code>).  <code>dailyQuests-dailyQuestOne.startDailyQuest</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 5 events:dailyQuests-dailyQuestOne.startDailyQuest\"\n</code></pre></p>   <p>Let's assume you have a <code>dailyQuests</code> package that contains a <code>dailyQuestOne</code> package. The <code>dailyQuests</code> package is contained inside a folder called <code>repeatable</code> which is located in the <code>QuestPackages</code> folder. Let's run the <code>startDailyQuest</code> event of the <code>dailyQuestOne</code> package from a third package:</p> <ol> <li>Combine the event name with the package name  <code>dailyQuestOne.startDailyQuest</code></li> <li>Add the path from the <code>QuestPackages</code> folder to the <code>dailyQuestOne</code> package seperated by dashes (<code>-</code>).  <code>repetable-dailyQuests-dailyQuestOne.startDailyQuest</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 5 events:repetable-dailyQuests-dailyQuestOne.startDailyQuest\"\n</code></pre></p>","title":"Packages in Sub-folders"},{"location":"Documentation/Reference/#relative-paths","text":"<p>You can specify relative paths to a package instead of full paths. The underscore (<code>_</code>) means \"one folder up\" from  the current packages package.yml. In turn, a leading dash (<code>-</code>) combined with a folder name navigates  \"one folder down\" into the given folder. Each package in the path must be seperated by a dash.</p> <p>This can be useful when distributing or moving packages. Instead of rewriting every package path to match the current location, relative paths will still work.</p>  Example Going UpwardsGoing Downwards   <p>Let's assume you have a <code>weeklyQuests</code> folder that contains a <code>weeklyQuestOne</code> and a <code>weeklyQuestTwo</code> package. Let's run the <code>startQuestTwo</code> event of the <code>weeklyQuestTwo</code> package from the <code>weeklyQuestOne</code> package.</p> <ol> <li>Combine the event name with the package name  <code>weeklyQuestTwo.startQuestTwo</code></li> <li>Add the path from the current package.yml to the folder the package of interested lies in. This is done using underscores (\"go one folder up\"). A dash must be added after each underscore (<code>-</code>).  <code>_-weeklyQuestTwo.startQuestTwo</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 50 events:_-weeklyQuestTwo.startQuestTwo\"\n</code></pre></p>   <p>Let's assume you have a <code>weeklyQuests</code> package that contains a <code>weeklyQuestTwo</code> package which contains another package called <code>subQuest</code>. Let's run the <code>startQuest</code> event of the <code>subQuest</code> package from the <code>weeklyQuests</code> package.</p> <ol> <li>Combine the event name with the package name  <code>subQuest.startQuest</code></li> <li>Add the path from the current package.yml to the folder the package of interest lies in. Package names  must be seperated by dashes (<code>-</code>). The path must also be started with a dash to signal \"from the current package downwards\".  <code>-weeklyQuestTwo-subQuest.startQuest</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 50 events:-weeklyQuestTwo-subQuest.startQuest\"\n</code></pre></p>","title":"Relative paths"},{"location":"Documentation/Reference/#disabling-packages","text":"<p>Each package can be disabled/enabled in the package.yml file, by setting <code>enabled</code> to <code>true</code> or <code>false</code>.</p> <pre><code>#Add this to the package.yml\nenabled: false\n</code></pre>","title":"Disabling Packages"},{"location":"Documentation/Reference/#unified-location-formating","text":"<p>Whenever you want to define some location in your events, conditions, objectives or any other things, you will define it with this specific format. The location consists of 2 things: base and vector. Only the base is always required.</p>","title":"Unified location formating"},{"location":"Documentation/Reference/#base-location","text":"<p>The base is a core location. There are two types: absolute coordinates and variables. Absolute coordinates are defined like <code>100;200;300;world</code>, where <code>100</code> is X coordinate, <code>200</code> is Y, <code>300</code> is Z and <code>world</code> is the name of the world. These can have decimal values. If you want you can also add two more numbers at the end, yaw and pitch  (these are controlling the rotation, for example in teleportation event, both are needed if you decide to add them; example: <code>0.5;64;0.5;world;90;-270</code>).</p>","title":"Base Location"},{"location":"Documentation/Reference/#variables-as-base-location","text":"<p>To use a variable as the location's base it must resolve to valid absolute coordinates. An example of such variable  is <code>%location%</code>, which shows player's exact location. Simply place it instead of coordinates. There is one rule though: you can't use variable base types in events running without players (for example static events or the ones run from folder event after the player left the server). BetonQuest won't be able to resolve the location variable without the player!</p>","title":"Variables as Base Location"},{"location":"Documentation/Reference/#vectors","text":"<p>The vector is a modification of the location. Vectors look like <code>-&gt;(10;2.5;-13)</code> and are added to the end of the base. This will modify the location, X by 10, Y by 2.5 and Z by -13. For example, location written as <code>100;200;300;world_nether-&gt;(10;2.5;-13)</code> will generate a location with X=110, Y=202.5 and Z=287 in the world <code>world_nether</code>.</p>","title":"Vectors"},{"location":"Documentation/Reference/#global-variables","text":"<p>You can insert a global variable in any instruction string. It looks like this: <code>$beton$</code> (and this one would be called \"beton\"). When the plugin loads that instruction string it will replace those variables with values assigned to them in package.yml file before the instruction string is parsed. This is useful for example when installing a package containing a WorldEdit schematic of the quest building. Instead of going through the whole code to set those locations, names or texts you will only have to specify a few variables (that is, of course, if the author of the package used those variables properly in his code).</p> <p>Note that these variables are something entirely different than conversation variables. Global ones use <code>$</code> characters and conversation ones use <code>%</code> characters. The former is resolved before the instruction string is parsed while the latter is resolved when the quests are running, usually on a per-player basis.</p> <pre><code>variables:\n  village_location: 100;200;300;world\n  village_name: Concrete\n</code></pre>","title":"Global variables"},{"location":"Documentation/Reference/#canceling-quests","text":"<p>If you want to let your players cancel their quest there is a function for that. In package.yml file there is <code>cancel</code> branch. You can specify there quests, which can be canceled, as well as actions that need to be done to actually cancel them. The arguments you can specify are:</p> <ul> <li><code>name</code> - this will be the name displayed to the player. All <code>_</code> characters will be converted to spaces. If you want to include other languages you can add here additional options (<code>en</code> for English etc.)</li> <li><code>conditions</code> - this is a list of conditions separated by commas. The player needs to meet all those conditions to be able to cancel this quest. Place there the ones which detect that the player has started the quest, but he has not finished it yet. </li> <li><code>objectives</code> - list of all objectives used in this quest. They will be canceled without firing their events.</li> <li><code>tags</code> - this is a list of tags that will be deleted. Place here all tags that you use during the quest.</li> <li><code>points</code> - list of all categories that will be entirely deleted.</li> <li><code>journal</code> - these journal entries will be deleted when canceling the quest.</li> <li><code>events</code> - if you want to do something else when canceling the quest (like punishing the player), list the events here.</li> <li><code>loc</code> - this is a location to which the player will be teleported when canceling the quest (defined as in teleport event);</li> </ul> <p>To cancel the quest you need to open your backpack and select a \"cancel\" button. There will be a list of quests which can be canceled. Just select the one that interests you and it will be canceled.</p>","title":"Canceling quests"},{"location":"Documentation/Reference/#global-objectives","text":"<p>If you want a objective to be active for every player right after joining you can create a global objective. This is done by adding <code>global</code> argument to the instruction of the objective. When you then reload BetonQuest it is started for all online players and also will be started for every player who joins.</p> <p>To prevent the objective from being started every time a player joins a tag is set for the player whenever the objective is started and as long as the player has the tag the objective wont be started again if the player joins. These tags follow syntax <code>&lt;package&gt;.global-&lt;id&gt;</code>, where <code>&lt;id&gt;</code> is the objectives id and <code>&lt;package&gt;</code> the package where the objective is located.</p> <p>Possible use cases would be a quest which starts if a player reaches a specific location or breaks a specific block.</p> <p>Example: <pre><code>start_quest_mine: 'location 100;200;300;world 5 events:start_quest_mine_folder global'\n</code></pre></p>","title":"Global objectives"},{"location":"Documentation/Reference/#journal","text":"<p>The journal is a book in which all your adventures are described. You can obtain it by typing /j command or /b and selecting it from backpack. You cannot put it into any chests, item frames and so on. If you ever feel the need to get rid of your journal, just drop it - it will return to your backpack. The journal is updated with the <code>journal</code> event, and the text inside is defined in the journal section. If you update these texts and reload the plugin, all players' journals will reflect changes. Colors in the journal can be altered in config.yml. The entries can use color codes, but the color will be lost between pages.</p> <p>The journal by default appears in the last slot of the hotbar. If you want to change that use <code>default_journal_slot</code> option in config.yml, experiment with different settings until you're ok with it.</p> <p>If you want to translate the entry do the same thing as with conversation option - go to new line, add language ID and the journal text for every language you want to include.</p> <p>You can control behavior of the journal in config.yml file, in <code>journal</code> section. <code>chars_per_page</code> specifies how many characters will be placed on a single page. If you set it too high, the text will overflow outside of the page, too low, there will be too much pages. <code>one_entry_per_page</code> allows you to place every entry on a single page. The <code>chars_per_page</code> setting is in this case ignored, BetonQuest will put entire entry on that page. <code>reversed_order</code> allows you to reverse order of entries and <code>hide_date</code> lets you remove the date from journal entries.</p> <p>You can control colors in the journal in <code>journal_colors</code> section in config.yml: <code>date</code> is a color of date of every entry, <code>line</code> is a color of lines separating entries and <code>text</code> is just a color of a text. You need to use standard color codes without <code>&amp;</code> (eg. <code>'4'</code> for dark red).</p> <p>You can also add a main page to the journal. It's a list of texts, which will show only if specified conditions are met. You can define them in the package.yml file, in the <code>journal_main_page</code> section:</p> <pre><code>journal_main_page:\n  title:\n    priority: 1\n    text:\n      en: '&amp;eThe Journal'\n      pl: '&amp;eDziennik'\n    conditions: 'quest_started,!quest_completed'\n</code></pre> <p>Each string can have text in different languages, list of conditions separated by commas (these must be met for the text to show in the journal) and <code>priority</code>, which controls the order of texts. You can use conversation variables in the texts, but they will only be updated when the player gets his journal with the /journal command. Color codes are supported.</p> <p>If you want your main page take a separate page (so entries will be displayed on next free page), set <code>full_main_page</code> in config.yml to \"true\". If you want to manually wrap the page, use the pipe <code>|</code> character. Use \\n to go to a new line.</p>","title":"Journal"},{"location":"Documentation/Reference/#tags","text":"<p>Tags are little pieces of text you can assign to player and then check if he has them. They are particularly useful to determine if player has started or completed quest. They are given with <code>tag</code> event and checked with <code>tag</code> condition. All tags are bound to a package, so if you add <code>beton</code> tag from within a package named <code>example</code>, the tag will look like <code>example.beton</code>. If you're checking for <code>beton</code> tag from within <code>example</code> package, you're actually checking for <code>example.beton</code>. If you want to check a tag from another package, then you just need to prefix it's name with that package, for example <code>quest.beton</code>.</p>","title":"Tags"},{"location":"Documentation/Reference/#points","text":"<p>Points are like tags, but with amount. You can earn them for doing quest, talking with NPC\u2019s, basically for everything you want. You can also take the points away, even to negative numbers. Points can be divided to categories, so the ones from beton category won\u2019t mix with points from quests group. Of course then you can check if player has (or doesn't have) certain amount and do something based on this condition. They can be used as counter for specific number of quest done, as a reputation system in villages and even NPC\u2019s attitude to player.</p>","title":"Points"},{"location":"Documentation/Reference/#npcs","text":"<p>Conversations can be assigned to NPCs created with Citizens. You do it in the <code>npcs</code> section:</p> <pre><code>npcs:\n  '0': innkeeper\n  '4': woodcutter\n</code></pre> <p>The first string is the ID of the NPC (don't try to put Citizens NPC's name here, it must be the ID), second one is the corresponding conversation name as defined in the <code>conversations</code> section. To acquire the NPCs ID select the NPC and type <code>/npc</code> or <code>/npc id</code>. </p> <p>You can assign the same conversation to multiple NPCs.</p>  <p>Note</p> <p>The Citizens ID must be enclosed in quotes.</p>","title":"NPCs"},{"location":"Documentation/Reference/#items","text":"<p>Items in BetonQuest are defined in the items section. Each item has an instruction string, similarly to events, conditions etc. Basic syntax is very simple:</p> <pre><code>item: BLOCK_SELECTOR other arguments...\n</code></pre> <p>BLOCK_SELECTOR is a type of the item. It doesn't have to be all in uppercase. Other arguments specify data like name of the item, lore, enchantments or potion effects. There are two categories of these arguments: the ones you can apply to every item and type specific arguments. Examples would be name (for every item type) and text (only in books).</p> <p>Every argument is used in two ways: when creating an item and when checking if some existing item matches the instruction. The first case is pretty straightforward - BetonQuest takes all data you specified and creates an item, simple as that. Second case is more complicated. You can require some property of the item to exist, other not to exist, or skip this property check altogether. You can also accept an item only if some value (like enchantment level) is greater/less than x. You can use wildcards in the BLOCK_SELECTOR to match multiple types of items.</p> <p>These are arguments that can be applied to every item:</p> <ul> <li> <p><code>name</code> - the display name of the item. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. If you want to specifically say that the item must not have any name, use <code>none</code> keyword.</p> </li> <li> <p><code>lore</code> - text under the item's name. Default styling of lore is purple and italic. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. To make a new line use <code>;</code> character. If you require the item not to have lore at all, use <code>none</code> keyword. By default lore will match only if all lines are exactly the same. If you want to accept all items which contain specified lines (and/or more lines), add <code>lore-containing</code> argument to the instruction string.</p> </li> <li> <p><code>enchants</code> - a list of enchantments and their levels. Each enchantment consists of these things, separated by colons:</p> <ul> <li>name</li> <li>level (a positive number)</li> </ul> <p>For example <code>damage_all:3</code> is Sharpness III. You can specify additional enchantments by separating them with commas.</p> <p>You can require the item not to have any enchantments by using <code>none</code> keyword. You can also add <code>+</code>/<code>-</code> character to the enchantment level to make the check require levels greater/less (and equal) than specified. If you don't care about the level, replace the number with a question mark.</p> <p>By default, all specified enchantments are required. If you want to check if the item contains a matching enchantment (and/or more enchants), add <code>enchants-containing</code> argument to the instruction string. Each specified enchantment will be required on the item by default unless you prefix its name with <code>none-</code>, for example <code>none-knockback</code> means that the item must not have any knockback enchantment. Do not use <code>none-</code> prefix unless you're using <code>enchants-containing</code> argument, it doesn't make any sense and will break the check!</p> </li> <li> <p><code>unbreakable</code> - this makes the item unbreakable. You can specify it either as <code>unbreakable</code> or <code>unbreakable:true</code> to require an item to be unbreakable. If you want to check if the item is breakable, use <code>unbreakable:false</code>.</p> </li> <li> <p><code>custom-model-data</code> - set the custom model data of the item. You have to specify the data value: <code>custom-model-data:3</code>. To check that an item does not have custom model data set <code>no-custom-model-data</code>.</p> </li> </ul> <p>Examples:</p> <pre><code>name:&amp;4Sword_made_of_Holy_Concrete\nname:none\nlore:&amp;cOnly_this_sword_can_kill_the_Lord_Ruler\nlore:&amp;2Quest_Item lore-containing\nlore:none\nenchants:damage_all:3+,none-knockback\nenchants:power:? enchants-containing\nenchants:none\nunbreakable\nunbreakable:false\n</code></pre> <p>These are the arguments that can be applied only to specific item types:</p>","title":"Items"},{"location":"Documentation/Reference/#books","text":"<p>This applies to a written book and a book and quill.</p> <ul> <li> <p><code>title</code> - the title of a book. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. If you want to specifically say that the book must not have any title, use <code>none</code> keyword.</p> </li> <li> <p><code>author</code> - the author of a book. All underscores will be replaced with spaces, you cannot use color codes here. If you want to specifically say that the book must not have any author, use <code>none</code> keyword.</p> </li> <li> <p><code>text</code> - the text of the book. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. The text will wrap to the next page if amount of characters exceeds <code>journal.chars_per_page</code> setting in config.yml. If you want to manually wrap the page, use <code>|</code> character. To go to new line use <code>\\n</code>. Keep in mind that you can't use any spaces here, you must only use underscores (<code>_</code>). This needs to be a single argument, even if it's really long. If you don't want the book to have any text, use <code>none</code> keyword instead.</p> </li> </ul> <p>Examples:</p> <pre><code>title:Malleus_Maleficarum\nauthor:&amp;eGallus_Anonymus\ntext:Lorem_ipsum_dolor_sit_amet,\\nconsectetur_adipiscing_elit.|Pellentesque_ligula_urna(...)\n</code></pre>","title":"Books"},{"location":"Documentation/Reference/#potions","text":"<p>This applies to potions, splash potions and lingering potions.</p> <ul> <li> <p><code>type</code> - type of a potion. Here's the list of possible types. Do not mistake this for a custom effect, this argument corresponds to the default vanilla potion types.</p> </li> <li> <p><code>extended</code> - extended property of the potion (you can achieve it in-game by adding redstone). It can be specified as <code>extended</code> or <code>extended:true</code>. If you want to check the potion that is NOT extended, use <code>extended:false</code>.</p> </li> <li> <p><code>upgraded</code> - upgraded property of the potion (you can achieve it in-game by adding glowstone). It can be specified as <code>upgraded</code> or <code>upgraded:true</code>. If you want to check the potion that is NOT upgraded, use <code>upgraded:false</code>.</p> </li> <li> <p><code>effects</code> - a list of custom effects. These are independent of the potion type. The effects must be separated by commas. Each effect consists of these things, separated by colons:</p> <ul> <li>type (this is different stuff that the link above!)</li> <li>power</li> <li>duration (in seconds)</li> </ul> <p>An example would be <code>WITHER:2:30</code>, which is a wither effect of level 2 for 30 seconds.</p> <p>If you want to target only potions without custom effects, use <code>none</code> keyword. You can target potions with level and time greater/less (and equal) than specified with <code>+</code>/<code>-</code> character after the number. If you don't care about the level/time, you can replace them with question mark.</p> <p>By default, all specified effects are required. If you want to check if the potion contains these effects among others, add <code>effects-containing</code> argument to the instruction string. Now if you want to make sure the potion doesn't contain a specific effect, prefix the effect name with <code>none-</code>. Don't use that prefix unless you're also using <code>effects-containing</code> argument, it doesn't make any sense and it will break the check.</p> </li> </ul> <p>Examples:</p> <pre><code>type:instant_heal\nextended\nupgraded:false\neffects:poison:1+:?,slow:?:45-\neffects:none-weakness,invisibility:?:? effects-containing\n</code></pre>","title":"Potions"},{"location":"Documentation/Reference/#heads","text":"<p>This applies to human heads.</p> <ul> <li><code>owner</code> - this is the name of the head owner. It will not use color codes nor replace underscores with spaces. If you want to check for heads without any owner, use <code>none</code> keyword.</li> </ul> <p>Examples:</p> <pre><code>owner:Co0sh\nowner:none\n</code></pre>","title":"Heads"},{"location":"Documentation/Reference/#leather-armor","text":"<p>This applies to all parts of leather armor.</p> <ul> <li><code>color</code> - this is the color of the armor piece. It can be either one of these values, a hexadecimal RGB value prefixed with <code>#</code> character or its decimal representation without the prefix. You can also check if the armor piece doesn't have any color with <code>none</code> keyword.</li> </ul> <p>Examples:</p> <pre><code>color:light_blue\ncolor:#ff00ff\ncolor:none\n</code></pre>","title":"Leather armor"},{"location":"Documentation/Reference/#fireworks","text":"<p>This applies to fireworks.</p> <ul> <li> <p><code>firework</code> - this is a list of effects of the firework rocket. They are separated by commas. Each effect consists of these things separated by colons:</p> <ul> <li>effect type</li> <li>a list of main colors (refer to leather armor colors above for syntax) separated by semicolons</li> <li>a list of fade colors</li> <li><code>true</code>/<code>false</code> keyword for trail effect</li> <li><code>true</code>/<code>false</code> keyword for flicker.</li> </ul> <p>Note the separation characters, this is important: commas separate effects, colons separate effect properties, semicolons separate colors.</p> <p>If you want to target fireworks without any effects, use <code>none</code> keyword. If you want to target any effect type, use question mark instead of the effect name. If you don't want the effect to have any main/fade colors, use <code>none</code> keyword in the place of colors. If you don't care about main/fade colors, use question marks in that place. If you don't care about trail/flicker effect, use question marks instead of <code>true</code>/<code>false</code> keyword.</p> <p>By default, the check will require all specified effects to be present on the firework. You can check if the firework contains specified effects among others by adding <code>firework-containing</code> argument to the instruction string. To match the item which must not have an effect, prefix the effect name with <code>none-</code> keyword. Don't use that prefix unless you're also using <code>firework-containing</code> argument, it doesn't make any sense and will break the check.</p> </li> <li> <p><code>power</code> - flight duration of the firework, in levels. You can use <code>+</code>/<code>-</code> character to target greater/less (and equal) levels.</p> </li> </ul> <p>Examples:</p> <pre><code>firework:ball:red;white:green;blue:true:true,ball_large:green;yellow:pink;black:false:false\nfirework:burst:?:none:?:? firework-containing\nfirework:none-creeper firework-containing\nfirework:none\npower:3\npower:2+\n</code></pre>","title":"Fireworks"},{"location":"Documentation/Reference/#firework-charges","text":"<p>This applies to firework charges.</p> <ul> <li><code>firework</code> - this is almost the same as fireworks. You can only specify a single effect and the <code>power</code> argument has no effects.</li> </ul>","title":"Firework charges"},{"location":"Documentation/Reference/#backpack","text":"<p>Sometimes you'll want some items to be persistent over death. The quest could be broken if the player loses them. Such an item wouldn't be dropped (on death), instead it would be placed in the player's backpack.</p> <p>You can add a specific line to an item's lore to make it persistent. It's <code>&amp;2Quest_Item</code> (<code>_</code> is a space in an item's definition) if your default language is english. The translation of the line can be found in messages.yml if a different default language is configured. It's also possible to change the translation. </p> <p>Note that this must be an entirely new line in the lore!   Example: <pre><code>important_sword: \"DIAMOND_SWORD name:Sword_for_destroying__The_Concrete lore:Made_of_pure_Mithril;&amp;2Quest_Item\"\n</code></pre></p> <p>The backpack can be opened with the /backpack command. The inventory window will open, displaying your stored items. The first slot is always the journal, and if you get it, the slot will stay empty. You can transfer quest items back and forth between inventories by clicking on them. Left click will transfer just one item, right click will try to transfer all items. Normal items cannot be stored into the backpack, so it's not an infinite inventory.</p> <p>If you will ever have more than one page of quest items, the buttons will appear. You can customize those buttons by creating <code>previous_button</code> and <code>next_button</code> items in the items section. Their name will be overwritten with the one defined in messages.yml.</p> <p>Quest items cannot be dropped in any way other than using them. This way you can create a quest for eating cookies by giving the player a stack of cookies flagged as quest items and not continuing until there are no more cookies in his inventory/backpack. The player cannot drop the cookies, so he must eat every one of them to complete the quest.</p> <p>Don't worry if the item-dropping filter isn't working for your items when you're in creative mode - it's not a bug. It's a feature. Creative-mode players should be able to easily put quest items in containers like TreasureChests.</p>","title":"Backpack"},{"location":"Documentation/Reference/#party","text":"<p>Parties are very simple. So simple, that they are hard to understand if you already know some other party system. Basically, they don't even have to be created before using them. Parties are defined directly in conditions/events (<code>party</code> event, <code>party</code> conditions, check them out in the reference lists below). In such instruction strings the first argument is a number - range. It defines the radius where the party members will be looked for. Second is a list of conditions. Only the players that meet those conditions will be considered as members of the party. It's most intuitive for players, as they don't have to do anything to be in a party - no commands, no GUIs, just starting the same quest or having the same item - you choose what and when makes the party.</p> <p>To understand better how it works I will show you an example of <code>party</code> event. Let's say that every player has an objective of pressing a button. When one of them presses it, this event is fired:</p> <pre><code>party_reward: party 50 quest_started cancel_button,teleport_to_dungeon\n</code></pre> <p>Now, it means that all players that: are in radius of 50 blocks around the player who pressed the button AND meet <code>quest_started</code> condition will receive <code>cancel_button</code> and <code>teleport_to_dungeon</code> events. The first one will cancel the quest for pressing the button for the others (it's no longer needed), the second one will teleport them somewhere. Now, imagine there is a player on the other side of the world who also meets <code>quest_started</code> condition - he won't be teleported into the dungeon, because he was not with the other players (not in 50 blocks range). Now, there were a bunch of other players running around the button, but they didn't meet the <code>quest_started</code> condition. They also won't be teleported (they didn't start this quest).</p>","title":"Party"},{"location":"Documentation/Reference/#block-selectors","text":"<p>When specifying a way of matching a block, a <code>block selector</code> is used.</p>","title":"Block Selectors"},{"location":"Documentation/Reference/#format","text":"<p>The format of a block selector is: <code>namespace:material[state=value,...]</code></p> <p>Where:</p> <ul> <li> <p><code>namespace</code> - (optional) The material namespace. If left out then it will be assumed to be 'minecraft'.    Can be a regex.</p> </li> <li> <p><code>material</code> - The material the block is made of. All materials can be found in   Spigots Javadocs.    It can be a regex.   If the regex ends with square brackets you have to add another pair of empty square brackets even if you don't want to    use the state argument (<code>[regex][]</code>).   Instead of using a regex to match multiple materials you can also define a tag.   Every tag matches a special group of blocks or items that can be grouped together logically. They can be used using this format <code>:blocks:flowers</code> or <code>minecraft:blocks:flowers</code>.   Be aware that a tag always starts with either <code>:</code> or a namespace. </p> </li> <li> <p><code>state</code> - (optional) The block states can be provided in a comma separated <code>key=value</code> list surrounded by square brackets.    You can look up states in the Minecraft wiki.    Any states left out will be ignored when matching.    Values can be a regex.</p> </li> </ul> <p>Examples:</p> <ul> <li> <p><code>minecraft:stone</code> - Matches all blocks of type STONE</p> </li> <li> <p><code>redstone_wire</code> - Matches all blocks of type REDSTONE_WIRE</p> </li> <li> <p><code>redstone_wire[power=5]</code> - Matches all blocks of type REDSTONE_WIRE and which have a power of 5</p> </li> <li> <p><code>redstone_wire[power=5,facing=1]</code> - Matches all blocks of type REDSTONE_WIRE and which have both a power of 5 and are facing 1</p> </li> <li> <p><code>.*_LOG</code> - Matches all LOGS</p> </li> <li> <p><code>.*</code> - Matches everything</p> </li> <li> <p><code>.*[waterlogged=true]</code> - Matches all waterlogged blocks</p> </li> <li> <p><code>minecraft:blocks:flowers</code> - Matches all flowers</p> </li> <li> <p><code>:blocks:crops[age=0]</code> - Matches all crops with an age of 0 meaning, not grown / just planted</p> </li> </ul>","title":"Format"},{"location":"Documentation/Reference/#setting-behaviour","text":"<p>A block selector with a regex or tag as it's material name results in a random block out of all blocks that match that regex or tag. You cannot use a regex in block states when the block selector is used for placing blocks.</p>","title":"Setting behaviour"},{"location":"Documentation/Reference/#matching-behaviour","text":"<p>The block state will ignore all additional block states on the block it's compared with by default. Example: <code>fence[facing=north] matches fence[facing=north] and fence[facing=north,waterlogged=true]</code> You can add an <code>exactMatch</code> argument if you only want to match blocks that exactly match the block state.  A regex is allowed in any block state value when the block selector is used to match blocks.</p>","title":"Matching behaviour"},{"location":"Documentation/Reference/#hiding-players","text":"Sorry, your browser doesn't support embedded videos.  <p>You can also hide players for specific players in the <code>player_hider</code> section of your package. When the <code>source_player</code> meets the conditions, every player that meets the <code>target_player</code> conditions will be completely hidden from them.  This is really useful if you want a lonely place on your server  or your quests break when multiple players can see or affect each other. You can configure the interval which checks the conditions in the config.yml.</p> <p>Special behaviour:</p> <ul> <li>A player that meets the <code>source_player</code>conditions can no longer be pushed by other players.</li> <li>By leaving the e.g. <code>source_player</code> argument empty it will match all players.</li> </ul> <pre><code>player_hider:\n  example_hider:  #All players in a special region cannot see any other players in that region. If a player is outside the region, they can still see the `target_player`.\n    source_player: in_StoryRegion\n    target_player: in_StoryRegion\n  another_hider: #No one can see any players inside a secret room.\n    #The source_player argument is left out to match all players.    \n    target_player: in_secretRoom\n  empty_hider: #in_Lobby is a world condition. Therefore, the lobby world appears empty for everyone that is in it.\n    source_player: in_Lobby\n    #The target_player argument is left out to match all players.\n</code></pre>","title":"Hiding Players"},{"location":"Documentation/Reference/#regex-regular-expressions","text":"<p>A regular expression is a sequence of characters that specifies a search pattern for text. It's used in BetonQuest to check if game objects match a user-defined input. For example, Block Selectors use a regex to match multiple materials or block states. You can also use regular expressions in the  variable condition or the  password objective to match player names, item names, etc. These expressions are a very powerful tool, but can be confusing at first.</p>","title":"Regex (Regular Expressions)"},{"location":"Documentation/Reference/#common-use-cases","text":"Use Case Regex     A specific text e.g. <code>STONE</code> <code>STONE</code>   A text starting with <code>STONE</code> <code>STONE.*</code>   A text ending with <code>_LOG</code> <code>.*_LOG</code>   A specific number e.g. <code>42</code> <code>^42$</code>   A specific range of numbers, e.g. any number between 0 and 99 <code>[0-9]{1,2}</code>   Positive numbers only <code>^\\d+$</code>   Negative numbers only <code>^-\\d+$</code>   Any number <code>[-+]?[0-9]+\\.?[0-9]+</code>","title":"Common Use Cases"},{"location":"Documentation/Reference/#more-complex-use-cases","text":"<p>If you want to use complex patterns you must learn more about regular expressions. There are countless resources online, for example you could read this  cheatsheet.</p>","title":"More complex use cases"},{"location":"Documentation/Schedules/","text":"<p>Schedules allow you to run events periodically at specific times for the entire server.</p>","title":"Schedules"},{"location":"Documentation/Schedules/#static-events","text":"<p>When running events from a schedule it is unclear how events should behave: Should an event be run once for each player on the server? For events like <code>setblock</code> this would mean that the event is executed 20 times if 20 players are online. </p> <p>This problem is solved by dividing all events into two categories:</p> <ol> <li> <p>Static events are not tied to a specific player, meaning they can be run independent. <code>setblock</code> for example always changes the same block, no matter for who it was called.    When run by a schedule a static event will fire exactly once.</p> </li> <li> <p>Non-static events are always tied to a specific player.    They will be run once for each online player.</p> </li> </ol>  <p>Warning</p> <p>Static events used by schedules cannot have conditions defined, as the plugin cannot check any condition for a player who is offline.</p>  <p>All static events have a static flag in the docs, so you can easily distinguish them from non-static ones.</p>  <p>Example</p> <p></p> <p>persistent, static (1)</p> <p>Changes the block at the given position.</p> <ol> <li>This flag states that <code>setblock</code> can be used as static event.</li> </ol>","title":"Static EventsSet Block: <code>setblock</code>"},{"location":"Documentation/Schedules/#realtime-schedules","text":"<p>Realtime schedules are, as the name already says, schedules that run at a specific real world time, for example at 12 o'clock each day. Do not confuse these with Minecraft's ingame time!</p> <p>The time is provided by the system time of the computer your minecraft server is running on, in the systems time zone.  </p>","title":"Realtime schedules"},{"location":"Documentation/Schedules/#daily-realtime-schedule-realtime-daily","text":"<p>A super simple to use type of schedule, but also limited in its functionality. Just specify the time of the day when the events should run, and they will run every day at that same time.</p> Simple ExampleFull Example   <pre><code>schedules:\n  sayGoodNight: #(1)!\n    type: realtime-daily #(2)!\n    time: '22:00' #(3)!\n    events: bell_ring,notify_goodNight #(4)!\n</code></pre> <ol> <li> <p>The name of the schedule.</p> </li> <li> <p>The <code>type</code> of this schedule is always <code>realtime-daily</code>.</p> </li> <li> <p><code>time</code> is the time of day when the schedule should be run in format <code>HH:mm</code>.</p> </li> <li> <p>An event (or multiple separated by <code>,</code>) that should run at the given time.</p> </li> </ol> <p>Runs every day at 10pm, will ring a bell and wish everyone a good night.</p>   <pre><code># This example works out of the box. Copy-paste to try out how it works.\nevents:\n  bell_sound: 'notify io:sound sound:block.bell.use'\n  bell_ring: 'folder bell_sound,bell_sound,bell_sound,bell_sound period:0.5'\n  notify_goodNight: 'notify &amp;6Good night, sleep well!'\nschedules:\n  sayGoodNight:\n    type: realtime-daily\n    time: '22:00'\n    events: bell_ring,notify_goodNight\n</code></pre>      <p>Warning</p> <p>The time must always be in <code>''</code> to avoid problems. It needs leading zero if less than 10.</p>","title":"Daily realtime schedule: <code>realtime-daily</code>"},{"location":"Documentation/Schedules/#cron-realtime-schedule-realtime-cron","text":"<p>The cron realtime schedule is an incredibly flexible tool to define when events shall run. It is similar to the <code>realtime-daily</code> schedule but the time is defined as a cron expression. The supported syntax is identical to the original unix crontab syntax.</p>  <p>Tip</p> <p>Crontab Guru is a great tool for learning and testing cron expressions. It also provides a long list of examples. BetonQuest supports all features listed there, even the non-standard ones!</p>  Simple ExampleFull Example   <pre><code>schedules:\n  sayGoodNight: #(1)!\n    type: realtime-cron #(2)!\n    time: '0 22 * * *' #(3)!\n    events: bell_ring,notify_goodNight #(4)!\n</code></pre> <ol> <li> <p>The name of the schedule.</p> </li> <li> <p>The <code>type</code> of this schedule is always <code>realtime-cron</code>.</p> </li> <li> <p><code>time</code> is the cron expression that defines when the schedule should be run. Use crontab.guru!</p> </li> <li> <p>An event (or multiple separated by <code>,</code>) that should run at the given time.</p> </li> </ol> <p>Runs every day at 10pm, will ring a bell and wish everyone a good night.</p>   <pre><code># This example works out of the box. Copy-paste to try out how it works.\nevents:\n  bell_sound: 'notify io:sound sound:block.bell.use'\n  bell_ring: 'folder bell_sound,bell_sound,bell_sound,bell_sound period:0.5'\n  notify_goodNight: 'notify &amp;6Good night, sleep well!'\nschedules:\n  sayGoodNight:\n    type: realtime-cron\n    time: '0 22 * * *'\n    events: bell_ring,notify_goodNight\n</code></pre>     <p>The following special expressions were added for extended functionality or simpler usage:</p>    Expression Description Equivalent to     <code>@reboot</code> Run at server startup, before catching up any missed schedules -   <code>@hourly</code> Run once an hour at the beginning of the hour <code>0 * * * *</code>   <code>@daily</code> / <code>@midnight</code> Run once a day at 00:00 <code>0 0 * * *</code>   <code>@weekly</code> Run once a week at 00:00 on Sunday morning <code>0 0 * * 0</code>   <code>@monthly</code> Run once a month at 00:00 of the first day of the month <code>0 0 1 * *</code>   <code>@yearly</code> / <code>@annually</code> Run once a year at 00:00 of 1 January <code>0 0 1 1 *</code>","title":"Cron realtime schedule: <code>realtime-cron</code>"},{"location":"Documentation/Schedules/#catchup-strategies","text":"<p>Obviously, scheduled events can't be run while the server is shut down. If you want to be sure that a schedule will nevertheless be run, you can define a catchup strategy.</p> <p>On startup, BetonQuest checks which schedules have been missed and (if needed) they will be run on the first tick. Schedules of the same type will be run in the order they were missed. For mixed types the order can not be guaranteed.</p> NONEONEALL   Example<pre><code>schedules:\n  sayGoodNight: \n    type: realtime-daily\n    time: '22:00'\n    events: bell_ring,notify_goodNight\n    catchup: none #(1)!\n</code></pre> <ol> <li>Don't catch up any missed schedules after reboot. (default value, can be ommitted)</li> </ol> <p>As it's just an announcement we don't need to repeat it. The right time has passed.</p>   Example<pre><code>schedules:\n  resetQuarryArea: \n    type: realtime-daily\n    time: '03:00'\n    events: pasteQuarry\n    catchup: one #(1)!\n</code></pre> <ol> <li>If the schedule was missed (no matter how often) run it once after reboot.</li> </ol> <p>The quarry should be reset every day at 3am. Even if the server was shut down at that time, run the event once at reboot.</p>   Example<pre><code>schedules:\n  greedyMarchant: \n    type: realtime-daily\n    time: '03:00'\n    events: increaseFuelPrice\n    catchup: all #(1)!\n</code></pre> <ol> <li>Run the schedule as often as it was missed after reboot.</li> </ol> <p>Inflation! The fuel marchant increases it's price every day at 3am. If the sever was shut down, prices should increase at the same pace.</p>      <p>Danger</p> <p>If the server was shut down for a long time, running all missed schedules can be a too heavy task for the server to handle.</p> <p>For example using <code>realtime-daily</code> type with a syntax like <code>* * * * *</code> (run every minute) and catchup strategy <code>ALL</code> will create <code>86 400</code> missed shedules per day!</p> <p>So be very cautious when using <code>ALL</code> catchup strategy!</p> <p>By deleting <code>.cache/schedules.yml</code> before startup you can make BetonQuest forget about any missed schedules </p>","title":"Catchup Strategies"},{"location":"Documentation/Updating/","text":"","title":"Updating"},{"location":"Documentation/Updating/#updating-betonquest","text":"<p>BetonQuest has a comfortable Auto-Updater, that you can use without any problem, but there are some things that you need to be aware of. Alternatively you can install updated manual by your self.</p> <p>Read the update section to correctly set up the Auto-Updater.</p> <p>For a production/live system it is recommended to disable automatic updates and to check out the CHANGELOG before you execute <code>/q update</code> for manual updates.</p>  <p>Updating to 2.0</p> <p>If you update to BetonQuest 2.0 you should read the Migration guide to see, what you need to do manually.</p>","title":"\ud83d\udce5 Updating BetonQuest"},{"location":"Documentation/Updating/#understanding-versioning","text":"<p>A plugin version is a number that consists of three parts in the format <code>MAJOR.MINOR.PATCH</code>. Example: <code>2.4.3</code></p> <p>When we release a new version of BetonQuest we will change these numbers in a specific way. Each number has a fixed meaning, that is explained in the following table.</p>      Digit <code>MAJOR</code> (2) <code>MINOR</code> (4) <code>PATCH</code> (3)     Bug Fixes      New Features      Breaking Changes","title":"Understanding Versioning"},{"location":"Documentation/Updating/#choose-an-update-strategy","text":"<p>Valid update strategies are: <code>MAJOR</code>, <code>MINOR</code>, <code>PATCH</code> and <code>MAJOR_DEV</code>, <code>MINOR_DEV</code>, <code>PATCH_DEV</code></p> <p><code>MINOR</code> and <code>PATCH</code> strategy are really safe to use, even on a production/live system. You will receive bugfixes and new features, that will not have an impact on your existing stuff. <code>MAJOR</code> strategy is not recommended for production/live systems, they can break everything. For a test system, you need to decide weather you want to stay on the latest version with <code>MAJOR</code> or you want to be more stable.</p> <p>By adding the <code>_DEV</code> suffix to the update strategy, you also download dev-builds for the corresponding version. Dev-builds can contain everything: Bug fixes and new features, but also new bugs or even worse it beaks something, so don't use this on a production/live system without checking out the changes.</p>","title":"Choose an Update Strategy"},{"location":"Documentation/Updating/#enable-or-disable-automatic-updates","text":"<p>Apart from the version you also have to choose if you want BetonQuest to update automatically or only after confirmation. Having automatic updates enabled is handy for <code>PATCH</code> and <code>MINOR</code> but risky on <code>MAJOR</code> strategies. Automatic updates for any <code>_DEV</code> version are dangerous as these can contain very severe bugs. Only use this for test servers.</p> <p>Disabling automatic updates still allows the use of <code>/q update</code>!</p>","title":"Enable or Disable automatic updates"},{"location":"Documentation/Updating/#backups-and-restoring","text":"","title":"Backups and Restoring"},{"location":"Documentation/Updating/#creating-backups","text":"<p>After a manual or automatic update BetonQuest might update some quest packages or the database to a new format. If a file or the database is touched, an automatic backup will be created and is saved as a zip file to <code>BetonQuest/Backups/</code> to prevent losing your work due to errors.</p> <p>A backup can also be created manually by running the backup command.</p>","title":"Creating Backups"},{"location":"Documentation/Updating/#restoring-backups","text":"<p>You find your backups as zip file in the folder <code>BetonQuest/Backups/</code> containing every configuration and a dump of you database. To restore a chosen backup stop your server, delete all the files in the folder <code>BetonQuest/</code>, except <code>BetonQuest/Backups/</code>, and replace them with the files from the chosen backup zip file and start your server again.</p> <p>If you only want to restore the database then stop your server, only delete the existing database file and extract the database backup file from the zip archive and start your server again.</p>","title":"Restoring Backups"},{"location":"Documentation/Variables-List/","text":"<p>This page lists all the variables that are available in BetonQuest. Some of them are only useful when exported for use in other plugins through the support for PlaceHolderAPI.</p> <p>Variables marked as static can be resolved without a player specified.</p>","title":"Variables List"},{"location":"Documentation/Variables-List/#betonquest-elements","text":"","title":"BetonQuest Elements"},{"location":"Documentation/Variables-List/#objective-property-variable","text":"<p>Using this variable you can display a property of an objective. The first argument is an ID of the objective as defined in the objectives section (not the type). Make sure that the player has this objective active or it will be replaced with nothing (\"\"). Second argument is the name of a property you want to display. All properties are described in \"Objectives List\" chapter.</p> <pre><code>%objective.kill_zombies.left%\n</code></pre>","title":"Objective Property Variable"},{"location":"Documentation/Variables-List/#condition-variable","text":"<p>You can expose BetonQuest's conditions to 3rd party plugins by using the <code>condition</code> variable together with the  PAPI support. The variable will return <code>true</code> or <code>false</code> by default. If you add <code>papiMode</code> to the instruction it will return <code>yes</code> or <code>no</code>.   You can translate the papiMode's result by changing the values of <code>condition_variable_met</code> <code>condition_variable_not_met</code> in  the messages.yml config.</p>","title":"Condition Variable"},{"location":"Documentation/Variables-List/#betonquest-data-types","text":"","title":"BetonQuest Data Types"},{"location":"Documentation/Variables-List/#point-variable","text":"<p>This variable displays the amount of points you have in some category or amount of points you need to have to reach a number. The first argument is the name of a category and the second argument is either <code>amount</code> or <code>left:x</code>, where <code>x</code> is a number.</p> <pre><code>%point.reputation.amount%\n%point.reputation.left:15%\n</code></pre>","title":"Point Variable"},{"location":"Documentation/Variables-List/#global-point-variable","text":"<p>static</p> <p>This variable displays the amount of global points in some category or the amount of points needed to reach a number. The first argument is the name of a category and the second argument is either <code>amount</code> or <code>left:x</code>, where <code>x</code> is a number.</p> <pre><code>%globalpoint.global_knownusers.amount%\n%globalpoint.global_knownusers.left:100%\n</code></pre>","title":"Global Point Variable"},{"location":"Documentation/Variables-List/#tag-variable","text":"<p>This variable displays whether the player has a tag or not. The variable will return true or false by default. If you add papiMode to the instruction it will return yes or no. You can translate the papiMode's result by changing the values of <code>condition_variable_met</code> and <code>condition_variable_not_met</code> in the messages.yml config.</p> <pre><code>%tag.test%\n%tag.test.papiMode%\n</code></pre>","title":"Tag Variable"},{"location":"Documentation/Variables-List/#global-tag-variable","text":"<p>static</p> <p>This variable displays whether a global tag is set or not. The variable will return true or false by default. If you add papiMode to the instruction it will return yes or no. You can translate the papiMode's result by changing the values of <code>condition_variable_met</code> and <code>condition_variable_not_met</code> in the messages.yml config.</p> <pre><code>%globaltag.test%\n%globaltag.test.papiMode%\n</code></pre>","title":"Global Tag Variable"},{"location":"Documentation/Variables-List/#custom-text-variable","text":"<p>It is possible to save text per player. This works by using the <code>variable</code>  objective and the <code>variable</code> event. </p>","title":"Custom Text Variable"},{"location":"Documentation/Variables-List/#other-variables","text":"<pre><code>%condition.myCondition%\n%condition.myCondition.papiMode%\n</code></pre>","title":"Other Variables"},{"location":"Documentation/Variables-List/#item-variable","text":"<p>With this variable you can display amount of specific items in player's inventory or a number needed to reach specific amount. The first argument is the name of an item (as defined in the items section) and the second one is either  <code>amount</code> or <code>left:x</code>, where <code>x</code> is a number.</p> <pre><code>%item.stick.amount%\n</code></pre>","title":"Item Variable"},{"location":"Documentation/Variables-List/#location-variable","text":"<p>This variable resolves to all aspects of the player's location. The x, y and z coordinates, the world name, the yaw and pitch (head rotation). There are also modes for the Unified Location Formatting (ULF from now on) which means that this variable can also be used in events, conditions etc. If you just specify <code>%location%</code> the variables will resolve to a ULF with yaw and pitch. You can add two options to that base, one will give back parts of the ULF and the other will set to how many decimal places  the variable will resolve. </p> <pre><code>%location%           # -&gt; 325;121;814;myWorldName;12;6\n%location.xyz%       # -&gt; 325 121 814 \n%location.x%         # -&gt; 325\n%location.y%         # -&gt; 121\n%location.z%         # -&gt; 814\n%location.yaw%       # -&gt; 12\n%location.pitch%     # -&gt; 6\n%location.world%     # -&gt; myWorldName\n%location.ulfShort%  # -&gt; 325;121;814;myWorldName\n%location.ulfLong%   # -&gt; 325;121;814;myWorldName;12;6\n\n%location.x.2%       # -&gt; 325.16\n%location.ulfLong.5% # -&gt; 325.54268;121.32186;814.45824;myWorldName;12.0;6.0\n</code></pre>","title":"Location Variable"},{"location":"Documentation/Variables-List/#math-variable","text":"<p>This variable allows you to perform a calculation based on other variables (for example point or objective variables) and resolves to the result of the specified calculation. The variable always starts with <code>math.calc:</code>, followed by the calculation which should be calculated. Supported operations are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>^</code> and <code>%</code>. You can use <code>( )</code> and <code>[ ]</code> braces and also calculate absolute values with <code>| |</code>. But be careful, don't use absolute values in the command event as it splits the commands at every <code>|</code> and don't nest them without parenthesis (<code>|4*|3-5||</code> wont work, but <code>|4*(|3-5|)|</code> does). Additionally, you can use the round operator <code>~</code> to round everything left of it to the number of decimal digits given on the right. So <code>4+0.35~1</code> will produce <code>4.4</code> and <code>4.2~0</code> will produce <code>4</code>.</p> <p>To use variables in the calculation you have two options: First just write the variable, but  without <code>%</code> around them; In cases where this doesn't work, e.g. if the variable contains mathematical operators, you can surround it with curly braces <code>{ }</code>. Inside the curly braces you have to escape with <code>\\</code>, so to have a <code>\\</code> in your variable you need to write <code>\\\\</code>, to have a <code>}</code> inside your variable you need to write <code>\\}</code>.</p> <pre><code>%math.calc:100*(15-point.reputation.amount)%\n%math.calc:objective.kill_zombies.left/objective.kill_zombies.total*100~2%\n%math.calc:-{ph.myplugin_stragee+placeholder}%\n%math.calc:64%32%\n</code></pre>","title":"Math Variable"},{"location":"Documentation/Variables-List/#npc-name-variable","text":"<p>It's a very simple variable. It's replaced by the name of the NPC in player's language.</p> <pre><code>%npc%\n</code></pre>","title":"NPC Name Variable"},{"location":"Documentation/Variables-List/#player-name-variable","text":"<p>This variable will be replaced with the name of the player. If you add <code>display</code> argument, it will use display name instead of real name.</p> <pre><code>%player.display%\n</code></pre>","title":"Player Name Variable"},{"location":"Documentation/Variables-List/#version-variable","text":"<p>This variable displays the version of the plugin. You can optionally add the name of the plugin as an argument to display version of another plugin.</p> <pre><code>%version.Citizens%\n</code></pre>","title":"Version Variable"},{"location":"Participate/Overview/","text":"<p>There are two options to support projects like this one:</p>","title":"Overview"},{"location":"Participate/Overview/#donate-time","text":"Report Bugs <p>You just need to follow the bug report template on GitHub to submit a bug report.</p>   Suggest Features <p>Features can be requested on our GitHub discussions page.  Please make sure that:</p> <ul> <li>The feature does not exist yet (Search docs / Ask on Discord)</li> <li>No one has already requested it (Search GitHub discussion). You can comment on an existing discussion to add details.</li> </ul>   Write Code <p>We have written a guide about contributing code:</p> <p>Please follow our detailed Setup Project guide to obtain a local working environment. </p> <p>After that, you can follow the <code>Process</code> chapter. It explains every step in the contributing process. Start by creating a new branch, then change Code and finally submit any changes you made.</p>   Write Documentation <p>We have written a guide about contributing documentation:</p> <p>Please follow our detailed Setup Project guide to obtain a local working environment. </p> <p>After that, you can follow the <code>Process</code> chapter. It explains every step in the contributing process. Start by creating a new branch, then change Docs and finally submit any changes you made.</p>","title":"Donate Time"},{"location":"Participate/Overview/#donate-money","text":"<p>We are part of the non-profit open source collective! Our monthly costs (server, domain, software licences) are paid by our community. Thanks to them for making this project possible! Any additional money has to be re-invested in the project.</p> <p> </p> <p>You donate a small amount of the sales price by purchasing on mcmodels.net using our affiliate links. </p>","title":"Donate Money"},{"location":"Participate/Overview/#our-community-sponsors","text":"<p></p>","title":"Our Community Sponsors"},{"location":"Participate/Setup-Project/","text":"<p>The BetonQuest Organisation recommends IntelliJ (Community Edition) as the IDE (Integrated Development Environment). The advantage of using IntelliJ is that this guide contains some steps and the project contains some files that help to fulfill our requirements regarding code and documentation style. You can still use your preferred IDE, but then you need to check on your own that your changes fulfill our requirements.</p>","title":"Setup Project"},{"location":"Participate/Setup-Project/#installing-intellij","text":"<p>First download IntelliJ and install it.</p> <p>After you installed IntelliJ, we recommend installing the plugin Save Actions. The plugin automatically formats code, organizes imports, adds final modifiers, and fulfils some other requirements we have. You don't need to configure that plugin, the project contains the configuration file.</p>","title":"Installing IntelliJ"},{"location":"Participate/Setup-Project/#check-out-the-repository","text":"<p>You need a Git installation to be able to check out code from GitHub. You can follow this guide if you don't know how to install Git.  </p> <p>Then you should fork the BetonQuest repository to your own account on GitHub.</p> <p>After you have set up the IDE, clone the BetonQuest repository from your account. You can also directly clone the repository in IntelliJ.</p>  In case videos and images are missing after cloning <p>We use Git LFS to store big files like media files, so you need to install that too. Once you have executed the file that you downloaded from the Git LFS website, just run <code>git lfs install</code>. Then use <code>git lfs pull</code> to actually download the files.</p>","title":"Check out the repository"},{"location":"Participate/Setup-Project/#adding-remote-repository","text":"<p>In IntelliJ click on <code>Git</code> in the left upper corner and then <code>Manage Remotes...</code>. In the new window you already see a remote called <code>origin</code>. This remote is your fork of BetonQuest. Now add a new repository with the name <code>upstream</code> and the url <code>https://github.com/BetonQuest/BetonQuest.git</code>.</p>","title":"Adding remote repository"},{"location":"Participate/Setup-Project/#intellij-settings","text":"<p>Formatting for .md (Markdown) files can break some features of Material for MkDocs, so we disable it for these files. Go to <code>File/Settings/Editor/Code Style</code> then go to the <code>Formatter</code> tab and add <code>*.md</code> to the <code>Do not format:</code> field.</p> <p>In <code>File/Settings/Editor/Code Style/Java</code> navigate to the <code>Imports</code> tab. You will now configure when to use star imports, in general we don't want them at all, but there are some exceptions. Set <code>Class count to use import with '*':</code> and <code>Names count to use static import with '*':</code> to <code>9999999</code>. And under <code>Packages to Use Import with '*'</code> configure the following:</p>    Static Package With Subpackages      org.mockito.ArgumentMatchers     org.junit.jupiter.api.Assertions     org.mockito.Mockito     <p>Now we enable some automatic checks, when you commit things, that ensures everything is fine. In the <code>Commit</code> tab click on the  icon near the <code>Amend</code> checkbox. Check the following entries under <code>Before Commit</code>:</p> <ul> <li>Reformat Code</li> <li>Rearrange Code</li> <li>Optimize Imports</li> <li>Analyze Code</li> <li>Check TODO (Show All)</li> </ul>","title":"IntelliJ settings"},{"location":"Participate/Setup-Project/#building-the-plugin-jar","text":"<p>You can build the plugin with Maven. Sometimes, IntelliJ auto-detects that BetonQuest is a Maven project. You can see a \"Maven\" tab on the right side of the editor if that's the case. Otherwise, do this: First, open the \"Project\" tab on the left site. Then right-click the <code>pom.xml</code> file in the projects root folder.  Select \"Add as Maven Project\". </p> <p>To build the BetonQuest jar, you simply need to run <code>mvn verify</code>. You can do this from the command line or use IntelliJ's <code>Maven</code> tab (double-click on <code>BetonQuest/Lifecycle/verify</code>). You can then find a <code>BetonQuest.jar</code> in the newly created folder <code>/target/artifacts</code>.</p>","title":"Building the Plugin jar"},{"location":"Participate/Setup-Project/#build-speed-up","text":"<p>As BetonQuest has a lot of dependencies, the build can take a long time, especially for the first build. You can speed this up with the following configuration, that downloads all dependencies from our own Repository Manager instead of searching through all repositories that are defined in the project.</p> <p>If you do not already have the file, create a new file in this location: <code>&lt;HOME DIRECTORY&gt;\\.m2\\settings.xml</code>. The home directory on Windows is <code>C:\\Users\\&lt;YOUR USER NAME&gt;</code>. Then adopt or copy the following into the file:</p> <pre><code>&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt;\n\n  &lt;mirrors&gt;\n    &lt;mirror&gt;\n      &lt;id&gt;BetonQuest-Mirror&lt;/id&gt;\n      &lt;url&gt;https://betonquest.org/nexus/repository/default/&lt;/url&gt;\n      &lt;mirrorOf&gt;betonquest-papermc-repo,betonquest-enginehub-repo,betonquest-heroes-repo,betonquest-lumine-repo,betonquest-citizensnpcs-repo,betonquest-codemc-repo,betonquest-placeholderapi-repo,betonquest-dmulloy2-repo,betonquest-lichtspiele-repo,betonquest-elmakers-repo,betonquest-jitpack-repo,betonquest-sonatype-releases-repo,betonquest-sonatype-snapshots-repo,betonquest-minecraft-repo&lt;/mirrorOf&gt;\n    &lt;/mirror&gt;\n  &lt;/mirrors&gt;\n\n&lt;/settings&gt;\n</code></pre>","title":"Build speed up"},{"location":"Participate/Setup-Project/#build-on-start","text":"<p>The first build of a day can take a while, because every version gets re-checked once every day. This is the reason, why an automatic build on startup reduces the time of following builds. It is really worth it to set it up. In IntelliJ navigate to <code>File/Settings/Tools/Startup Tasks</code> click on the <code>Add</code> button and click <code>Add New Config</code>. Now select <code>Maven</code>, set a <code>Name</code> like <code>BetonQuest Resolve Dependencies</code> and write <code>dependency:resolve</code> into the field <code>Command line</code>. Then confirm with <code>Ok</code> twice. Now after starting IntelliJ the <code>BetonQuest Resolve Dependencies</code> task should run automatically.</p>","title":"Build on Start"},{"location":"Participate/Setup-Project/#building-the-documentation","text":"<p>Make sure Python3 is installed on your local system and added to the PATH environment variable. The Python installer allows you to do so with a checkbox called something like \"Add Python to environment variables\".</p> <p>You also need to install GTK, the easiest way is to use this  GTK installer if you are on Windows. </p> <p>Install all other dependencies by entering <code>pip install -r config/docs-requirements.txt</code> in the terminal on the project's root directory.</p>  In case you are a Material for MkDocs insider (paid premium version) <p>Set your license key by executing <code>setx MKDOCS_MATERIAL_INSIDERS LICENSE_KEY_HERE /M</code> (Windows) in the terminal. Now you need to restart IntelliJ for the changes to take effect.  Then run <code>pip install -r config/docs-requirements-insiders.txt</code> instead of <code>docs-requirements.txt</code>.</p>","title":"Building the Documentation"},{"location":"Participate/Setup-Project/#see-your-changes-live","text":"<p>Run this command in IntelliJ's integrated terminal (at the bottom) to create a docs preview in your browser:</p> <pre><code>mkdocs serve\n</code></pre> <p>Then visit 127.0.0.1:8000 to make sure that everything works.</p>","title":"See your changes live"},{"location":"Participate/Setup-Project/#where-to-continue","text":"<p>You should now continue with Create a new Branch, before you start changing Code or Docs.</p>","title":"Where to Continue?"},{"location":"Participate/Misc/Versioning-and-Releasing/","text":"","title":"Versioning and Releasing"},{"location":"Participate/Misc/Versioning-and-Releasing/#versioning","text":"<p>BetonQuest follows the Semantic Versioning specification.</p> <p>We adapt the specification with these version types:</p> <ul> <li><code>1.12.0</code> for git version tags <code>v*</code> (in the official repository)</li> <li><code>1.12.0-DEV-1</code> for commits to <code>master</code> or branches called <code>master_v*</code> (in the official repository)</li> <li><code>1.12.0-DEV-ARTIFACT-5522</code> for commits to other branches (or repos) and Pull requests</li> <li><code>1.12.0-DEV-UNOFFICAL</code> for local builds</li> </ul> <p>Only use the three digits(Major, Minor, Patch) to specify versions in files like the pom.xml. All suffixes are set by the build-pipeline.</p> <p>The officially distributed jar does not contain the version in its name due to limits with the Spigot updater. Therefore, it's named <code>BetonQuest.jar</code>. The version can only be seen ingame by using <code>/q version</code>.</p>","title":"Versioning"},{"location":"Participate/Misc/Versioning-and-Releasing/#releasing","text":"<p>This project has a custom build-pipeline that utilizes GitHub('s) actions.</p>","title":"Releasing"},{"location":"Participate/Misc/Versioning-and-Releasing/#step-1-prerequisites","text":"<p>Check out the remote branch or commit, that you want to use for the release. Make sure that the current version in all the files (pom.xml etc.) is the correct version that should be used for the release. You will need a bash shell later on (e.g. Git Bash). Additionally, a Maven installation is required and must be added to the path. Optionally GitHub-CLI can be installed to enable features like automatic Pull Request creation and release date fetching.</p>","title":"Step 1: Prerequisites"},{"location":"Participate/Misc/Versioning-and-Releasing/#step-2-build-a-release","text":"<p>Run the script <code>./.github/scripts/release.sh</code> using some sort of bash shell (e.g. Git Bash) from the root dir of the project. It guides you through the creation of the release and prepares the next version. If you run into errors you may need to do the script's release steps manually or fix the script / your setup. </p>","title":"Step 2: Build a release"},{"location":"Participate/Process/Create-a-new-Branch/","text":"<p>A new branch should always be created from an up to date <code>master</code> branch. That's why you added the BetonQuest repository <code>upstream</code>. Now click on your current branch in the bottom right corner, probably <code>master</code>. Then you click on <code>upstream/master</code> and click on <code>New Branch from Selected...</code>. Now give the branch a name that describes the changes you want to make and click <code>CREATE</code>.</p> <p></p>","title":"Create a new Branch"},{"location":"Participate/Process/Create-a-new-Branch/#where-to-continue","text":"<p>Now you can continue by changing Code or Docs, depending on your needs.</p>","title":"Where to Continue?"},{"location":"Participate/Process/Maintaining-the-Changelog/","text":"<p>Before you make a commit, you should keep in mind, that you need to add a changelog entry.</p> <p>We have 6 categories in the CHANGELOG.md file for each version. These are general rules:</p> <ul> <li>Write user-friendly entries - they are the ones that read the changelog after all.</li> <li>Do not repeat the heading for individual entries  <pre><code>Added:\n  * added new conversation style: Hologram\n  * new conversation style: Hologram\n</code></pre></li> <li>Mark events, objectives etc. names with <code>`</code> around them.</li> </ul> <p>Here is a breakdown of what belongs in each section:</p>  Added <p>Do not write what class or file was added, describe the feature you added.</p> <pre><code>Added:\n  - event `teleport` allows teleportation of players\n  - Citizens event `movenpc` makes it possible to let a NPC walk to a specific location\n</code></pre>   Changed <p>Give qualified information that indicates what the user may have to be aware of. Do not write <code>event x has now argument y</code> - that is a new feature and belongs to <code>Added</code>. Only add to this section if there are changed behaviours.</p> <pre><code>Changed:\n  - event `teleport` now first checks if another plugin canceled the event\n  - german translations have been updated\n</code></pre>   Deprecated <p>List things that have been marked for removal. Also mention possible replacements.</p> <pre><code>Deprecated:\n  - event `message` will be deleted, use the `notify` event instead\n  - Minecraft recently replaced material ids with namespaces. Update your items accordingly, ids will stop working soon \n</code></pre>   Removed <p>After something has been marked for removal in the category <code>Deprecated</code> it will end up here eventually. Repeat possible replacements.</p> <pre><code>Removed:\n  - `message` event, use the `notify` event instead\n  - old material syntax, use material namespaces instead\n</code></pre>   Fixes <p>Solved bugs are listed in this category. Let the users know what the bug did, so they know if they were affected. Mention if the fix changed a behaviour.</p> <pre><code>Fixes:\n  - event `notify` did not resolve variables correctly\n  - Citizens event `movenpc` is now more robust combined with other events like `stopnpc` and `teleportnpc`\n    - you may need to reduce the distance beetween waypoints\n</code></pre>   Security <p>If there was a security issue, you write it down here. It's nearly the same as the category <code>Fixes</code>. But if something can be abused to effect server security or performance,  you keep the way how it can be abused secret. DO NOT LEAK EXPLOITABLE SECURITY ISSUES!</p> <pre><code>Security:\n  - the take event is now threadsafe\n  - a deadlock in conversations was fixed\n</code></pre>","title":"Maintaining the Changelog"},{"location":"Participate/Process/Maintaining-the-Changelog/#where-to-continue","text":"<p>Continue with Submitting Changes if all your changes are finished. But maybe you are not finished yet, and you want to go back to change Code or Docs.</p>","title":"Where to Continue?"},{"location":"Participate/Process/Submitting-Changes/","text":"<p>The last step of the contributing process is to submit your changes. This is done via a pull request on GitHub.  A pull request basically is asking us to pull your changes into our codebase. Let's create one!</p>","title":"Submitting Changes"},{"location":"Participate/Process/Submitting-Changes/#push-your-changes","text":"<p>The first step is to push your changes to your fork on GitHub. You can do this using IntelliJ's Git integration.</p>","title":"Push your changes"},{"location":"Participate/Process/Submitting-Changes/#creating-a-pull-request","text":"<p>There are three ways to create a pull request:</p> <ol> <li> <p>If you recently pushed to your fork, you see a <code>Create Pull Request</code> hint on our    repository page.</p> </li> <li> <p>You can go to the Pull Request page on our repository and click on    <code>New Pull Request</code>. But then you need to click on <code>Compare across Forks</code> and then select your <code>Head Repository</code>.</p> </li> <li> <p>You can also click on <code>New Pull Request</code> in your fork, then it already compares it to the BetonQuest repository.</p> </li> </ol> <p>Now give the pull request a short but meaningful title. Then add a description that indicates what you added, removed or changed. If there are related issues, link them with the keyword <code>Closes #issue-id-here</code>, so the issue is automatically closed when the pull request is merged.</p>","title":"Creating a Pull Request"},{"location":"Participate/Process/Submitting-Changes/#reviewers-checklist","text":"<p>The list below contains typical problems that we will check during the review. Do not click any of these boxes on GitHub, we will do that. </p> <p>Please make sure that you fulfill these requirements. Did you...</p>  ... run Maven verify? <p>The most basic check is Maven Verify. Run it in you IDE and make sure it succeeds!</p>   ... test your changes? <p>Always test your changes in-game! Keep in mind, that there could be some special case in your code that needs to be tested specifically.</p>   ... update the changelog? <p>Don't forget to add a changelog entry for every change you made. Read maintaining the changelog for more information.</p>   ... update the documentation? <p>You need to adjust the documentation everytime you changed, added or removed any feature. Remember: Things that  aren't documented don't exist to the user. There can also be other reasons why you should update the documentation, like writing a new tutorial or adjusting a bad example.</p>   ... adjust the ConfigUpdater? <p>Currently not relevant. We are working on a new updater.</p>   ... solve all TODOs? <p>You shouldn't have any TODOs in your code because it indicates that your code is not finished. Unfinished code is not added to the plugin. Let's see what to do with different types of TODOs / comments:</p> <ul> <li><code>FIXME</code>: Delete it -&gt; Fix it or open an issue on GutHub. </li> <li><code>DEPRECATED</code>: Delete it -&gt; Deprecate with <code>@Deprecated</code> and document it in the Javadocs.</li> <li><code>Auto-generated code</code>: Delete it.</li> <li><code>NOT IMPLEMENTED</code>: Delete it -&gt; Implement or leave empty.</li> </ul>   ... remove any commented out code? <p>We use the version control system Git - it will remember any code. So don't even start committing commented out code.</p>   ... add debug messages? <p>In general, BetonQuest already has a lot of debug messages. So normally you do not need to add anything. It may be beneficial for new or complicated things.</p>   ... clean the commit history? <p>You did multiple commits, that look like <code>progress fixing the bug</code>? Or you did a commit with a wrong description?  </p> <p>Then you now need to do an <code>Interactive Rebase</code>. This changes the commit history. Here is the general git documentation for changing the history. But if you use IntelliJ, you should read edit Git project history.  </p> <p>In case you don't understand, read this guide that explains, why and how you clean the commit history.</p>","title":"Reviewer's Checklist"},{"location":"Participate/Process/Submitting-Changes/#submit-your-pull-request","text":"<p>Now click on <code>Create Pull Request</code> to submit your request. </p> <p>If you want to share work-in-progress changes to get early feedback, create a \"draft pull request\". Click on the arrow next to <code>Create Pull Request</code> and then select <code>Create draft Pull Request</code>. This indicates, that this pull request is not finished, and you can click on <code>Ready for review</code> once you are ready.</p>  <p>Congrats, you are done! Thank you for contributing! </p> <p>Keep an eye out for reviews of your pull request.</p>","title":"Submit your Pull Request"},{"location":"Participate/Process/Code/Adding-a-new-Dependency/","text":"","title":"Adding a Dependency"},{"location":"Participate/Process/Code/Adding-a-new-Dependency/#requirements","text":"<p>You can only add support for plugins that have a public API. This means Maven must be able to resolve the dependency  from an online repository. Adding dependencies from you local hard-drive is NOT allowed as this stops everyone from  building the plugin.</p>","title":"Requirements"},{"location":"Participate/Process/Code/Adding-a-new-Dependency/#adding-a-new-repo","text":"<p>Open up the pom.xml file located in the project's folder. Check if the new dependencies' repository already exists in our  list of repositories. If that's the case, search for the dependency block related to that repository - there are comments above these blocks indicating that.</p> <p>If there is no such repository tag, add it. New repository tags need to be added in this format: <code>betonquest-&lt;repoName&gt;-repo</code>. Then add a new dependency block for that repository. There needs to be a comment above that dependency block that indicates which repository holds this dependency. Take a look at the other blocks for guidance.</p>","title":"Adding a new repo"},{"location":"Participate/Process/Code/Adding-a-new-Dependency/#finishing-up","text":"<p>We speed our builds up using our own mirror repository. It needs to be configured in your local Maven settings file as shown on the Setup Project page. Please add any new repositories to your local file and to that documentation page.</p>","title":"Finishing up"},{"location":"Participate/Process/Code/Checking-Requirements/","text":"","title":"Checking Requirements"},{"location":"Participate/Process/Code/Checking-Requirements/#fulfil-the-contributing-requirements","text":"<p>Run <code>mvn verify</code> before Submitting Changes to check if your change meets the project's requirements regarding code style and quality. GitHub Actions (automated code check on GitHub) will also verify these requirements when you open the pull request.</p> <p>If any requirements are not met, <code>mvn verify</code> will fail with this log message: <pre><code>[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n</code></pre> IntelliJ may also show something like <code>Failed to execute goal</code>. Here's a guide how to fix any requirement violations:</p>  PMDSpotBugsCheckStyleEditorConfig   <p>Visit the PMD Page for general info.  PMD mainly checks for code smells. PMD's errors look like this: <pre><code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-pmd-plugin:3.14.0:check (default) on project betonquest: You have 1 PMD violation.\n</code></pre> If you have this message you also have messages, that looks like this: <pre><code>[INFO] PMD Failure: org.betonquest.betonquest.BetonQuest:143 Rule:AvoidLiteralsInIfCondition Priority:3 Avoid using Literals in Conditional Statements.\n</code></pre> If you read this, you may know what is wrong. If you don't know why, visit the PMD page. Then you type in the rule e.g. <code>AvoidLiteralsInIfCondition</code> in the search bar and click on the rule. You will get a detailed description about what is wrong. If you still don't know how to solve it, ask the developers on Discord for help with PMD.</p>   <p>Visit the SpotBugs Page for general info.  SpotBugs searches for additional problems, most of them are potential bugs. SpotBugs' errors look like this: <pre><code>Failed to execute goal com.github.spotbugs:spotbugs-maven-plugin:4.2.2:check (default) on project betonquest: failed with 1 bugs and 0 errors\n</code></pre> If your log contains such a message, it will also contain another message that looks like this: <pre><code>[ERROR] Medium: Null passed for non-null parameter of org.betonquest.betonquest.utils.PlayerConverter.getPlayer(String) in org.betonquest.betonquest.BetonQuest.condition(String, ConditionID) [org.betonquest.betonquest.BetonQuest, org.betonquest.betonquest.BetonQuest] Method invoked at BetonQuest.java:[line 349]Known null at BetonQuest.java:[line 344] NP_NULL_PARAM_DEREF\n</code></pre> SpotBugs errors are a little complicated to read, but if you find e.g. <code>NP_NULL_PARAM_DEREF</code> at the end of the line you can simply search it on the SpotBugs page. If you have problems solving these kinds of issues you can ask on our Discord for help with SpotBugs.</p>   <p>Visit the CheckStyle Page for general info.  CheckStyle checks the code formatting and style. We have only configured two checks. The first check is the import order, and the second check is that you do not use star imports, excepting some junit imports. There is only a basic check for the imports, and it looks like this: <pre><code>[ERROR] src/main/java/org/betonquest/betonquest/BetonQuest.java:[16,1] (imports) ImportOrder: Wrong order for 'edu.umd.cs.findbugs.annotations.SuppressFBWarnings' import.\n</code></pre> CheckStyle is very simple to read, normally it is in your language and self explaining. In the above error you can find e.g. <code>ImportOrder</code> and you can search on the CheckStyle page for it. If you need help solving an issue here, you can also ask us on our Discord for help with CheckStyle. </p>   <p>Visit the EditorConfig Page for general info.  EditorConfig it natively supported by many IDEs and editors. It checks for some really basic formatting like brackets, line endings, indention and some more. EditorConfig violations look like this: <pre><code>[ERROR] There are .editorconfig violations. You may want to run\n[ERROR]     mvn editorconfig:format\n[ERROR] to fix them automagically.\n</code></pre> If your log contains such a message, it will also contain another message that looks like this if you want to solve it manual: <pre><code>[ERROR] src\\main\\java\\org\\betonquest\\betonquest\\BetonQuest.java@284,54: Delete 5 characters - violates trim_trailing_whitespace = true, reported by org.ec4j.linters.TextLinter\n</code></pre> We recommend running <code>mvn editorconfig:format</code> or use an IDE that support EditorConfig.</p>","title":"Fulfil the Contributing Requirements"},{"location":"Participate/Process/Code/Workflow/","text":"<p>Make sure to set up the project before doing this step.  You should always create a new branch everytime you develop a new feature, fix a bug or make other changes.</p>","title":"Changing Code"},{"location":"Participate/Process/Code/Workflow/#maven-verify","text":"<p>Before you make changes you should run <code>mvn verify</code> as explained here to ensure the plugin successfully builds.</p> <p>After you made changes, you should also run <code>mvn verify</code> to check our requirements. If you have problems solving issues with our requirements there is also a page Checking Requirements, that you will probably read later.</p>  Improve Build Speed <p>If <code>mvn verify</code> takes too long, and you just want a jar, you want to build without checking our requirements. You can execute <code>mvn package</code> instead of <code>mvn verify</code> for that. But don't forget, you need to successfully run <code>mvn verify</code>, before you make a pull request on GitHub!</p>","title":"Maven verify"},{"location":"Participate/Process/Code/Workflow/#make-changes","text":"<p>Now go ahead and make your changes. Take a look at the sub-pages of this page for more information about specific topics. </p>","title":"Make changes"},{"location":"Participate/Process/Code/Workflow/#commit","text":"<p>After you made changes, don't forget to run <code>mvn verify</code> again. You should also add a changelog entry at this point.</p> <p>You need to commit your changes once they are done. You can do this with IntelliJ's Git integration.</p> <p>Here are a few tips how to make good commits:</p> <p>A commit needs to be atomic which means it only contains changes that belong together. Large changes may also be split into multiple commits. This makes it easier to understand your changes.</p> <p>Example: Originally you just wanted to fix a bug, but you also cleaned the code of the class while doing so. Now you should separate these two (logically different) changes into two separate commits. With other words, don't mix up different changes.</p> <p>Another thing to keep in mind is the commit name and description. If you fixed a bug, don't write <code>fixed deadlock</code>. You should give more qualified information like <code>fixed deadlock, when a huge amount of conditons are cheked at the same time</code>. Also, you shouldn't write <code>cleaned the code</code>, instead you should write things like this <code>renamed methods and variables</code>.  </p>","title":"Commit"},{"location":"Participate/Process/Code/Workflow/#where-to-continue","text":"<p>If you also want to adjust the documentation switch to Changing Docs. Once you are done with all changes, continue with Maintaining Changelog In case you already did that: Continue with Submitting Changes.  </p>","title":"Where to Continue?"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/","text":"<p>Here you can find a summary on how to write JUnit tests for BetonQuest. In order to understand this, you need to have basic knowledge of JUnit tests and mocking of objects and classes.</p>","title":"Writing JUnit Tests"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#introduction","text":"<p>It is a major goal to write JUnit tests for most parts of BetonQuest.</p> <p>There are things, where you definitely want as many tests as possible:</p> <ul> <li>API</li> <li>Utilities</li> <li>Internal application logic that is used by a bunch of other code</li> <li>Critical parts that can cause a lot of harm when bugged</li> </ul> <p>But there are also some parts, where we do not want tests at all:</p> <ul> <li>If a core API concept has many implementations, the implementations itself should not be tested</li> <li>Some parts of the code require a lot of Bukkit API mocking. If this takes too much time no tests are   necessary</li> </ul>  <p>Handling Concurrency</p> <p>By default, all classes and methods are executed <code>CONCURRENT</code>. This means that its tests are run in parallel which saves time. Some tests cannot be executed in parallel, in such cases the following annotation needs to be  added to the related methods or the entire class.</p> <pre><code>@Execution(ExecutionMode.SAME_THREAD)\n</code></pre>","title":"Introduction"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#handling-logging","text":"<p>You may need to read Logging to understand this paragraph.</p> <p>This error can occur everytime the <code>@CustomLog</code> annotation is used in a class that is called by a JUnit test:</p> <pre><code>Cannot invoke \"org.bukkit.Server.getPluginManager()\" because \"org.bukkit.Bukkit.server\" is null\n</code></pre> <p>If this is the case, you need the <code>BetonQuestLoggerService</code>. Simply add the following annotation to the class:</p> <pre><code>@ExtendWith(BetonQuestLoggerService.class)\npublic class TestClass {\n</code></pre> <p>The test should now work as intended because a new anonymous logger is created everytime the <code>@CustomLog</code> annotation is used. All these loggers have a silent parent logger - so there are no visible log messages in the command line. The  <code>BetonQuestLoggerService</code> also enables a few new features:</p>","title":"Handling Logging"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#logvalidator","text":"<p>You can now add this optional argument to any test's method signature:</p> <pre><code>@ExtendWith(BetonQuestLoggerService.class)\npublic class TestClass {\n\n    @Test\n    public void testCustom(LogValidator validator) {\n</code></pre> <p>The <code>LogValidator</code> is created and passed to your method by the <code>BetonQuestLoggerService</code>. It makes it possible to assert that a log message has been logged in the silent parent logger. The simplest method is <code>assertLogEntry(Level level, String message)</code>, that you can use to check that the given message with the given level has been logged. You can also check that there are no additional log  messages in the <code>LogValidator</code> by calling <code>assertEmpty()</code>.</p>  <p>Use <code>ExecutionMode.SAME_THREAD</code></p> <p>When using the <code>LogValidator</code>, you validate that log messages are logged in the correct order. This means that if you leave the <code>ExecutionMode</code> on its default (<code>CONCURRENT</code>) value, the test will fail. This happens because the log messages don't have a predictable order as your tests would be executed in parallel. <pre><code>@Execution(ExecutionMode.SAME_THREAD)\n</code></pre></p>","title":"LogValidator"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#advanced-features","text":"Obtaining the parent <code>Logger</code> and a <code>BetonQuestLogger</code> <p>You can also use these two additional arguments:</p> <pre><code>@ExtendWith(BetonQuestLoggerService.class)\n\npublic class TestClass {\n    @Test\n    public void testCustom(LogValidator validator, Logger logger, BetonQuestLogger log) {\n</code></pre> <p>The <code>logger</code> is the silent parent <code>Logger</code>.</p> <p>The <code>log</code> is a new instance of the <code>BetonQuestLogger</code> that you can use to log things during the test. This logger has a topic that can be accessed via <code>BetonQuestLoggerService.LOGGER_TOPIC</code>.</p>","title":"Advanced Features"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#handling-bukkitscheduler","text":"<p>If you want to test code that only works with the <code>BukkitScheduler</code>, we even have a ready to use solution for this. To use the <code>BukkitSchedulerMock</code> you need to create the following setup:</p> <pre><code>@Test\nvoid testMethod {\n    try (BukkitSchedulerMock scheduler = new BukkitSchedulerMock()) {\n        ...\n    }\n}\n</code></pre> <p>Now you can use the scheduler object for several things. First if you want to perform a single or multiple ticks, you can call the methods <code>performTick()</code> or <code>performTicks(long)</code>:</p> <pre><code>scheduler.performTick();\nscheduler.performTicks(20);\n</code></pre> <p>We also have a method that allows to get the number of ticks since the <code>BukkitSchedulerMock</code> was created.</p> <pre><code>scheduler.getCurrentTick();\n</code></pre> <p>There are some additional features of this scheduler:</p> <pre><code>scheduler.close(); //(1)!\nscheduler.waitAsyncTasksFinished(long); //(2)!\nscheduler.waitAsyncTasksFinished(); //(3)!\n</code></pre> <ol> <li>Shuts down the scheduler. Already called thanks to with \"try with resources\".</li> <li>Wait for all async tasks to finish.</li> <li>One second timeout.</li> </ol>","title":"Handling BukkitScheduler"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#expanded-visibility-for-testing","text":"<p>Sometimes you need a method, class or field to be accessible for your JUnit tests but not for external code. Generally a good way to achieve this is using the default (package-local) access modifier instead of <code>private</code>. Of course the unit tests must be located in the same package for this to work.</p> <p>To clearly mark such elements, that are more widely visible than necessary only for use in test code,  the <code>@VisibleForTesting</code> annotation can be added. Make sure you import it from <code>org.betonquest.betonquest.api.annotation</code>, not from Google Commons or Apache.</p> <p>This will also suppress the PMD rule <code>CommentDefaultAccessModifier</code>  which requires you to add a <code>/* default */</code> or <code>/* package */</code> comment when using default access modifier.</p>","title":"Expanded visibility for testing"},{"location":"Participate/Process/Docs/Guidelines/","text":"<p>You need to follow these rules in order to contribute to the docs. They are important for a good user experience and provide a consistent baseline for other contributors to work with.</p>","title":"Guidelines"},{"location":"Participate/Process/Docs/Guidelines/#line-length","text":"<p>All lines must be wrapped after 121 character. You can exceed this limit by a few characters where reasonable. Tables and other special syntax are exempt from this rule.</p>","title":"Line length"},{"location":"Participate/Process/Docs/Guidelines/#links","text":"<p>Links can be created using Markdown's link syntax:</p> <p><pre><code>Click the [highlighted words](Contributing.md).\n</code></pre> Result: Click the highlighted words.</p>","title":"Links"},{"location":"Participate/Process/Docs/Guidelines/#displaying-yaml-code","text":"<p>You must use code boxes with the specific language set in the header (<code>YAML</code> in this example). You also have to enable line numbers by adding the <code>linenums=\"1\"</code> argument.  Sometimes a setting a title using <code>title=\"Some Title\"</code> is also useful.  Example code<pre><code> ``` YAML linenums=\"1\" title=\"Codebox\"\n use: \"codeboxes for code\"\n ```\n</code></pre></p> <p>Result: Codebox<pre><code>use: \"codeboxes for code\"\n</code></pre></p>","title":"Displaying (YAML) code"},{"location":"Participate/Process/Docs/Guidelines/#referring-to-yaml-elements-in-written-text","text":"<p>An example of this would be to reference an event name in an explanation.</p> <pre><code>The event `someEvent` prints a message to the player!\n</code></pre> <p>Result: The event <code>someEvent</code> prints a message to the player!</p>","title":"Referring to YAML elements in written text"},{"location":"Participate/Process/Docs/Guidelines/#file-names","text":"<p>Replace all spaces in file and folder names with <code>-</code>!</p>","title":"File names"},{"location":"Participate/Process/Docs/Guidelines/#referring-to-file-names-in-written-text","text":"<p>File names in written text must be quoted and italic.</p> <p>Example: Open \"events.yml\" to add these new events.</p>","title":"Referring to File Names in written text"},{"location":"Participate/Process/Docs/Guidelines/#markdown-formatting-conventions","text":"<p>Unfortunately, there are different ways to format text in Markdown. Please use the syntax outlined here:</p>","title":"Markdown Formatting Conventions"},{"location":"Participate/Process/Docs/Guidelines/#bold","text":"<p>Bold text is surrounded by two asterisks on each side: <code>**Bold text**</code></p>","title":"Bold"},{"location":"Participate/Process/Docs/Guidelines/#italic","text":"<p>Italic text is surrounded by one underscore on each side: <code>_Italic text_</code></p>","title":"Italic"},{"location":"Participate/Process/Docs/Guidelines/#lists","text":"<p>Lists must be declared as such:</p> <pre><code>* Top Level\n    - Second Level\n    - Second Level\n* Another Top level\n</code></pre> <p>Result:</p> <ul> <li>Top Level<ul> <li>Second Level</li> <li>Second Level</li> </ul> </li> <li>Another Top level</li> </ul>","title":"Lists"},{"location":"Participate/Process/Docs/Principles/","text":"<p>A brief overview of basic documentation principles.</p>  Strive for consistency. <p>Documentation should be as consistent as possible. This enables users to apply familiar structures (e.g. the structure of explanations) to new topics in the documentation.</p>   Write for a global audience. <p>A global audience does not share the same cultural background. That's why you should avoid references to things that are unique to your culture. Example:</p> <ul> <li>The Australian summer season starts in december.</li> </ul> <p>This is also true for certain words or patterns in your language:</p> <ul> <li>Foo and Bar as synonyms for \"example words\" are likely unknown to non-native speakers and translation software.</li> </ul> <p>Take a look at the  Microsoft Style Guide for Global Communications to learn more.</p>   Write for non-native speakers. <p>Users from all over the world will read this documentation. Most of them are not native speakers, some even use translators. Simple language should be used to make sure everyone can understand the documentation.</p>   Write for beginners and masters alike. <p>Your audience contains people with all kinds of skill levels - this is true for both BetonQuest skills but also for general computer skills. Try to find common ground between these two. New users must still be able to understand your documentation while more experienced users shouldn't be bored by the same explanations over and over again.</p> <p>One great way to do this is by providing optional context through links to other pages.</p>   Write documentation about features, not code. <p>Users will have a hard time understanding features that are explained in technical terms. Describe what a feature does not how it works. The same is true for feature names.</p>","title":"Fundamental Principles"},{"location":"Participate/Process/Docs/Workflow/","text":"<p>Make sure to set up the project before doing this step. You should always create a new branch everytime you write new documentation, fix something or make other changes.</p>","title":"\ud83d\udc68\u200d\ud83c\udfeb Changing Docs"},{"location":"Participate/Process/Docs/Workflow/#live-preview","text":"<p>Run this command in IntelliJ's terminal window (at the bottom) to start a live preview of the documentation. It will be available on 127.0.0.1:8000 by default.</p> <pre><code>mkdocs serve --livereload # (1)\n</code></pre> <ol> <li><code>--livereload</code> is an optional argument that determines that only changed files will be re-build.    This drastically decreases build time. However, it may lead to inaccurate navigation within your site.    Serve without this argument to validate your changes once finished.</li> </ol> <p>You should work with the live preview as the documentation does not just contain plain markdown, there are many custom elements which are only visible in the preview. The preview updates whenever you click outside of IntelliJ or trigger a file save.</p>  Hosting on your entire local network <p>You can also execute this variation to host the website in your local network. This can be useful for testing changes on different devices but is not needed for most tasks. Make sure the hosting device's firewall exposes the port 8000. <pre><code>mkdocs serve -a 0.0.0.0:8000\n</code></pre></p>  <p>We use the Material for MkDocs theme for our documentation. Check their documentation to see all custom elements and features.</p>","title":"Live Preview"},{"location":"Participate/Process/Docs/Workflow/#make-changes","text":"<p>Now go ahead and make your changes. Take a look at the sub-pages of this page for more information about how to write good documentation.</p>","title":"Make changes"},{"location":"Participate/Process/Docs/Workflow/#commit","text":"<p>You need to commit your changes once they are done. You can do this with IntelliJ's Git integration.</p> <p>Here are a few tips how to make good commits:</p> <p>All docs-only commits need to be prefixed with <code>[DOCS]</code>. This helps to distinguish them from technical commits that have a very similar name. Additionally, commit names should be short. If needed, provide more detail in the description.</p> <p>A commit needs to be atomic which means it only contains changes that belong together. Large changes may also be split into multiple commits. This makes it easier to understand your changes.</p> <p>Example: Originally you just wanted to fix a spelling mistake, but you also added more examples to a different part  of the documentation while doing so. Now you should separate these two (logically different) changes into two separate commits. With other words, don't mix up different changes.</p>","title":"Commit"},{"location":"Participate/Process/Docs/Workflow/#where-to-continue","text":"<p>If you also want to adjust the code switch to Changing Code. Once you are done with all changes, continue with Maintaining Changelog. In case you already did that: Continue with Submitting Changes.  </p>","title":"Where to Continue?"},{"location":"Tutorials/Frequently-Asked-Questions/","text":"<p>If you have any questions please read this page first. You can easily look for your questions using the table of contents  to the right. It's very likely that it has been already asked and answered.  If not, feel free to ask us in the Discord </p>","title":"FAQ"},{"location":"Tutorials/Frequently-Asked-Questions/#where-is-the-command-for-creating-quests","text":"<p>There is no such command. BetonQuest is too complex to edit it using commands or chest GUI's. We have a VSCode addon to make editing easier.</p>","title":"Where is the command for creating quests?"},{"location":"Tutorials/Frequently-Asked-Questions/#can-you-add-particles-over-npcs-heads-like-in-quests-plugin","text":"<p>Yes! Check out the EffectLib compatibility documentation.</p>","title":"Can you add particles over NPCs' heads like in \"Quests\" plugin?"},{"location":"Tutorials/Frequently-Asked-Questions/#can-i-assign-multiple-conversation-files-to-one-npc","text":"<p>No. You can use cross-conversation-pointers though.</p>","title":"Can I assign multiple conversation files to one NPC?"},{"location":"Tutorials/Frequently-Asked-Questions/#can-i-delete-all-tags-from-a-player-at-once","text":"<p>No. You either need to run all <code>/q t del PLAYER PACKAGE.TAG</code> commands, or you can use <code>/q purge PLAYER</code> to reset an entire player profile. If you want this as a scripted part of your quest however: Either use a folder event that holds all tag-deleting events. Or use a <code>run</code> event in which you specify all tag-deleting events at once. (We will improve this don't worry)</p>","title":"Can I delete all tags from a player at once?"},{"location":"Tutorials/Frequently-Asked-Questions/#how-do-i-start-an-objective-from-a-conversation","text":"<p>Use the objective event.</p>","title":"How do I start an objective from a conversation?"},{"location":"Tutorials/Frequently-Asked-Questions/#why-is-x-thing-not-working","text":"<p>If something stopped working before asking for help please do /q reload and READ THE OUTPUT IN CONSOLE! You will be able to see which events etc. loaded and which didn't with the reasons why. You may be able to fix it yourself from this or use this information, so we can better help you!</p> <p>Also double check you saved your files and if needed re-upload them to your server. This is insanely common and can be overlooked!</p>","title":"Why is X thing not working?"},{"location":"Tutorials/Frequently-Asked-Questions/#i-have-an-error-which-says-cannot-load-pluginsbetonquestsomefileyml-what-is-wrong","text":"<p>You have incorrect YAML syntax in your conversation file. Usually it's because you started a line with <code>!</code> or <code>&amp;</code>, forgot colons or made some weird things with apostrophes.</p>","title":"I have an error which says \"Cannot load plugins/BetonQuest/{someFile}.yml\", what is wrong?"},{"location":"Tutorials/Frequently-Asked-Questions/#how-to-get-a-formatted-version-of-the-blockobjectives-variables","text":"<p>The math variable is perfect for this. <code>/papi parse USER %betonquest_BlockVar:math.calc:|objective.test.left|%</code></p>","title":"How to get a formatted version of the BlockObjective's variables?"},{"location":"Tutorials/Frequently-Asked-Questions/#how-to-display-1-10-in-objective-notify","text":"<p>This problem can be solved by scripting a small custom message system.</p> <p>The core ideas of that system are:</p> <ul> <li> <p>An objective always has an amount of 1 as we want to show a message upon each progression towards our goal.</p> </li> <li> <p>The objective instantly restarts after it is finished thanks to the <code>persistent</code> argument.    It will be deleted using the objective event once it's finished.</p> </li> <li> <p>The systems logic is essentially just a point variable that is increased on each completion and a notify event being run.   That notify event displays the current objective progress.</p> </li> <li> <p>The objective gets reset with an event that has a condition bound to it. That means that the event will only be run once   the condition is true. in this case the player needs 10 points / needs to have mined 10 blocks.</p> </li> </ul> <p>Here is an example for the block objective. <pre><code>objectives:\n  mineStone: \"block stone -1 persistent events:blockBroken\"\n\nevents:\n  blockBroken: \"folder addPoint,sendNotify,checkForCompletion\"\n\n  addPoint: \"point blockCounter 1\"\n  sendNotify: \"notify &amp;a%point.blockCounter.amount%&amp;8/&amp;210 &amp;7stone broken. io:chat\"\n\n  checkForCompletion: \"run ^objective remove mineStone ^deletepoint blockCounter conditions:has10Points\"\n\nconditions:\n  has10Points: \"point blockCounter 10\"\n</code></pre></p>","title":"How to display \"1 / 10\" in objective notify"},{"location":"Tutorials/Frequently-Asked-Questions/#how-can-i-let-the-npc-say-things-across-multiple-lines","text":"<p>You need to use the PIPE <code>|</code> character at the start of the multiline string. <pre><code>text: |\n  This is line one.\n  This is line two.\n\n          You\n        can also\n  format this using spaces.\n</code></pre></p>","title":"How can I let the NPC say things across multiple lines?"},{"location":"Tutorials/Frequently-Asked-Questions/#how-to-deal-with-unresolvable-variables-that-show-0","text":"<p>You can just add them together using <code>math.calc</code>. <pre><code>%math.calc:objective.PickWheat1.left+objective.PickWheat2.left+objective.PickWheat3.left+objective.PickWheat4.left'\n</code></pre></p>","title":"How to deal with unresolvable variables that show \"0\"?"},{"location":"Tutorials/Frequently-Asked-Questions/#how-to-match-different-items-with-just-one-condition","text":"<p>If you want a player to have e.g. <code>potato + poisonous_potato = 64</code> in his inventory you can make a special item in your  <code>items</code> section file that matches items based of their names.  More specifically, you can have a Block Selector that is a regex. It would look like this in the example: <pre><code>items:\n  anyPotato: \".*potato.*\"\n\nconditions:\n  hasAnyPotato: \"item anyPotato\"\n</code></pre></p>","title":"How to match different items with just one condition?"},{"location":"Tutorials/Frequently-Asked-Questions/#how-to-store-custom-text-in-a-variable-how-to-use-the-variable-objective","text":"<ol> <li> <p>Start a variable objective for the player. It serves as a variable storage: <pre><code>objectives:\n  myVariableStorage: \"variable no-chat\"\n</code></pre></p> </li> <li> <p>Assign values to that storage using a key and a value. Both can be any text you like: <pre><code>events:\n  addBlock: \"variable myVariableStorage blockName REDSTONE\"\n  addLocation: \"variable myVariableStorage location 123;456;789;world\"\n</code></pre></p> </li> <li> <p>Read from your variable storage using the storages name and the data key. <pre><code>conditions:\n  hasHeartBlock: \"testforblock %objective.myVariableStorage.location% %objective.myVariableStorage.blockName%\"\n</code></pre></p> </li> </ol>","title":"How to store custom text in a variable / How to use the variable objective?"},{"location":"Tutorials/Frequently-Asked-Questions/#error-quester-is-not-defined","text":"<p>You either actually did not define the <code>quester: someName</code> option at the top of your conversation, or your YAML syntax is invalid. YAML Syntax Errors are the HUGE red lines that you see when you do /q reload. They lead to the file not being properly read -&gt; All kinds of errors like \"can't find quester etc.\" Copy your file into http://www.yamllint.com/ to confirm that it is actually a YAML error and fix your syntax. Best practise is to define all options like this: <code>myOptionName: \"myData\"</code> The double quotes prevent YAMl issues with e.g. <code>!</code>.</p>","title":"Error \"Quester is not defined\""},{"location":"Tutorials/Frequently-Asked-Questions/#other-plugins-override-betonquest-commands-betonquest-overrides-other-commands","text":"<p>You can change which command is used, using a Bukkit feature: https://bukkit.gamepedia.com/Commands.yml</p>","title":"Other plugins override BetonQuest commands / BetonQuest overrides other commands!"},{"location":"Tutorials/Frequently-Asked-Questions/#handling-death-in-your-quests","text":"<p>Sometimes, while writing a dangerous quest you will want something specific to happen when the player dies. If it's a boss battle you may want to fail the quest, if it's a dungeon you may want to respawn the player at the beginning of a level etc. You can do that with <code>die</code> objective - simply start it for the player at the beginning of the quest and make it fire events that will do the thing you want (like teleporting the player to desired respawn point, removing tags set during the quest etc). You can add <code>persistent</code> argument to the objective instruction string to make it active even after completing it. Remember to <code>delete</code> it after the quest is done!</p>","title":"Handling death in your quests"},{"location":"Tutorials/Frequently-Asked-Questions/#creating-regions-for-one-player-at-the-time","text":"<p>Imagine you have a room to which the player is teleported. Then suddenly mobs start to spawn and the player must kill them (because it's a trap or something). The player has killed all the mobs, he got a tag and wants to proceed but all of the sudden another player teleports into the room and all the mobs start to spawn again. The first player is quickly killed and the second one easily kills all mobs. You can prevent such situations by using <code>party</code> condition. Just check with it if the party consisting of \"players inside the room\" has greater amount of players that 1. Set the range to something big enough so it covers the room and the party condition can be tag or location.</p>","title":"Creating regions for one player at the time"},{"location":"Tutorials/Frequently-Asked-Questions/#racing-with-folder-event","text":"<p>Since <code>folder</code> event can run <code>tag</code> events even for offline players you can create races. Create <code>location</code> objective where you want the finish line to be and condition it with negated \"race_failed\" tag (or similar). It will mean that \"if the player has not failed the race, he can win it by reaching the location\". Now when the race starts fire <code>folder</code> event with the amount of time you want to give your players to complete the race. This event should set \"race_failed\" tag. If the player reaches the location before this tag is set, he will fire all events in that <code>location</code> objective, but if the time has passed, the objective will not be completed. You can figure the rest out for yourself.</p>","title":"Racing with folder event"},{"location":"Tutorials/Frequently-Asked-Questions/#random-daily-quests","text":"<p>Starting the random quest must be blocked with a special tag. If there is no such tag, the conversation option should appear. Create a few quests, each of them started with single <code>folder</code> event (they must be started by single event!). Now add those events to another <code>folder</code> event and make it <code>random:1</code>. At the end of every quest add <code>delay</code> which will reset the special blocking tag. Now add that <code>folder</code> event to the conversation option. When the player chooses it he will start one random quest, and the conversation option will become available after defined in <code>delay</code> objective time after completing the quest.</p>","title":"Random daily quests"},{"location":"Tutorials/Frequently-Asked-Questions/#the-same-random-daily-quest-for-every-player","text":"<p>To do this use something called \"Static event\". Run a static <code>folder</code> event every day at some late hour (for example 4am). The <code>folder</code> event should be <code>random:1</code> and contain several different <code>globaltag</code> events. These events will set a specific tag. Now when the player starts the conversation and asks about the daily quest the NPC should check (using the <code>globaltag</code> condition) which tag is currently set and give the player different quests based on that. Of course, the static folder event also needs to remove the the current tag before setting a new one.</p>","title":"The same random daily quest for every player"},{"location":"Tutorials/Frequently-Asked-Questions/#global-quests-all-players-work-together","text":"<p>There is no easy way to do this (yet). Additionally, every use case differs. Let's assume you have some sort of event on your server where your player's need to fish 100 salmons. The quest package is only installed during the event.</p> <p>Create an objective that is immediately fired upon the first interaction (this means setting the amount to one for most objectives). That objective must be <code>persistent</code> so it restarts immediately upon completion. It also has to be <code>global</code> so every player will receive it upon joining the server. <pre><code># fish a salmon to progress the global quest\ngQuest: fish SALMON 1 events:gQuestProgress global persistent\n</code></pre> The objective would trigger a folder event that increases a <code>globalpoint</code> variable by one and tries to run the events that are fired upon completion. That globalpoint variable tracks the players combined progress. The \"completion events\" must be limited by a <code>globalpoint</code> condition that checks whether the <code>globalpoint</code> variable has reached a certain value.</p> eventsconditions   <pre><code># 1. increase the global variable 2. wait one tick for the change to process 3. attempt to run the completion events\ngQuestProgress: folder gQuestIncrementCounter,gQuestCheckCompletion period:1 ticks\n# Adds 1 to the global variable\ngQuestIncrementCounter: globalpoint gQuest 1\n# Runs completion events only when the condition is met (= the global variable reached X points)\ngQuestCheckCompletion: folder gQuestNotify,gQuestOnCompletion,gDeleteObjective condition:gQuestComplete\n# Deletes the objective from everyone that fished a salmon after the goal was met\nqDeleteObjective: \"objective delete gQuest\"\n</code></pre>   <pre><code># Complete at one hundred collected\ngquest_complete: globalpoint gquest 100\n</code></pre>    <p>Downsides to this approach:</p> <ul> <li> <p>Only the player that fished the final salmon (number 100) will get the reward immediately. All other players need to fish an additional salmon to trigger the completion logic. Therefore a central NPC that also gives out rewards and shows the progress is recommended.</p> </li> <li> <p>Since some players logged off during the event while still having the objective, a clean-up package should be installed after the event. It will remove the objective from them - this is important as BetonQuest will complain about objectives that are still active for a player but are not referenced in any quest package. This will happen since you have to remove the event package after the event.</p> </li> </ul> <p>Such a package holds the original objective and clean-up objective:</p> objectivesevents   <pre><code># Old objective just without global &amp; persistent to make sure no one get's it automatically\ngQuest: fish SALMON 1 events:gQuestProgress\n# Cleanup objective that is immediately completed when someone joins\nlogin events:deleteOldObjective global\n</code></pre>   <pre><code># Deletes the old objective from the current player\ndeleteOldObjective: \"objective delete gQuest\"\n</code></pre>","title":"Global Quests (all players work together)"},{"location":"Tutorials/Frequently-Asked-Questions/#make-the-npc-react-randomly","text":"<p>Imagine you want to lie to NPC and he has 15% chance of believing you completely, 35% of being suspicious and 50% of not believing at all. The common denominator for those percentages is 20, so we can write it as 3/20, 7/20 and 10/20. The NPC will check options one after another until it finds one which meets all conditions. We will use <code>random</code> condition with our options. The first one will have <code>3-20</code> chance (that's the format used by <code>random</code> condition). If this condition fails, the NPC will check next option. But it won't be <code>7-20</code>, because we already \"used\" 3 of 20. If you wrote it like that, the chance would be too low. That's why it will be <code>7-17</code>. The third option should have <code>10-10</code> (because <code>17 - 7 = 10</code> and 50% is 10/20), but as you can see it will always be true. It's because we want the last option to be shown if both previous fail. You don't have to add the last condition at all.</p>","title":"Make the NPC react randomly"},{"location":"Tutorials/Frequently-Asked-Questions/#quest-gui","text":"<p>If you want your players to be able to choose a quest everywhere, every time, then you can create a conversation which can be started with an item. This one is a little hacky but it shows flexibility of BetonQuest. First you need a conversation which behaves as a quest choosing GUI. Name the NPC \"Quester\", add one option for each quest etc. Now you need an objective which will start this conversation using <code>conversation</code> event. It should be <code>action</code> objective, set to right click on any block. Add <code>hand</code> condition to make it accept only clicks with a specific item and make the objective <code>persistent</code> (so players can use it multiple times). The item used here should be marked as Quest Item so players can't drop it. Now define new global location covering your whole map and using it start the objective and give players the item. This way all players (existing and new) will get the quest item, which opens a GUI with quests when right clicked.</p>","title":"Quest GUI"},{"location":"Tutorials/Frequently-Asked-Questions/#non-linear-objectives-in-quests","text":"<p>If ever you're making a quest that has the player completing multiple objectives at once in order to complete the quest itself, you may want to add the option of being able to complete the objectives in a non-linear fashion (Objective C -&gt; Objective A -&gt; Objective B -&gt; Completed). There are multiple ways of doing this but this one is probably the simplest. Firstly, create as many objectives as you want. We are going to be working with three objectives:</p> objectives   <pre><code>Objective_A: Objective_Arguments events:Rewards\nObjective_B: Objective_Arguments events:Rewards\nObjective_C: Objective_Arguments events:Rewards\n</code></pre>    <p>Now that the player has been given these three objectives, we will also create three <code>objective</code> conditions that check the player for these objectives:</p> conditions   <pre><code>Has_Objective_A: objective Objective_A\nHas_Objective_B: objective Objective_B\nHas_Objective_C: objective Objective_C\n</code></pre>    <p>We will also create one <code>and</code> condition, which means a player must (or must not, depending on negation)  meet all conditions in order for it to return as true. In this case, the player must not be in the process of completing these objectives. The <code>!</code> in front of the ConditionIDs negates the arguments within the condition. Make sure you have wrapped the condition with <code>'</code> or <code>\"</code> depending on your preferences.</p> conditions   <pre><code>All_Objectives_Done: 'and !Has_Objective_A,!Has_Objective_B,!Has_Objective_C'\n</code></pre>    <p>Finally, create the event that you wanted to use to give the quest rewards to the player. To this event, you will add the <code>All_Objectives_Done</code> condition. This ensures that the event will not be fired unless the player has completed all objectives.</p> events   <pre><code>Rewards: RewardEventArguments condition:All_Objectives_Done\n</code></pre>    <p>Now, simply add this <code>Rewards</code> event to every one of your objectives and you have now created a way for players to complete a quest's objective in a non-linear fashion! You can add as many or as little objectives as you want, you just have to add the additional objectives to the conditions.</p>","title":"Non-Linear Objectives in Quests"},{"location":"Tutorials/Frequently-Asked-Questions/#creating-quest-menus","text":"<p>To create a menu that gives the player a overview of his open quests just define one menu item for each quest. Set the conditions for this item so it is only displayed if the quest is not finished (use the tag condition). Then assign all those items to a row of slots so that they are sorted perfectly.</p> <p>You can also add click events to display npc locations, add compass targets, directly open the conversations or cancel the quest.</p> <p>Or you could define separate items for open and finished quests or even to show the progress. Just be a bit creative.</p>","title":"Creating quest menus"},{"location":"Tutorials/Frequently-Asked-Questions/#menus-displaying-players-stats","text":"<p>You may also use menus to display the stats of a player. Just use variables in the text or for the amount of an item.</p> <p>For example try displaying a players money using the variable from Vault integration or use PlaceholderAPI to show placeholders from many other plugins.</p>","title":"Menus displaying players stats"},{"location":"Tutorials/Overview/","text":"<p>Thanks for using BetonQuest! The plugin has tons of features and therefore requires some learning. This documentation provides you with a large number of high quality tutorials that will make you a great quest writer.</p> <p>However, help is not far if you get stuck. We have a Discord  for questions.</p> <p> Start the Tutorial Setup </p>  <p>Work in Progress!   </p> <p>The tutorials are currently getting redesigned.</p> <p>Therefore, the \"Basic\" section does not actually contain all basics yet. </p> <ul> <li> Conversations</li> <li> Events</li> <li> Objectives</li> <li> Conditions</li> <li> YAML for questers (old page still in place)</li> </ul> <p>The old tutorial is still available in the mean time. We appreciate any feedback on the new tutorials!</p>","title":"Welcome to the Tutorials"},{"location":"Tutorials/Getting-Started/Learn-BetonQuest/","text":"","title":"Old Tutorial"},{"location":"Tutorials/Getting-Started/Learn-BetonQuest/#checking-out-the-default-example-quest","text":"<p>First you need to execute the following command to download the example quest: <pre><code>/q download BetonQuest/Quest-Tutorials main QuestPackages /default\n</code></pre></p> <p>Let's start by checking out the downloaded example quest. You can find it in the BetonQuest directory that has been generated in your \"plugins\" folder. The folder you are looking for is named \"QuestPackages/default/\".</p> <p>Open it up and find a file called package.yml. It contains a lot of options, but you only need to look at this section: <pre><code>npcs:\n  '0': innkeeper\n</code></pre> You will need to change the <code>'0'</code> to the ID of the Citizens NPC you want to learn Beton with.  You obtain a NPC's ID by selecting it with /npc sel while looking at it and then running /npc id.  Execute /q reload and right-click the NPC.</p> <p>The conversation should start. If it did not, check if you correctly assigned the ID. Ask the Innkeeper for some quests. He will tell you to cut some trees. If you want, type /journal to get the journal and see a new entry. Now, don't try to place any wood blocks. BetonQuest will detect that and increase the number of blocks to destroy. Just go and find some trees that you can cut down. Now you can return to the Innkeeper and give him the wood. You will receive the reward.</p>","title":"Checking out the \"default\" example quest."},{"location":"Tutorials/Getting-Started/Learn-BetonQuest/#using-events-and-conditions","text":"<p>Now that you know how a (very) simple quest looks like time to start learning how to write something similar.  Let's start with events. We won't do conversations just now, since they heavily use events and conditions,  so you need to know them first. You can read complete reference to events in the Reference chapter. Do that now or just continue with this tutorial.</p>","title":"Using events and conditions"},{"location":"Tutorials/Getting-Started/Learn-BetonQuest/#events","text":"<p>Let's just open events.yml file inside the default package. Add a new line at the bottom, note the 2 spaces at the beginning of the line: <pre><code>  mega: \"notify Hello world!\"\n</code></pre></p> <p>This is an event instruction. BetonQuest will use it to determine what type of event is used and what exactly it should do. <code>mega</code> is the event's name, <code>notify</code> is the events type and <code>Hello world!</code> tells the notify event what it needs to display. In this case, if you run <code>mega</code> event, it will display <code>Hello world!</code> as a chat message. Now save the file, issue /q reload command and run the event with /q e {name} default.mega command (<code>q</code> is shortcut for <code>quest</code>, <code>e</code> is shortcut for <code>event</code>, <code>{name}</code> is your Minecraft name without the brackets, <code>default</code> is the package/quest and <code>mega</code> is the name of the event we've just created). It should show you a <code>Hello world!</code> notification in the chat.</p> <p>Let's create another event, a more complicated one. <code>teleport</code> seems complicated enough. As you can read in the Events list, it needs a single argument, the location. Press F3 and check out your current location (it's shown on the left, three numbers, <code>x</code>, <code>y</code> and <code>z</code>). Now add in events.yml another line:</p> <pre><code>  tp: \"teleport 100;200;300;world\"\n</code></pre> <p>and replace <code>100</code> with your <code>x</code> coordinate, <code>200</code> with <code>y</code> and <code>300</code> with <code>z</code>. <code>world</code> needs to be replaced with your  current world's name. Save the file, reload the plugin (/q reload) and run this event with a command described before. It should teleport you to the location you have specified.</p> <p>Congratulations, you have just created your first events. Go ahead and do some experiments with other event types.  You can find them in Events list chapter. Once you're done let's start learning conditions.</p>","title":"Events"},{"location":"Tutorials/Getting-Started/Learn-BetonQuest/#conditions","text":"<p>Open the conditions.yml file and add a new line:</p> <pre><code>  mega: \"location 100;200;300;world 5\"\n</code></pre> <p>Can you see how we named the <code>mega</code> condition in the same way as the <code>mega</code> event? They are not connected in any way. Condition names and event names are separated, so you can give them the same name without any problems. Now let's look at the instruction string. As you can suspect, <code>location</code> is a type of the condition. This one means that we'll be  checking if the player is near that location (you should change the location to the place where you're standing right now, so you don't have to run around the world). Note that at the end of location argument there is an additional number, <code>5</code>. This is the maximum distance you can be away from the location to meet the condition. Alright, save the file and reload the plugin.</p> <p>Now walk to the location you have defined in the condition. Try to stand on the exact block corresponding to that location.  Issue /q c {name} default.mega command (<code>c</code> is shortcut for <code>condition</code>). It should show you \"Condition blah blah blah: true\". We're focusing on that last word, true. This means that you're meeting the condition: you're standing within 5 block radius of the location. Now move 2 blocks away and issue that command again. You should still be meeting the condition.  Walk 4 more blocks away and try now. It should show false. You are now outside that 5 block radius. Get it? Great.</p> <p>Now I'll show you the simplest use of those conditions. Open the events.yml file again, and at the end of <code>mega</code>  instruction add <code>conditions:mega</code> argument. By the way, rename your events to something that actually fits the type of the event, otherwise it will get confusing really fast. Example:</p> events.ymlconditions.yml   <pre><code>  # This is a comment btw\n  # Old:\n  mega: \"notify Hello world!\"\n\n  # New:\n  sayHello: \"notify Hello world! conditions:isAtSpawn\"\n</code></pre>   <pre><code>  # Old:\n  mega: \"location 100;200;300;world 5\"\n\n  # New:\n  isAtSpawn: \"location 100;200;300;world 5\"\n</code></pre>    <p>Now <code>sayHello</code> event will run only if it meets <code>isAtSpawn</code> condition. Reload the plugin, walk outside the 5 block radius and try to run <code>sayHello</code> event. Puff, nothing happens. It's because you're not meeting <code>isAtSpawn</code> condition. Walk into the radius again and try to run that event now. It should happily display the <code>Hello world!</code> notification.</p> <p>It's very nice that we can add such conditions, but the problem is: what if you wanted to display the notification only if the player is outside the radius? Don't worry, you don't have to specify <code>inverted_location</code> condition or anything like that. You can simply negate the condition. Negation makes the condition behave in the exact opposite way, in this case it <code>isAtSpawn</code> will be met only if the player is outside the 5 block radius, and it won't be met if he's inside. Open the events.yml and add an exclamation mark before the <code>isAtSpawn</code> condition, so it looks like this:</p> <pre><code>  sayHello: \"notify Hello world! conditions:!isAtSpawn\"\n</code></pre> <p>This means \"display the <code>Hello world!</code> notification if the <code>isAtSpawn</code> condition is not met\". Save the file, reload the plugin and run the event inside and outside the radius to see how it works.</p>","title":"Conditions"},{"location":"Tutorials/Getting-Started/Learn-BetonQuest/#basic-tags","text":"<p>Now that you know how to use events and conditions I'll show you what tags are. Create new events:</p> <pre><code>  add_beton_tag: \"tag add beton\"\n  del_beton_tag: \"tag delete beton\"\n</code></pre> <p>It's a good practice to give your events names that describe what they are doing. Imagine you have 100 events, <code>foo24</code>, <code>bar65</code>, <code>baz12</code> etc. You would get lost pretty quickly. So, <code>add_beton_tag</code> event here simply adds <code>beton</code> tag to the player, <code>del_beton_tag</code> removes it. Save the file, reload the plugin and run this event. Nothing happens... or does it? Issue /q t {name} command (<code>t</code> is shortcut for <code>tags</code>). It should show you a list with few entries. Right now focus on <code>default.beton</code>, the rest are used by the default quest for Innkeeper. Alright, <code>default</code> is the name of the package in which the tag is, and <code>beton</code> is the name of the tag, as defined in <code>add_beton_tag</code> event. Now run <code>del_beton_tag</code> event. Guess what, <code>default.beton</code> disappeared from the list! And that's it, you know how to add and remove tags. Pretty useless.</p> <p>Nothing could be more wrong. Tags are one of the most powerful things in BetonQuest. They just need to be used with <code>tag</code> condition. Open conditions.yml and add this line:</p> <pre><code>  has_beton_tag: \"tag beton\"\n</code></pre> <p>As you can imagine, <code>tag</code> is the type of condition (the same as <code>tag</code> event, but these are not the same things - one is an event, the other one is a condition) and <code>beton</code> is the name of the tag. You don't have to specify <code>default.beton</code>, but you can if you want. Now save, reload and check it with a command. It should show false, since you have removed the tag with <code>del_beton_tag</code> event. Add it again with <code>add_beton_tag</code> event and check the <code>has_beton_tag</code> condition again. Now it will show true.</p> <p>Now you probably understand how powerful this system is. You could for example set a tag on the first time the player talks with an NPC, and if the NPC sees that tag next time they talk, he will tell something different, like \"welcome back\".</p>","title":"Basic tags"},{"location":"Tutorials/Getting-Started/Learn-BetonQuest/#creating-objectives","text":"<p>Time to write some objectives! Open the objectives.yml file and add a new line:</p> <pre><code>  kill_creepers: \"mobkill CREEPER 3 events:tp conditions:has_beton_tag\"\n</code></pre> <p>Now let's analyze it. <code>kill_creepers</code> is a name of the objective. <code>mobkill</code> is a type. In this case, to complete the objective the player will have to kill some mobs. <code>creeper</code> is a type of the mob, so we know that these mobs will have to be Creepers. <code>3</code> is the amount. It means that the player has to kill 3 Creepers. <code>events:tp</code> means than once the player kills those Creepers, the <code>tp</code> event will be run. <code>conditions:has_beton_tag</code> tells us that the player will have to have <code>beton</code> tag while killing Creepers to complete the objective. Save it, reload the plugin and issue /q o {name} add default.kill_creepers command (<code>o</code> is for <code>objective</code>, <code>add</code> tells the plugin to add an objective).</p> <p>Now you can check if you actually have this objective with /q o {name} command, it will show you all your active objectives. It should show <code>default.kill_creepers</code>. Alright, remove (yes, remove!) the <code>beton</code> tag from you and find some Creepers to kill. Once you killed 3 of them you will notice that nothing happened. It's because <code>has_beton_tag</code> condition is not met, so the objective does not count your progress. Now add the tag again and kill another Creepers. When the third is dead you should be teleported to the location defined in <code>tp</code> event.</p> <p>Congratulations, now you know how to use objectives. You should experiment with other types now, since objectives will be used very often in your quests. Once you're done check out the Writing your first conversation chapter to use your knowledge to write your first conversation.</p>","title":"Creating objectives"},{"location":"Tutorials/Getting-Started/Learn-BetonQuest/#writing-your-first-conversation","text":"<p>Now that you have seen BetonQuest in action and understood events, conditions and objectives, it's time for writing your first conversation. There's a conversations directory inside the <code>default</code> package. It contains a single file, innkeeper.yml. This is the conversation with Innkeeper, the one who asks you to cut some trees. Open it, we'll use that for reference. Now create a new file, let's say miner.yml. Now type (don't copy-paste it, you'll learn better while typing) that into the file:</p> <pre><code>conversations:\n  miner:\n    quester: Miner\n    first: greeting\n    NPC_options:\n      greeting:\n        text: Hi there, traveler!\n</code></pre> <p>It's the most basic conversation possible. The NPC named <code>Miner</code> upon starting the conversation will use <code>greeting</code> option, which means he will say <code>Hi there, traveler!</code>. Then the conversation will end, because there are no player options defined. Now you need to link the conversation with an NPC. For that you now need to create or select another NPC. Then you link your conversation to the npc in the package.yml file. Open it now. As you can see the previous NPC conversation is linked to <code>Innkeeper</code> word. Now add another line under the Innkeeper: <code>'1': miner</code>, save the file and reload the server. This will link our new conversation with the NPC with the id \"1\". Now click on that NPC.</p> <p>Guess what, the conversation finished right after it started.  The Miner just said <code>Hi there, traveler!</code>, as expected. Now go to the conversation file and edit it (again, manually, no copy-paste!) so the options look like this:</p> <pre><code>    NPC_options:\n      greeting:\n        text: Hi there, traveler!\n        pointers: hello,bye\n    player_options:\n      hello:\n        text: Hello!\n      bye:\n        text: I need to go, sorry.\n</code></pre> <p>When you save the file, reload the plugin and start the conversation again you will notice that there are two options for you to choose: <code>Hello!</code> and <code>I need to go, sorry.</code> Choosing any of them will end the conversation, because these options did not specify any pointers.</p> <p>Now add a new NPC option, for example <code>weather</code> with text <code>Nice weather.</code> and make <code>hello</code> player option point to it. When you save&amp;reload, the Miner should say <code>Nice weather.</code> when you tell him <code>Hello!</code>. I think you get how it works.</p> <pre><code>    NPC_options:\n      greeting:\n        text: Hi there, traveler!\n        pointers: hello,bye\n      weather:\n        text: Nice weather.\n    player_options:\n      hello:\n        text: Hello!\n        pointer: weather\n      bye:\n        text: I need to go, sorry.\n</code></pre> <p>Now, every time you talk to the Miner, he will say the same thing. It would be nice if the second time you talk to him, he knew your name. We can do that with tags. Define a <code>meet_miner</code> event and <code>has_met_miner</code> condition. When you talk to the Miner for the first time, he will check if you have met him. If not, he will meet you (with that event) and next time you talk, the condition will be passed and he will use your name.</p> <p>Now, rename <code>greeting</code> NPC option to <code>first_greeting</code>. Add <code>meet_miner</code> event and negated <code>has_met_miner</code> condition (negated because this option should only show if the player has not met the Miner yet). You will need to surround the condition with <code>''</code>, because strings cannot start with exclamation marks in YAML. It should look like this:</p> <pre><code>    first: first_greeting\n    NPC_options:\n      first_greeting:\n        text: Hi there, traveler!\n        condition: '!has_met_miner'\n        event: meet_miner\n        pointers: hello,bye \n</code></pre> <p>This means: <code>first_greeting</code> should be used if the player does not pass <code>has_met_miner</code> condition (meaning he doesn't have a tag because he hasn't talked to the NPC yet). When this option is used, it will fire <code>meet_miner</code> event and display <code>hello</code> and <code>bye</code> options. Alright, but what happens if the player met the Miner and now negated <code>has_met_miner</code> condition doesn't work? NPC will try to use next option defined in <code>first</code> setting. There is none yet, so let's add it.</p> <pre><code>    first: first_greeting,regular_greeting\n    NPC_options:\n      regular_greeting:\n        text: Hi %player%!\n        pointers: hello,bye\n</code></pre> <p>This option does not have any conditions, so if the <code>first_greeting</code> fails, the NPC will always choose this one. Now take a look at the <code>%player%</code> thing. It's a variable. In this place it will show your name. There are more than this one, they are described in Reference chapter. Alright, save&amp;reload and start the conversation. If you did everything correctly, the Miner should greet you as a \"traveler\", and the second time you talk to him, he should greet you with your Minecraft name.</p> <p>Here's the whole conversation you created, so you can check if you understood everything correctly:</p> <pre><code>conversations:\n  miner:\n    quester: Miner\n    first: first_greeting,regular_greeting\n    NPC_options:\n      first_greeting:\n        text: Hi there, traveler!\n        condition: '!has_met_miner'\n        event: meet_miner\n        pointers: hello,bye \n      regular_greeting:\n        text: Hi %player%!\n        pointers: hello,bye\n      weather:\n        text: Nice weather.\n    player_options:\n      hello:\n        text: Hello!\n        pointer: weather\n      bye:\n        text: I need to go, sorry.\n</code></pre> <p>Now you should experiment some more with this conversation, you can help yourself by looking at the innkeeper.yml file. Try to understand how that conversation works step by step. As the exercise you should complete the Miner NPC, so he asks you to mine some iron ore, then smelt it in the furnace, next craft an armor with it and return to him wearing this armor.</p> <p>You might want to check out the Reference chapter to see how to handle items in  your quests and how to add entries to the journal. To find out more about events, conditions, objectives and variables, take a look at the appropriate lists (after the Reference chapter).</p>","title":"Writing your first conversation"},{"location":"Tutorials/Getting-Started/Basics/Conversations/","tags":["Conversation-Tutorials"],"text":"<p>In this tutorial you will learn the basics of the conversations. These allow you to create a dialog between the player and a NPC. Therefore, these are the basic tool for story telling.</p>   <p>Requirements</p> <ul> <li>Setup Guide</li> </ul>   <p>Related Docs</p> <ul> <li>Conversations</li> </ul>    <p>Download Tutorial Setup</p> <p>Enter this command in the chat to download the pre-made setup for this tutorial: <pre><code>/bq download BetonQuest/Quest-Tutorials main QuestPackages /Basics/Conversations/1-DirectoryStructure /tutorialQuest overwrite\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/tutorialQuest\"</p>","title":"Conversations"},{"location":"Tutorials/Getting-Started/Basics/Conversations/#1-linking-a-conversation-to-a-npc","tags":["Conversation-Tutorials"],"text":"<p>Usually, conversations happen between a NPC and the player.  Therefore, we need to create the <code>npcs</code> section in the package.yml so that the plugin knows which Citizens NPC uses which conversation. This is how it works:</p> <p>package.yml<pre><code>npcs:\n  '1': \"Jack\"\n</code></pre> This links the NPC with the given Citizens ID (<code>1</code>) to the conversation with the given identifier (<code>Jack</code>). Save the file after editing.</p>  How to find the Citizens NPC ID <p>Execute this command if you haven't created an NPC yet: <code>/npc create Jack</code> </p> <ol> <li>Stay close to the NPC you want to select</li> <li>Type the command <code>/npc select</code> to select the nearest NPC.</li> <li>Type the command <code>/npc id</code> to get the ID from your NPC.</li> </ol>","title":"1. Linking a conversation to a NPC"},{"location":"Tutorials/Getting-Started/Basics/Conversations/#2-creating-your-first-conversation","tags":["Conversation-Tutorials"],"text":"<p>It's time to create the first conversation with Jack! This chapter will teach you the basic structure of a conversation.</p> <p>Let's take a look at how a conversation is defined in the plugin's files:</p>  <p>Tip: Click the plus buttons next to the text for explanations! </p>  jack.yml<pre><code>conversations:\n  Jack: # (1)!\n    quester: \"Jack\" # (2)!\n    first: \"firstGreeting\" # (3)!\n    NPC_options: # (4)!\n      firstGreeting:\n        text: \"Hello and welcome to my town traveler! Nice to see you. Where are you from?\"\n        pointer: \"whereYouFrom\" # (5)!\n\n    player_options: # (6)!\n      whereYouFrom:\n        text: \"First I want to know who you are!\"\n</code></pre> <ol> <li>This is the identifier of the conversation. Make sure this equals the conversation identifier in \"package.yml\". </li> <li>Defines the name that is displayed during the conversation.</li> <li>Defines which <code>NPC_option</code> should be used as the start of the conversation.</li> <li>This section contains everything the NPC says.</li> <li>Defines which <code>player_option</code> is shown next. </li> <li>This section contains everything the player says.</li> </ol> <p>A BetonQuest conversation is a cycle of responses between the NPC and the player. Anything the NPC says is called <code>NPC_options</code>, everything the player answers is called <code>player_options</code>.</p> <p>A conversation always starts with an <code>NPC_option</code>.  Now the player must answer the NPC using a <code>player_option</code>.</p> <p>Options point to each other using the <code>pointer</code> argument. In the case of an NPC_option, the pointer argument would contain the name of a <code>player_option</code>.  Usually, a player has more than one answer to choose from. This is done by adding multiple <code>player_option</code> names to a <code>NPC_option</code>.</p> <p>After the player responded, they are shown another <code>NPC_option</code> that the previously chosen <code>player_option</code> points to.</p> <p>Whenever either a <code>player_option</code> or a <code>NPC_option</code> point to no other option the conversation ends as there are no more   responses or answers.</p>  <p>The Conversation Cycle</p> <pre><code>graph LR\nX{Conversation Starts} --&gt; C\nC[First NPC_option] --&gt; A\nA[player_option] --&gt; |Pointer|B[NPC_option];\nB --&gt; |Pointer|A;\nA -.No pointer present .-&gt; D\nB -.No pointer present .-&gt; D\nD{Conversation Ends}</code></pre>","title":"2. Creating your first conversation"},{"location":"Tutorials/Getting-Started/Basics/Conversations/#3-trying-the-conversation-ingame","tags":["Conversation-Tutorials"],"text":"<p>You can easily check if your quest is working on the server. Open the file \"jack.yml\" in the \"conversations\" folder. Copy the above conversation into it and save the file.</p> <p>Now type <code>/bq reload</code> in the chat and right-click the NPC.</p> <p>You can select the answer by pressing the jump key (Space by default).</p>","title":"3. Trying the Conversation ingame"},{"location":"Tutorials/Getting-Started/Basics/Conversations/#4-conversations-with-multiple-choices","tags":["Conversation-Tutorials"],"text":"<p>Let's see how to create multiple responses for the player to choose from using the <code>pointer</code> argument.</p> <p>A <code>NPC_option</code> can point to multiple player options at the same time. As soon as a pointer argument contains more than one <code>player_option</code>, the player can choose.</p>  <p>Tip: Highlighted lines in blue are new compared with the previous example. </p>  jack.yml<pre><code>conversations:\n  Jack:\n    quester: \"Jack\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hello and welcome to my town traveler! Nice to see you. Where are you from?\"\n        pointer: \"whereYouFrom\"\n      whoAmI:\n        text: \"I am &amp;6Jack&amp;r. The mayor of this beautiful town. We have some big farms and good old taverns well worth checking out! So now where are you from?\"\n        pointer: \"smallIsland,bigCity\" # (1)!\n      islandAnswer: \n        text: \"That sounds familiar! I grew up in a small town with few people. So we already have something in common! Do you want something to eat?\"\n      cityAnswer: \n        text: \"Oh I know! I think you're from Kayra, right? Nice city but to be honest I prefer country life... You look a bit hungry. Do you want something to eat?\"\n\n    player_options:\n      whereYouFrom: \n        text: \"First I want to know who you are!\"\n        pointer: \"whoAmI\" \n      smallIsland: # (2)!\n        text: \"From a small island located east.\"\n        pointer: \"islandAnswer\" # (4)!\n      bigCity:  # (3)!\n        text: \"From a big city located west.\"\n        pointer: \"cityAnswer\" # (5)!\n</code></pre> <ol> <li>This <code>NPC_option</code> points to multiple <code>player_options</code>. This allows the player to choose. The names of the <code>player_options</code> must be comma seperated.</li> <li>The <code>whoAmI</code> <code>npc_option</code> points to me.</li> <li>Gets pointed on by the <code>whoAmI</code> <code>npc_option</code>.</li> <li>Points to the <code>islandAnswer</code> <code>NPC_option</code>.</li> <li>Points to the <code>cityAnswer</code> <code>NPC_option</code>.</li> </ol> <p>With these changes, the mayor asks the player where he is from. The player can either say that they are from a <code>smallIsland</code> or from a <code>bigCity</code>. This creates two different paths through the conversation. </p>","title":"4. Conversations with multiple choices"},{"location":"Tutorials/Getting-Started/Basics/Conversations/#5-joining-conversation-paths","tags":["Conversation-Tutorials"],"text":"<p>Let's join these paths again to show the same ending: Add the same <code>pointer</code> argument to both paths' <code>NPC_options</code>. They point to the new <code>yesPlease</code> <code>player_option</code>. jack.yml<pre><code>conversations:\n  Jack:\n    quester: \"Jack\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hello and welcome to my town traveler! Nice to see you. Where are you from?\"\n        pointer: \"whereYouFrom\"\n      whoAmI:\n        text: \"I am &amp;6Jack&amp;r. The mayor of this beautiful town. We have some big farms and good old taverns well worth checking out! So now where are you from?\"\n        pointer: \"smallIsland,bigCity\"\n      islandAnswer:\n        text: \"That sounds familiar! I grew up in a small town with few people. So we already have something in common! Do you want something to eat?\"\n        pointer: \"yesPlease\" # (1)!\n      cityAnswer:\n        text: \"Oh I know! I think you're from Kayra, right? Nice city but to be honest I prefer country life... You look a bit hungry. Do you want something to eat?\"\n        pointer: \"yesPlease\" # (2)!\n      foodAnswer:\n        text: \"You're welcome! Take it... &amp;7*gives food*\"\n\n    player_options:\n      whereYouFrom:\n        text: \"First I want to know who you are!\"\n        pointer: \"whoAmI\"\n      smallIsland:\n        text: \"From a small island located east.\"\n        pointer: \"islandAnswer\"\n      bigCity:\n        text: \"From a big city located west.\"\n        pointer: \"cityAnswer\"\n      yesPlease: # (3)!\n        text: \"Oh yes I'm starving! Thank you.\"\n        pointer: \"foodAnswer\"\n</code></pre></p> <ol> <li>I point to <code>yesPlease</code> in the <code>player_options</code> section.</li> <li>I also point to <code>yesPlease</code> in the <code>player_options</code> section.</li> <li>Two <code>NPC_options</code> point to me.</li> </ol> <p>The following graph shows the paths through the conversation. Since there are two <code>pointers</code> assigned to the <code>whoAmI</code> option, the player can choose between one of the paths.</p>  <p>Conversation Flow Graph</p> <pre><code>stateDiagram-v2\n    [*] --&gt; firstGreeting: Interaction with NPC\n    firstGreeting --&gt; whereYouFrom: points to\n    whereYouFrom --&gt; whoAmI: points to\n    whoAmI --&gt; smallIsland: points to\n    whoAmI --&gt; bigCity: points to\n    smallIsland --&gt; islandAnswer: points to\n    bigCity --&gt; cityAnswer: points to\n    islandAnswer --&gt; yesPlease: points to\n    cityAnswer --&gt; yesPlease: points to\n    yesPlease --&gt; foodAnswer: points to</code></pre>  <p>Try the conversation ingame by saving the file and executing the <code>/bq reload</code> command! Then right-click Jack. Select different options by using the keys for walking forwards and backwards (W and S by default). Confirm  options by jumping (Space by default).</p>  Is the example not working? <p>Get the correct configs by running the following command.  This will overwrite any changes (including NPC ID's) you have made to the example. Linking NPCs to conversations is explained in the basics tutorial.</p> <pre><code>/q download BetonQuest/Quest-Tutorials main QuestPackages /Basics/Conversations/2-FullExample /tutorialQuest overwrite\n</code></pre>","title":"5. Joining conversation paths"},{"location":"Tutorials/Getting-Started/Basics/Conversations/#summary","tags":["Conversation-Tutorials"],"text":"<p>You've learned how to create simple conversations in which the player can choose different paths. In the next part of the basics tutorial you will learn how Jack the mayor can give food to the player using events!</p>  <p> Events </p>","title":"Summary"},{"location":"Tutorials/Getting-Started/Basics/Events/","tags":["Event-Tutorials"],"text":"<p>After you learned how to create conversations we will now take a look at events. These allow you to change the game  world. This can be anything from modifying a player's inventory to placing blocks. In this tutorial, we will give the player items and teleport them to different locations using events.</p>   <p>Requirements</p> <ul> <li>Conversations Tutorial</li> </ul>   <p>Related Docs</p> <ul> <li>Events Reference</li> <li>Events List</li> </ul>    <p>Download Tutorial Setup</p> <p> Don't do this if you already have the configs of the previous tutorial step. </p> <p>Enter this command in the chat to download the pre-made setup for this tutorial: <pre><code>/bq download BetonQuest/Quest-Tutorials main QuestPackages /Basics/Conversations/1-DirectoryStructure /tutorialQuest\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/tutorialQuest\"</p>","title":"Events"},{"location":"Tutorials/Getting-Started/Basics/Events/#1-creating-the-folder-structure-for-your-first-event","tags":["Event-Tutorials"],"text":"<p>Add a new file to your \"tutorialQuest\" <code>QuestPackage</code> named \"events.yml\". Here is an overview of what your directory structure should look like now:</p> <ul> <li> tutorialQuest<ul> <li> package.yml</li> <li> events.yml</li> <li> conversations<ul> <li> jack.yml</li> </ul> </li> </ul> </li> </ul> <p>We now have our file structure ready and can start writing events!</p>","title":"1. Creating the folder structure for your first event"},{"location":"Tutorials/Getting-Started/Basics/Events/#2-defining-your-first-event","tags":["Event-Tutorials"],"text":"<p>Open the <code>events.yml</code> now that we have created it and add the following content: </p> events.yml<pre><code>events: # (1)!\n  giveFoodToPlayer: \"give steak:16\"\n</code></pre> <ol> <li>All events must be defined in an <code>events</code> section.</li> </ol> <p>So what do we see here?</p> <ul> <li><code>giveFoodToPlayer</code>  is the name of the event. You are free to choose any name. However, it is  recommended to name     it after what it does. That just makes it easier to understand your quest.</li> <li>The Event Instruction. <ul> <li><code>give</code> The first value in the instruction is always the event type.</li> <li><code>steak:16</code> This is an option of the give event. It defines which item you want to give and which amount    seperated by a colon.</li> </ul> </li> </ul> <p>Before we can test if the event works ingame we have to create the item <code>steak</code> because BetonQuest doesn't know what a <code>steak</code> is.</p>","title":"2. Defining your first event"},{"location":"Tutorials/Getting-Started/Basics/Events/#3-creating-the-item-in-the-items-section","tags":["Event-Tutorials"],"text":"<p>For some event types like <code>give</code> you need to specify an item in the <code>items</code> section. It holds definitions of all items you want to create/use in your quest. We will create the item section in the \"package.yml\" file. </p> package.yml<pre><code>npcs:\n  '1': \"Jack\"\n\nitems:\n  steak: \"COOKED_BEEF\" # (1)!\n</code></pre> <ol> <li>Links the <code>steak</code> item name from your BetonQuest configs to the ingame <code>minecraft:COOKED_BEEF</code> item.</li> </ol> <p>Now <code>steak</code> is an item name that can be used throughout your quest.</p>","title":"3. Creating the item in the items section"},{"location":"Tutorials/Getting-Started/Basics/Events/#4-integrating-events-into-conversations","tags":["Event-Tutorials"],"text":"<p>Let's run the event from your conversation.</p>  <p>Tip: Highlighted lines in blue are new compared with the previous example. </p>  jack.yml<pre><code>conversations:\n  Jack:\n    quester: \"Jack\"\n    first: \"firstGreeting\"\n    NPC_options:\n      #... (1)\n      foodAnswer:\n        text: \"Your welcome! Take it... &amp;7*gives food*\"\n        events: \"giveFoodToPlayer\" # (2)!\n        pointer: \"thankYou\"\n    player_options:\n      #...\n      thankYou: \n        text: \"Oh that smells really good!\"\n</code></pre> <ol> <li>The tutorial will only show relevant parts of the examples from now on. </li> <li>The event argument must contain one or multiple event names. These events are executed when the corresponding    option is shown to the player.This argument can be used on both player and npc options.</li> </ol> <p>Make these changes to your conversation, reload and test! The NPC should now give the player food.</p>","title":"4. Integrating events into conversations"},{"location":"Tutorials/Getting-Started/Basics/Events/#5-testing-your-first-event-ingame","tags":["Event-Tutorials"],"text":"<p>You can also run events using commands.</p>  <p>It is very important to save all files everytime you test something! Type <code>/bq reload</code> on your server after saving.     </p>  <p>The easiest way to do this is by running a command:</p> <p>Enter <code>/bq event NAME tutorialQuest.giveFoodToPlayer</code> on the server. This command will give you the specified amount of steak if you've done everything right!</p>    Command Part Meaning     <code>/bq event</code> Tells BetonQuest that some event should be executed.   <code>NAME</code> A player's name.   <code>tutorialQuest</code> The name of a QuestPackage. This is required because you could have events with the same name in different packages.   <code>giveFoodToPlayer</code> The name of the event to execute. Don't forget to separate it with a dot from the package <code>tutorialQuest.giveFoodToPlayer</code>.    <p>You can also run this command from the console (without the slash at the start). </p>  Is the example not working? <p>Get the correct configs by running the following command.  This will overwrite any changes (including NPC ID's) you have made to the example. Linking NPCs to conversations is explained in the basics tutorial.</p> <pre><code>/bq download BetonQuest/Quest-Tutorials main QuestPackages /Basics/Events/1-FirstEvent /tutorialQuest overwrite\n</code></pre>","title":"5. Testing your first event ingame"},{"location":"Tutorials/Getting-Started/Basics/Events/#6-creating-folder-events","tags":["Event-Tutorials"],"text":"<p>Now we will create a tour through the mayors city. Meanwhile, we will learn about the teleport and folder events.</p> <p>Open the \"events.yml\" file and add these lines:                                                                                     events.yml<pre><code>events:\n  giveFoodToPlayer: \"give steak:16\"\n  townTour: \"folder tpLocation1,tpLocation2,tpLocation3,tpBlacksmith delay:2 period:5\"\n  tpLocation1: \"teleport 100;70;100;world\" # (1)!\n  tpLocation2: \"teleport 200;73;200;world\" # (2)!\n  tpLocation3: \"teleport 300;71;300;world\" # (3)!\n  tpBlacksmith: \"teleport 50;70;50;world\" # (4)!\n</code></pre></p> <ol> <li>Adjust this to your world. It must be in the unified location format</li> <li>Adjust this to your world. It must be in the unified location format</li> <li>Adjust this to your world. It must be in the unified location format</li> <li>Adjust this to your world. It must be in the unified location format</li> </ol> <p>As you can see, there are a few new events of the types <code>folder</code> and <code>teleport</code>. The folder event wraps multiple events inside itself. Once triggered, it simply executes its events.  Every event type is documented in the events list, read more about the folder and teleport events there. </p> <p>Running the <code>townTour</code> event will teleport you to a new location every five seconds until we get to our final destination, the blacksmith. The folder event is done after the <code>tpBlacksmith</code> event was run.</p> <p>Now we will add the folder event to Jack's conversation. jack.yml<pre><code>conversations:\n  Jack:\n    quester: \"Jack\"\n    first: \"firstGreeting\"\n    NPC_options:\n      #...\n      foodAnswer:\n        text: \"You're welcome! Take it... &amp;7*gives food*\"\n        events: \"giveFoodToPlayer\"\n        pointer: \"thankYou\"\n      townTour:\n        text: \"Yeah that's true. You know what also smells good? The fresh air in my town! Would you like to take a little tour?\"\n        pointer: \"enoughTime,noTimeForThat\" # (1)!\n      startTheTour:\n        text: \"Great! It is a honor for me to guide you through the town.\"\n        events: \"townTour\" # (2)!\n      noProblem:\n        text: \"That's fine! Maybe you have time another day... Just talk to me again. See you!\"\n    player_options:\n      #...\n      thankYou:\n        text: \"Oh that smells really good!\"\n        pointer: \"townTour\" # (3)!\n      enoughTime:\n        text: \"Yes of course! Show me everything.\"\n        pointer: \"startTheTour\"\n      noTimeForThat:\n        text: \"Sorry but I don't have time now...\"\n        pointer: \"noProblem\"\n</code></pre></p> <ol> <li>The player once again has a choice.</li> <li>This is the event name for the new event that we will create. It gets triggered when the <code>startTheTour</code> NPC option is shown.</li> <li>This extends the existing conversation.</li> </ol> <p>These modifications allow the player to choose whether they want to take a town tour or not.</p> <p>Now speak with the NPC again to take the tour.</p>  Is the example not working? <p>Get the correct configs by running the following command.  This will overwrite any changes (including NPC ID's) you have made to the example. Linking NPCs to conversations is explained in the basics tutorial.</p> <pre><code>/bq download BetonQuest/Quest-Tutorials main QuestPackages /Basics/Events/2-TownTour /tutorialQuest overwrite\n</code></pre>","title":"6. Creating folder events"},{"location":"Tutorials/Getting-Started/Basics/Events/#summary","tags":["Event-Tutorials"],"text":"<p>You've learned what events are and how to create them. You can now give a player some food or even teleport him through the whole town! More events can be found in the events list. Next you will learn how to give tasks to the player using objectives. </p>  <p>Objectives Tutorial</p>","title":"Summary"},{"location":"Tutorials/Getting-Started/Basics/Objectives/","tags":["Objectives"],"text":"<p>In the last tutorial you learned to create and use events.  This tutorial is about objectives. Objectives are tasks which you can assign to a player. For example breaking blocks or fishing fish. The possibilities are nearly endless! You will learn about these in this tutorial.</p>   <p>Requirements</p> <ul> <li>Conversations Tutorial</li> <li>Events Tutorial</li> </ul>   <p>Related Docs</p> <ul> <li>Objectives Reference</li> <li>Objectives List</li> </ul>    <p>Download Tutorial Setup</p> <p> Don't do this if you already have the configs of the previous tutorial step. </p> <p>Enter this command in the chat to download the pre-made setup for this tutorial: <pre><code>/bq download BetonQuest/Quest-Tutorials main QuestPackages /Basics/Objectives/1-DirectoryStructure /tutorialQuest\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/tutorialQuest\"</p>","title":"Objectives"},{"location":"Tutorials/Getting-Started/Basics/Objectives/#1-creating-the-folder-structure-for-your-first-objective","tags":["Objectives"],"text":"<p>Add a new file to your \"tutorialQuest\" <code>QuestPackage</code> named \"objectives.yml\" and  a new file to your \"tutorialQuest\" Conversations folder named \"blacksmith.yml\". You may ask why we add a new file to the conversations folder. This is because the city tour currently ends in nothingness.  We're going to add a blacksmith NPC that the player can talk to.</p> <p>Here is an overview of what your directory structure should look like now:</p> <ul> <li> tutorialQuest<ul> <li> package.yml</li> <li> events.yml</li> <li> objectives.yml</li> <li> conversations<ul> <li> jack.yml</li> <li> blacksmith.yml</li> </ul> </li> </ul> </li> </ul> <p>We now have our file structure ready and can start writing objectives and a new conversation!</p>","title":"1. Creating the folder structure for your first objective"},{"location":"Tutorials/Getting-Started/Basics/Objectives/#2-defining-your-first-objective-and-finishing-event","tags":["Objectives"],"text":"<p>Open the newly created file \"objectives.yml\" and add the following:</p> objectives.yml<pre><code>objectives: # (1)!\n  fishingObj: \"fish cod 10 notify hookLocation:100;50;100;world range:20 events:caughtAllFish\"\n</code></pre> <ol> <li>All objectives must be defined in an <code>objectives</code> section.</li> </ol> <p>Let's explain:</p> <ul> <li><code>fishingObj</code>  is the name of the objective. You can choose any name you want. However, it is  recommended to name   it after what it does. That just makes it easier to understand your quest.</li> <li>The Objective Instruction.<ul> <li><code>fish</code>: The first value in the instruction is always the objective type.</li> <li><code>cod</code>: This is an option of the objective <code>fish</code>. It defines which item you have to fish.</li> <li><code>10</code>: This is another option. It defines the amount to fish.</li> <li><code>notify</code>: This is a general argument for most objectives. It enables a notification when the player progresses the objective.</li> <li><code>hookLocation:100;50;100;world</code>: This option defines where the hook of the fishing rod must be located. Only fish that are     fished in this specific area are counted by the objective.</li> <li><code>range:20</code>: If you use the hook location you also have to define the range option. This is the range around the hook location coordinate    where fished things are still counted.</li> <li><code>events:caughtAllFish</code>: This is not an option of the fish objective but a general objective argument. The defined event(s)    get triggered once the objective is completed (after you caught 10 cod at the specified hook location).</li> </ul> </li> </ul> <p>After that we add the <code>caughtAllFish</code> event to the \"events.yml\" like this:</p> <p>events.yml<pre><code>events:\n  # Other events not shown here\n  tpBlacksmith: \"teleport 50;70;50;world\"\n  caughtAllFish: \"notify You caught enough fish!\\nReturn to the blacksmith! io:Title sound:firework_rocket\"\n</code></pre> It lets the player know that they successfully completed the objective.</p>","title":"2. Defining your first objective and finishing event"},{"location":"Tutorials/Getting-Started/Basics/Objectives/#3-creating-the-item-in-the-items-section","tags":["Objectives"],"text":"<p>As we learned in the previous tutorial we have to define <code>cod</code> in the item section because BetonQuest doesn't know what <code>cod</code> is. To add the item to the list, let's reopen the \"package.yml\" file.</p> package.yml<pre><code>npcs:\n  '1': \"Jack\"\n\nitems:\n  steak: \"COOKED_BEEF\"\n  cod: \"COD\" # (1)!\n</code></pre> <ol> <li>Links the <code>cod</code> item name from your BetonQuest configs to the ingame <code>minecraft:COD</code> item.</li> </ol> <p>Now, <code>cod</code> is a defined item that can be utilized throughout the entire quest.</p>","title":"3. Creating the item in the items section"},{"location":"Tutorials/Getting-Started/Basics/Objectives/#4-testing-your-first-objective-ingame","tags":["Objectives"],"text":"<p>It is very important to save all files everytime you test something! Type <code>/bq reload</code> on your server after saving.</p>  <p>Objectives must be started before they start watching the player's actions. The easiest way to do this is by running a command:</p> <p>Enter <code>/bq objective YOUR_NAME add tutorialQuest.fishObj</code> on the server. This command will start the objective for the player. If you want to check if you have done it correctly, go to the defined location and fish 10 cod. After you caught 10 cod you should get a notification.</p>    Command Part Meaning     <code>/bq objective</code> Tells BetonQuest that some event should be executed.   <code>NAME</code> A player's name.   <code>add</code>/<code>complete</code>/<code>del</code>/<code>list</code> Use these arguments to rather add, complete or delete an objective. The list argument does not require any further arguments and lists all objectives of the selected player.   <code>tutorialQuest</code> The name of a QuestPackage. This is required because you could have objectives with the same name in different packages.   <code>fishObj</code> The name of the objective to execute. Don't forget to separate it with a dot from the package <code>tutorialQuest.fishObj</code>.    <p>You can also run the <code>/bq objective NAME</code> to list all active objectives of a player.  <code>/bq objective NAME</code> to list all active objectives of a player.</p> <p>To manually complete the objective for a player you need to type <code>/bq objective YOUR_NAME complete tutorialQuest.fishObj</code>. After you send this command you should also get a notification about the completion of this objective.</p>","title":"4. Testing your first objective ingame"},{"location":"Tutorials/Getting-Started/Basics/Objectives/#5-using-events-to-start-objectives","tags":["Objectives"],"text":"<p>Objectives cannot only be started and stopped using commands, but also with events. Let's add an event to start the fishing objective:</p> events.yml<pre><code>events:\n  # Other events not shown here\n  tpBlacksmith: \"teleport 50;70;50;world\"\n  caughtAllFish: \"notify You caught enough fish!\\nReturn to the blacksmith! io:Title sound:firework_rocket\"\n  startFishingObj: \"objective start fishingObj\" # (1)!\n</code></pre> <ol> <li>Starts the objective <code>fishingObj</code> for the player that this event is executed on.</li> </ol>","title":"5. Using events to start objectives"},{"location":"Tutorials/Getting-Started/Basics/Objectives/#6-integrating-objectives-into-conversations","tags":["Objectives"],"text":"<p>As you know, we can run events from conversations. We can now use the new event to start an objective from a conversation.</p> <p>Let's add some dialog to the newly created file named \"blacksmith.yml\" in the conversation folder:</p> blacksmith.yml<pre><code>conversations:\n  Blacksmith:\n    quester: Blacksmith\n    first: firstGreeting\n    NPC_options:\n      firstGreeting:\n        text: Welcome %player% in Valencia! The mayor already told me that you are new to our town.\n        pointer: thatsRight\n      newArmorForNewCitizens:\n        text: So every new citizens in our town will get a new armour from me but you have to do something for me in order to get this really nice upgrade!\n        pointer: whatToDo\n      collectFish:\n        text: You will have to fish 10 fresh cod for me and bring them to me. After that I will give you the nice new armour! Is that a deal?\n        pointer: accept,deny # (1)!\n      maybeLater:\n        text: No problem! You can comeback later aswell. Bye!\n      goodLuck:\n        text: Good luck and I will see you later!\n    player_options:\n      thatsRight:\n        text: Yeah thats true. Thank you!\n        pointer: newArmorForNewCitizens\n      whatToDo:\n        text: What can I do for you?\n        pointer: collectFish\n      accept:\n        text: Sure! I could use a new armour.\n        event: startFishingObj # (2)!\n        pointer: goodLuck\n      deny:\n        text: I dont have time right now.\n        pointer: maybeLater\n</code></pre> <ol> <li>The player have the choice to say yes or no.</li> <li>This is the event to start your actual objective task to fish 10 fresh cod.</li> </ol> <p>Now link the conversation to a new NPC that is placed wherever the city tour ends. You should already know how to link the dialog to the npc in \"package.yml\". If not, check the previous tutorials!</p>  <p>It is very important to save all files everytime you test something! Type <code>/bq reload</code> on your server after saving.</p>   Is the example not working? <p>Get the correct configs by running the following command.  This will overwrite any changes (including NPC ID's) you have made to the example. Linking NPCs to conversations is explained in the basics tutorial.</p> <pre><code>/bq download BetonQuest/Quest-Tutorials main QuestPackages /Basics/Objectives/2-FullExample /tutorialQuest\n</code></pre>","title":"6. Integrating objectives into conversations"},{"location":"Tutorials/Getting-Started/Basics/Objectives/#summary","tags":["Objectives"],"text":"<p>You've learned what objectives are and how to create them. You can now give a player an  objective to have a more advanced quest! More objectives can be found in the objectives list. In the next tutorial you will learn how conditions work and how to use them to make the Blacksmith react to the completed objective.</p>  <p>  Conditions Tutorial </p> <p>This is the end of the current basic tutorial, you can find more information in the old tutorial.</p>","title":"Summary"},{"location":"Tutorials/Getting-Started/Basics/YAML-for-questers/","tags":["YAML-Tutorials"],"text":"<p>This plugin uses the YAML format for all files. You may already know it from other plugins as most use this format. Before we can start you need to understand the fundamentals of YAML.</p> <p>YAML is <code>key: \"value\"</code> based. This means you use a  to get a certain value. Let me show you an example:</p> <p>YAML Data Format<pre><code>key: \"value\"\nJack: \"Some data about Jack\"\n</code></pre> Now you can use the  <code>Jack</code> to obtain <code>Some data about Jack</code>.</p> <p>Keys and values can also be nested into each other. Then they must be indented with two spaces.</p> Nested YAML<pre><code>outerName:\n  innerName: \"innerValue\"\n  anotherInnerName: \"BetonQuest is great!\"\n</code></pre> <p>It's best not to use tabs in your YAML files at all. Use spaces instead. </p>","title":"YAML Syntax"},{"location":"Tutorials/Getting-Started/Setup-Guide/Installing-Dependencies/","text":"<ol> <li> <p>In order to use BetonQuest you (obviously)    need to add the \"BetonQuest.jar\" that you downloaded from Spigot to the \"plugins\" folder in the server.</p>  <p>Dev Build Documentation Disclaimer</p> <p>You need the latest BetonQuest 2.0.0 dev build for this tutorial.</p>  </li> <li> <p>You also need Citizens for this    tutorial. If you can't afford to buy it you can download it for free.    Just give the first paragraph of their Spigot page a good read, and you will find the link to the free download.    Also put the \"Citizens.jar\" file in your server's \"plugins\" folder.</p> </li> <li> <p>You also need ProtocolLib for this    tutorial. Also put the \"ProtocolLib.jar\" file in your server's \"plugins\" folder.</p> </li> </ol> <p>Once you have installed these restart your server!</p>  <p> Next Step: Setting up the editor</p>","title":"Installation"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-a-test-server/","text":"","title":"Setting up a test server"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-a-test-server/#why-do-i-need-a-local-server","text":"<p>You might think that a local test server is useless because you already have a remote server. There are multiple reasons why you really need one:</p> <ul> <li>Working on a live server could lead to crashes and bugs that your players will have to deal with.</li> <li>Making quests can, especially for new questers, lead to unexpected behavior. This can be anything from spawning hundreds of mobs to endlessly giving out items to a player. Exactly the stuff you don't want to happen.</li> <li>Working with a test server is usually faster and therefore more productive. You can restart it all the time, change plugin configurations as you wish etc.</li> </ul>","title":"Why do I need a local server?!"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-a-test-server/#setup-of-your-local-server","text":"<ul> <li> <p>Step 1 You have probably heard of Spigot, the biggest server software for  Minecraft. We are going to install Paper (an improved version of Spigot) on your computer.  Head over to Papers download page and click on the button you see in the image below (the versions will not match up, ignore that). </p> </li> <li> <p>Step 2 Create a new folder for the server in a place you can easily access.  Making a new folder is important because the server will create a lot of files that would mess up your Desktop etc. Move the downloaded file in the newly created folder.</p> </li> <li> <p>Step 3 Rename the file to just \"paper\". If the file name contains a \".jar\" ending make sure to keep it.</p> </li> <li> <p>Step 4 You need a start script to start your server. Open your text editor and create a file named \"start.bat\" (for Linux and Mac: \"start.sh\"). Place it next to the \"paper.jar\". Open it and copy this into it: <pre><code>java -Xms1G -Xmx1G -jar paper.jar --nogui\npause\n</code></pre> Make sure to save it as a \".bat\" file (for Linux and Mac: \".sh\")! If you save it as a \".txt\" file it will not work.</p>  What does this do? <p>This script tells Java to search for a file named \"paper.jar\". The <code>1G</code> setting in both the <code>-Xms</code> and <code>-Xmx</code> options is how much RAM you want to give to the server  (<code>1G</code> = 1 GigaByte RAM, <code>2G</code> = 2 GigaByte RAM, <code>700M</code> for 700 MegaBytes, etc.). You should not need more then 1GB in most cases.      </p>  </li> <li> <p>Step 5 Start the server by double-clicking on the start file. Please wait until the console window has closed itself. Now check the server's folder. You will find a bunch of new folders and files that have been generated. You need to accept the EULA (Minecraft's End-User-License-Agreement) to be able to run a Minecraft server. Open up the \"eula.txt\" file, read the terms and agree by setting <code>eula=false</code> to <code>eula=true</code>.</p> </li> </ul> <p>From now on the start file can be used to start the server. You can stop your server by selecting the console and pressing Ctrl+C (for Mac: Cmd+C) or just type in <code>stop</code>. To join your server you can now connect to the address <code>localhost</code> in your Minecraft.</p>  <p> Next Step: Install Dependencies</p>","title":"Setup of your local server"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-the-editor/","text":"<p>In theory, you can edit quests with any editor. However, using the feature-packed  Visual Studio Code is highly recommended! We even made our own Visual Studio Code BetonQuest addon  that enables some neat productivity advantages over any other editor.</p>","title":"Setting up the editor"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-the-editor/#installation","text":"<ul> <li> <p>Head over to Visual Studio Code's site   to install the latest version.</p> </li> <li> <p>Then install the BetonQuest extension from the   Visual Studio Marketplace.   Just click the big green \"Install\" button and allow the site to open Visual Studio Code.</p> </li> </ul> <p></p> <ul> <li>Just click \"Install\" again after Visual Studio Code has opened. </li> </ul> <p></p> <p>If this does not work for some reason go to the extensions view in VSCode (Windows and Linux: Ctrl+Shift+X | Mac: Cmd+Shift+X) and search for <code>BetonQuest</code>.</p>","title":"Installation"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-the-editor/#setup","text":"<p>Now you need to open any <code>yml</code> file by clicking on File &gt; Open Folder.... Than you can choose if you want to open the BetonQuest root directory, only the <code>QuestPackages</code> folder or a specific quest. If you don't have any quest files yet, simply open the <code>config.yml</code> file. You can open that file by clicking on it on the left side. There are a few general things to keep in mind when editing files. VSCode does a really nice job at exposing these directly to the user. They are all listed in the bottom right corner  of the editor window:</p>  <p>Caution</p> <p>Make sure to set these settings in the bottom right corner of VSCode:</p> <p><code>Spaces:2</code> Indent using Spaces. </p> <p><code>UTF-8</code> file encoding. </p> <p><code>LF</code> end of line characters. </p> <p><code>YAML</code> language module.</p>  <p></p> <p>These ensure that the extension is activated. Additionally, your configuration works with all unique language characters (a german example: \u00e4, \u00fc, \u00f6) and the file can be read on any server running on Linux.</p>","title":"Setup"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-the-editor/#usage","text":"","title":"Usage"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-the-editor/#snippets","text":"<p>The main feature of our extension are so-called \"code snippets\". These are basically pre-defined events, conditions etc. that can be filled with any of your custom options.</p> <p>Start typing the name of an event/condition/objective and press Ctrl + Space. VSCode will list possible completions. These include both snippets and yaml entries that are already defined in your file. Snippets will have the official  documentation as description.  VSCode will enter snippet mode once you press Enter while having a snippet selected. Navigating between options works by pressing Tab. If you want to go backwards you can invert the movement of the cursor by pressing Shift and Tab.</p> <p>An option will be fully highlighted if it needs to be replaced with material names, messages... They will not show a drop-down menu. If an option does, you need to choose between the offered options. Optional options are displayed as an empty field in the drop-down. These optional options can also contain a colon (<code>:</code>). You have to specify something behind them depending on the context.  An example might be provided after the colon (<code>:</code>). Just replace it with the value you want.</p> <p>Neat features: </p> <ul> <li>You will automatically jump to the next line if you press tab after the last option.</li> <li>The snippet automatically surrounds the event/condition... with <code>\"\"</code>.</li> <li>There are not only snippets for <code>events</code>, <code>objectives</code> and <code>conditions</code> but also for conversations!</li> <li>Pressing Alt + B creates a new conversationOption.</li> </ul> <p>Take a look at this short video or play around with it yourself until you understand how it works:</p> <p>Note: This video is slightly outdated and does not show some newer features!</p>    Sorry, your browser doesn't support embedded videos.     <p> Next Step: Basic Tutorial</p>","title":"Snippets"}]}